{"version":3,"file":"main.bundle.js","sources":["webpack:///external \"vendor_lib\"","webpack:///delegated ./node_modules/webpack/buildin/global.js from dll-reference polyfills_lib","webpack:///delegated ./node_modules/@angular/core/@angular/core.es5.js from dll-reference vendor_lib","webpack:///delegated ./node_modules/@angular/platform-browser/@angular/platform-browser.es5.js from dll-reference vendor_lib","webpack:///./src/app/app.service.ts","webpack:///delegated ./node_modules/@angular/http/@angular/http.es5.js from dll-reference vendor_lib","webpack:///delegated ./node_modules/@angular/router/@angular/router.es5.js from dll-reference vendor_lib","webpack:///delegated ./node_modules/process/browser.js from dll-reference polyfills_lib","webpack:///./src/app/environment.ts","webpack:///delegated ./node_modules/@angularclass/hmr/dist/index.js from dll-reference vendor_lib","webpack:///./src/app/home/index.ts","webpack:///./src/app/no-content/index.ts","webpack:///./src/app/student/index.ts","webpack:///./src/app/teacher/index.ts","webpack:///delegated ./node_modules/rxjs/Observable.js from dll-reference vendor_lib","webpack:///delegated ./node_modules/@angular/forms/@angular/forms.es5.js from dll-reference vendor_lib","webpack:///delegated ./node_modules/rxjs/add/observable/of.js from dll-reference vendor_lib","webpack:///./src/app/index.ts","webpack:///delegated ./node_modules/@angular/platform-browser-dynamic/@angular/platform-browser-dynamic.es5.js from dll-reference vendor_lib","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/app.resolver.ts","webpack:///./src/app/app.routes.ts","webpack:///./src/app/home/home.component.ts","webpack:///./src/app/home/title/index.ts","webpack:///./src/app/home/title/title.service.ts","webpack:///./src/app/no-content/no-content.component.ts","webpack:///./src/app/student/student.component.ts","webpack:///./src/app/teacher/teacher.component.ts","webpack:///./src/main.browser.ts","webpack:///./src/styles/styles.scss","webpack:///./src/app/app.component.css","webpack:///./src/app/home/home.component.css","webpack:///./src/app/student/student.style.css","webpack:///./src/app/teacher/teacher.style.css","webpack:///./src/styles/headings.css","webpack:///./src/app/home/home.component.html","webpack:///./src/app/student/student.template.html","webpack:///./src/app/teacher/teacher.template.html","webpack:///./src/styles/styles.scss?b992","webpack:///./src/styles/headings.css?f235","webpack:///./src/app/app.component.css?e3a3","webpack:///./src/app/home/home.component.css?5810","webpack:///./src/app/student/student.style.css?18c9","webpack:///./src/app/teacher/teacher.style.css?04a5","webpack:///./src/app/student/mediaElements.js","webpack:///./src/app/student/rtcMultiConnection.js","webpack:///./src/app/teacher/mediaElements.js","webpack:///./src/app/teacher/rtcMultiConnection.js","webpack:///delegated ./node_modules/rxjs/Subject.js from dll-reference vendor_lib","webpack:///delegated ./node_modules/rxjs/add/observable/forkJoin.js from dll-reference vendor_lib","webpack:///delegated ./node_modules/rxjs/add/observable/fromEvent.js from dll-reference vendor_lib","webpack:///delegated ./node_modules/rxjs/add/observable/merge.js from dll-reference vendor_lib","webpack:///delegated ./node_modules/rxjs/add/observable/throw.js from dll-reference vendor_lib","webpack:///delegated ./node_modules/rxjs/add/operator/auditTime.js from dll-reference vendor_lib","webpack:///delegated ./node_modules/rxjs/add/operator/catch.js from dll-reference vendor_lib","webpack:///delegated ./node_modules/rxjs/add/operator/do.js from dll-reference vendor_lib","webpack:///delegated ./node_modules/rxjs/add/operator/filter.js from dll-reference vendor_lib","webpack:///delegated ./node_modules/rxjs/add/operator/finally.js from dll-reference vendor_lib","webpack:///delegated ./node_modules/rxjs/add/operator/first.js from dll-reference vendor_lib","webpack:///delegated ./node_modules/rxjs/add/operator/map.js from dll-reference vendor_lib","webpack:///delegated ./node_modules/rxjs/add/operator/share.js from dll-reference vendor_lib","webpack:///delegated ./node_modules/rxjs/add/operator/startWith.js from dll-reference vendor_lib","webpack:///delegated ./node_modules/rxjs/add/operator/switchMap.js from dll-reference vendor_lib","webpack:///delegated ./node_modules/@angular/common/@angular/common.es5.js from dll-reference vendor_lib","webpack:///ws (ignored)"],"sourcesContent":["module.exports = vendor_lib;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"vendor_lib\"\n// module id = 1\n// module chunks = 1","module.exports = (__webpack_require__(0))(94)\n\n\n//////////////////\n// WEBPACK FOOTER\n// delegated ./node_modules/webpack/buildin/global.js from dll-reference polyfills_lib\n// module id = 3\n// module chunks = 1","module.exports = (__webpack_require__(1))(42)\n\n\n//////////////////\n// WEBPACK FOOTER\n// delegated ./node_modules/@angular/core/@angular/core.es5.js from dll-reference vendor_lib\n// module id = 4\n// module chunks = 1","module.exports = (__webpack_require__(1))(62)\n\n\n//////////////////\n// WEBPACK FOOTER\n// delegated ./node_modules/@angular/platform-browser/@angular/platform-browser.es5.js from dll-reference vendor_lib\n// module id = 11\n// module chunks = 1","import { Injectable } from '@angular/core';\n\nexport type InternalStateType = {\n  [key: string]: any\n};\n\n@Injectable()\nexport class AppState {\n\n  public _state: InternalStateType = { };\n\n  // already return a clone of the current state\n  public get state() {\n    return this._state = this._clone(this._state);\n  }\n  // never allow mutation\n  public set state(value) {\n    throw new Error('do not mutate the `.state` directly');\n  }\n\n  public get(prop?: any) {\n    // use our state getter for the clone\n    const state = this.state;\n    return state.hasOwnProperty(prop) ? state[prop] : state;\n  }\n\n  public set(prop: string, value: any) {\n    // internally mutate our state\n    return this._state[prop] = value;\n  }\n\n  private _clone(object: InternalStateType) {\n    // simple object clone\n    return JSON.parse(JSON.stringify( object ));\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader??ref--7-0!./src/app/app.service.ts","module.exports = (__webpack_require__(1))(202)\n\n\n//////////////////\n// WEBPACK FOOTER\n// delegated ./node_modules/@angular/http/@angular/http.es5.js from dll-reference vendor_lib\n// module id = 19\n// module chunks = 1","module.exports = (__webpack_require__(1))(204)\n\n\n//////////////////\n// WEBPACK FOOTER\n// delegated ./node_modules/@angular/router/@angular/router.es5.js from dll-reference vendor_lib\n// module id = 20\n// module chunks = 1","module.exports = (__webpack_require__(0))(399)\n\n\n//////////////////\n// WEBPACK FOOTER\n// delegated ./node_modules/process/browser.js from dll-reference polyfills_lib\n// module id = 22\n// module chunks = 1","// Angular 2\nimport {\n  enableDebugTools,\n  disableDebugTools\n} from '@angular/platform-browser';\nimport {\n  ApplicationRef,\n  enableProdMode\n} from '@angular/core';\n// Environment Providers\nlet PROVIDERS: any[] = [\n  // common env directives\n];\n\n// Angular debug tools in the dev console\n// https://github.com/angular/angular/blob/86405345b781a9dc2438c0fbe3e9409245647019/TOOLS_JS.md\nlet _decorateModuleRef = <T>(value: T): T => { return value; };\n\nif ('production' === ENV) {\n  enableProdMode();\n\n  // Production\n  _decorateModuleRef = (modRef: any) => {\n    disableDebugTools();\n\n    return modRef;\n  };\n\n  PROVIDERS = [\n    ...PROVIDERS,\n    // custom providers in production\n  ];\n\n} else {\n\n  _decorateModuleRef = (modRef: any) => {\n    const appRef = modRef.injector.get(ApplicationRef);\n    const cmpRef = appRef.components[0];\n\n    let _ng = (<any> window).ng;\n    enableDebugTools(cmpRef);\n    (<any> window).ng.probe = _ng.probe;\n    (<any> window).ng.coreTokens = _ng.coreTokens;\n    return modRef;\n  };\n\n  // Development\n  PROVIDERS = [\n    ...PROVIDERS,\n    // custom providers in development\n  ];\n\n}\n\nexport const decorateModuleRef = _decorateModuleRef;\n\nexport const ENV_PROVIDERS = [\n  ...PROVIDERS\n];\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader??ref--7-0!./src/app/environment.ts","module.exports = (__webpack_require__(1))(205)\n\n\n//////////////////\n// WEBPACK FOOTER\n// delegated ./node_modules/@angularclass/hmr/dist/index.js from dll-reference vendor_lib\n// module id = 24\n// module chunks = 1","export * from './home.component';\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader??ref--7-0!./src/app/home/index.ts","export * from './no-content.component';\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader??ref--7-0!./src/app/no-content/index.ts","export * from './student.component';\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader??ref--7-0!./src/app/student/index.ts","export * from './teacher.component';\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader??ref--7-0!./src/app/teacher/index.ts","module.exports = (__webpack_require__(1))(0)\n\n\n//////////////////\n// WEBPACK FOOTER\n// delegated ./node_modules/rxjs/Observable.js from dll-reference vendor_lib\n// module id = 45\n// module chunks = 1","module.exports = (__webpack_require__(1))(201)\n\n\n//////////////////\n// WEBPACK FOOTER\n// delegated ./node_modules/@angular/forms/@angular/forms.es5.js from dll-reference vendor_lib\n// module id = 47\n// module chunks = 1","module.exports = (__webpack_require__(1))(420)\n\n\n//////////////////\n// WEBPACK FOOTER\n// delegated ./node_modules/rxjs/add/observable/of.js from dll-reference vendor_lib\n// module id = 53\n// module chunks = 1","// App\nexport * from './app.module';\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader??ref--7-0!./src/app/index.ts","module.exports = (__webpack_require__(1))(203)\n\n\n//////////////////\n// WEBPACK FOOTER\n// delegated ./node_modules/@angular/platform-browser-dynamic/@angular/platform-browser-dynamic.es5.js from dll-reference vendor_lib\n// module id = 73\n// module chunks = 1","/*\n * Angular 2 decorators and services\n */\nimport {\n  Component,\n  OnInit,\n  ViewEncapsulation\n} from '@angular/core';\nimport { AppState } from './app.service';\n\n/*\n * App Component\n * Top Level Component\n */\n@Component({\n  selector: 'app',\n  encapsulation: ViewEncapsulation.None,\n  styles: [\n    require('./app.component.css')\n  ],\n  template: `\n  <nav>\n  <a [routerLink]=\"['./teacher']\"\nrouterLinkActive = \"active\" [routerLinkActiveOptions] = \"{exact: true}\" >\n  Teacher\n  </a>\n   <a [routerLink]=\"['./student']\"\nrouterLinkActive = \"active\" [routerLinkActiveOptions] = \"{exact: true}\" >\n  Student\n  </a>\n  </nav>\n   <main>\n      <router-outlet></router-outlet>\n    </main>\n    <footer>\n     </footer>\n  `\n})\nexport class AppComponent implements OnInit {\n  public angularclassLogo = 'assets/img/angularclass-avatar.png';\n  public name = 'Angular 2 Webpack Starter';\n  public url = 'https://twitter.com/AngularClass';\n\n  constructor(\n    public appState: AppState\n  ) { }\n\n  public ngOnInit() {\n\n  }\n\n}\n\n\n\n/*\n * Please review the https://github.com/AngularClass/angular2-examples/ repo for\n * more angular app examples that you may copy/paste\n * (The examples may not be updated as quickly. Please open an issue on github for us to update it)\n * For help or questions please contact us at @AngularClass on twitter\n * or our chat on Slack at https://AngularClass.com/slack-join\n */\n      // <a [routerLink]=\" ['./detail'] \"\n      //   routerLinkActive=\"active\" [routerLinkActiveOptions]= \"{exact: true}\">\n      //   Detail\n      // </a>\n      // <a [routerLink]=\" ['./barrel'] \"\n      //   routerLinkActive=\"active\" [routerLinkActiveOptions]= \"{exact: true}\">\n      //   Barrel\n      // </a>\n      // <a [routerLink]=\" ['./about'] \"\n      //   routerLinkActive=\"active\" [routerLinkActiveOptions]= \"{exact: true}\">\n      //   About\n      // </a>\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader??ref--7-0!./src/app/app.component.ts","import { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule } from '@angular/forms';\nimport { HttpModule } from '@angular/http';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MaterialModule } from '@angular/material';\nimport $ from 'jquery';\n\n// import {\n//   MdButtonModule,\n//   MdCheckboxModule,\n//   MdInputModule,\n//   MdCardModule,\n//   MdIconModule,\n// } from '@angular/material';\nimport {\n  NgModule,\n  ApplicationRef\n} from '@angular/core';\nimport {\n  removeNgStyles,\n  createNewHosts,\n  createInputTransfer\n} from '@angularclass/hmr';\nimport {\n  RouterModule,\n  PreloadAllModules\n} from '@angular/router';\n\n\n/*\n * Platform and Environment providers/directives/pipes\n */\nimport { ENV_PROVIDERS } from './environment';\nimport { ROUTES } from './app.routes';\n// App is our top level component\nimport { AppComponent } from './app.component';\nimport { APP_RESOLVER_PROVIDERS } from './app.resolver';\nimport { AppState, InternalStateType } from './app.service';\nimport { HomeComponent } from './home';\nimport { AboutComponent } from './about';\nimport { TeacherComponent } from './teacher';\nimport { StudentComponent } from './student';\n\nimport { NoContentComponent } from './no-content';\nimport { XLargeDirective } from './home/x-large';\n\n\n\n\nimport '../styles/styles.scss';\nimport '../styles/headings.css';\n\n// Application wide providers\nconst APP_PROVIDERS = [\n  ...APP_RESOLVER_PROVIDERS,\n  AppState\n];\n\ntype StoreType = {\n  state: InternalStateType,\n  restoreInputValues: () => void,\n  disposeOldHosts: () => void\n};\n\n/**\n * `AppModule` is the main entry point into Angular2's bootstraping process\n */\n@NgModule({\n  bootstrap: [AppComponent],\n  declarations: [\n    AppComponent,\n    // AboutComponent,\n    TeacherComponent,\n    StudentComponent,\n    HomeComponent,\n    NoContentComponent,\n    // XLargeDirective\n  ],\n  imports: [ // import Angular's modules\n    BrowserModule,\n    FormsModule,\n    HttpModule,\n    RouterModule.forRoot(ROUTES, { useHash: true, preloadingStrategy: PreloadAllModules }),\n    BrowserAnimationsModule,\n    MaterialModule,\n\n\n  ],\n\n  providers: [ // expose our Services and Providers into Angular's dependency injection\n    ENV_PROVIDERS,\n    APP_PROVIDERS\n  ]\n})\nexport class AppModule {\n\n  constructor(\n    public appRef: ApplicationRef,\n    public appState: AppState\n  ) { }\n\n  public hmrOnInit(store: StoreType) {\n    if (!store || !store.state) {\n      return;\n    }\n\n    // set state\n    this.appState._state = store.state;\n    // set input values\n    if ('restoreInputValues' in store) {\n      let restoreInputValues = store.restoreInputValues;\n      setTimeout(restoreInputValues);\n    }\n\n    this.appRef.tick();\n    delete store.state;\n    delete store.restoreInputValues;\n  }\n\n  public hmrOnDestroy(store: StoreType) {\n    const cmpLocation = this.appRef.components.map((cmp) => cmp.location.nativeElement);\n    // save state\n    const state = this.appState._state;\n    store.state = state;\n    // recreate root elements\n    store.disposeOldHosts = createNewHosts(cmpLocation);\n    // save input values\n    store.restoreInputValues = createInputTransfer();\n    // remove styles\n    removeNgStyles();\n  }\n\n  public hmrAfterDestroy(store: StoreType) {\n    // display new elements\n    store.disposeOldHosts();\n    delete store.disposeOldHosts;\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader??ref--7-0!./src/app/app.module.ts","import { Resolve, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/observable/of';\n\n@Injectable()\nexport class DataResolver implements Resolve<any> {\n  public resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    return Observable.of({ res: 'I am data'});\n  }\n}\n\n// an array of services to resolve routes with data\nexport const APP_RESOLVER_PROVIDERS = [\n  DataResolver\n];\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader??ref--7-0!./src/app/app.resolver.ts","import { Routes } from '@angular/router';\n// import { HomeComponent } from './home';\nimport { AboutComponent } from './about';\nimport { TeacherComponent } from './teacher';\nimport { HomeComponent } from './home';\n\nimport { StudentComponent } from './student';\n\nimport { NoContentComponent } from './no-content';\nimport { DataResolver } from './app.resolver';\n\nexport const ROUTES: Routes = [\n  { path: '', component: HomeComponent },\n  // { path: 'home', component: HomeComponent },\n  // { path: 'about', component: AboutComponent },\n  { path: 'teacher', component: TeacherComponent },\n  { path: 'student', component: StudentComponent },\n\n\n  // { path: 'detail', loadChildren: './+detail#DetailModule' },\n  // { path: 'barrel', loadChildren: './+barrel#BarrelModule' },\n  { path: '**', component: NoContentComponent },\n];\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader??ref--7-0!./src/app/app.routes.ts","import {\n  Component,\n  OnInit\n} from '@angular/core';\n\nimport { AppState } from '../app.service';\nimport { Title } from './title';\nimport { XLargeDirective } from './x-large';\n\n@Component({\n  // The selector is what angular internally uses\n  // for `document.querySelectorAll(selector)` in our index.html\n  // where, in this case, selector is the string 'home'\n  selector: 'home',  // <home></home>\n  // We need to tell Angular's Dependency Injection which providers are in our app.\n  providers: [\n    Title\n  ],\n  // Our list of styles in our component. We may add more to compose many styles together\n  styles: [require('./home.component.css')],\n  // Every Angular template is first compiled by the browser before Angular runs it's compiler\n  template: require('./home.component.html')\n})\nexport class HomeComponent implements OnInit {\n  // Set our default values\n  public localState = { value: '' };\n  // TypeScript public modifiers\n  constructor(\n    public appState: AppState,\n    public title: Title\n  ) { }\n\n  public ngOnInit() {\n\n    // this.title.getData().subscribe(data => this.data = data);\n  }\n\n  public submitState(value: string) {\n\n    this.appState.set('value', value);\n    this.localState.value = '';\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader??ref--7-0!./src/app/home/home.component.ts","export * from './title.service';\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader??ref--7-0!./src/app/home/title/index.ts","import { Injectable } from '@angular/core';\nimport { Http } from '@angular/http';\n\n@Injectable()\nexport class Title {\n\n  public value = 'Angular 2';\n\n  constructor(\n    public http: Http\n  ) {}\n\n  public getData() {\n    console.log('Title#getData(): Get Data');\n    // return this.http.get('/assets/data.json')\n    // .map(res => res.json());\n    return {\n      value: 'AngularClass'\n    };\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader??ref--7-0!./src/app/home/title/title.service.ts","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'no-content',\n  template: `\n    <div>\n      <h1>404: page missing</h1>\n    </div>\n  `\n})\nexport class NoContentComponent {\n\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader??ref--7-0!./src/app/no-content/no-content.component.ts","import {\n  Component,\n  OnInit, AfterContentInit, ElementRef, SecurityContext\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport './rtcMultiConnection.js';\nimport './mediaElements.js';\nimport * as io from 'socket.io-client';\nimport * as _ from 'underscore';\nimport { MdButtonModule, MdCheckboxModule, MdInputModule } from '@angular/material';\n@Component({\n  selector: 'student',\n  styles: [require('./student.style.css')],\n  template: require('./student.template.html'),\n})\nexport class StudentComponent implements OnInit {\n\n  public localState: any;\n  public io = io;\n  public students = [];\n  public localVideo = '';\n  public teacherId: String;\n  public teacherVideo: String;\n  // public mediaElement = this.mediaElement;\n\n  public connection = new RTCMultiConnection('', '', io);\n  // public getMedia = new getMediaElement();\n\n  constructor(\n    public route: ActivatedRoute,\n    private elementRef: ElementRef,\n    private sanitizer: DomSanitizer\n\n  ) {\n    // this.connection.socketURL = 'https://quiet-bayou-32555.herokuapp.com/';\n    // let socket = io('https://quiet-bayou-32555.herokuapp.com/');\n    this.connection.socketURL = 'https://webrtcsocketserver.herokuapp.com/';\n    let socket = io('https://webrtcsocketserver.herokuapp.com/');\n    // this.connection.socketURL = 'http://localhost:9001/';\n    // let socket = io('http://localhost:9001/');\n\n    socket.on('connect', function () {\n      console.log('socket connected');\n\n    });\n    // this.connection.io = 'https://rtcmulticonnection.herokuapp.com:443/';\n\n    this.connection.socketMessageEvent = 'audio-video-file-chat-demo';\n    this.connection.enableLogs = false;\n    this.connection.enableFileSharing = true; // by default, it is \"false\".\n    this.connection.session = {\n      audio: true,\n      video: true,\n      data: true\n    };\n    this.connection.sdpConstraints.mandatory = {\n      OfferToReceiveAudio: true,\n      OfferToReceiveVideo: true\n    };\n    this.connection.videosContainer = document.getElementById('videoscontainer');\n    this.connection.onstream = function (event) {\n      let width = 100;\n      let mediaElement = event.mediaElement;\n      let el = getMediaElement(event.mediaElement, {\n        title: event.userid,\n        buttons: ['full-screen'],\n        width,\n        showOnMouseEnter: true\n      });\n      if (event.type === 'remote') {\n        // event.blobURL = event.blobURL + event.streamid;\n        if (event.userid === this.teacherId) {\n          this.teacherVideo = this.sanitize(event.blobURL);\n        } else {\n          this.students.push({ userid: event.userid, src: this.sanitize(event.blobURL) });\n        }\n\n      } else if (event.type === 'local') {\n        // event.blobURL = event.blobURL + event.streamid;\n\n        this.localVideo = this.sanitize(event.blobURL);\n      }\n      // this.elementRef.nativeElement.appendChild(mediaElement);\n      setTimeout(function () {\n        // mediaElement.media.play();\n      }, 5000);\n      // this.mediaElement.id = event.streamid;\n    }.bind(this);\n    this.connection.onstreamended = function (event) {\n      let mediaElement = document.getElementById(event.streamid);\n      if (mediaElement) {\n        mediaElement.parentNode.removeChild(mediaElement);\n      }\n    }.bind(this);\n    // this.connection.onmessage = appendDIV;\n    this.connection.filesContainer = document.getElementById('file-container');\n    this.connection.onopen = function () {\n      // document.getElementById('share-file').disabled = false;\n      // document.getElementById('input-text-chat').disabled = false;\n      // document.getElementById('btn-leave-room').disabled = false;\n      // document.querySelector('h1').innerHTML = 'You are connected with: ' + this.connection.getAllParticipants().join(', ');\n    }.bind(this);\n    this.connection.onclose = function (event) {\n\n      this.students = this.students.filter((o) => { return o.userid !== event.userid; });\n      if (this.connection.getAllParticipants().length) {\n        // document.querySelector('h1').innerHTML = 'You are still connected with: ' + this.connection.getAllParticipants().join(', ');\n      }\n      else {\n        // document.querySelector('h1').innerHTML = 'Seems session has been closed or all participants left.';\n      }\n    }.bind(this);\n    this.connection.onEntireSessionClosed = function (event) {\n      // document.getElementById('share-file').disabled = true;\n      // document.getElementById('input-text-chat').disabled = true;\n      // document.getElementById('btn-leave-room').disabled = true;\n      // document.getElementById('open-or-join-room').disabled = false;\n      // document.getElementById('open-room').disabled = false;\n      // document.getElementById('join-room').disabled = false;\n      // document.getElementById('room-id').disabled = false;\n      this.connection.attachStreams.forEach(function (stream) {\n        stream.stop();\n      });\n      // don't display alert for moderator\n      if (this.connection.userid === event.userid) return;\n      document.querySelector('h1').innerHTML = 'Entire session has been closed by the moderator: ' + event.userid;\n    }.bind(this);\n    this.connection.onUserIdAlreadyTaken = function (useridAlreadyTaken, yourNewUserId) {\n      // seems room is already opened\n      this.connection.join(useridAlreadyTaken);\n    }.bind(this);\n\n  }\n\n  public ngOnInit() {\n    this.route\n      .data\n      .subscribe((data: any) => {\n        // your resolved data from route\n        this.localState = data.yourData;\n      });\n\n\n    // static data that is bundled\n    // var mockData = require('assets/mock-data/mock-data.json');\n    // console.log('mockData', mockData);\n    // if you're working with mock data you can also use http.get('assets/mock-data/mock-data.json')\n    this.asyncDataWithWebpack();\n  }\n  public openRoom() {\n    this.disableInputButtons();\n\n    this.connection.open('11111', function () {\n      // this.showRoomURL('11111');\n    });\n  };\n  public joinClass(newClassID: string) {\n    this.disableInputButtons();\n    if (newClassID) {\n      this.teacherId = newClassID;\n      this.connection.join(newClassID);\n    }\n  };\n\n  // by default, socket.io server is assumed to be deployed on your own URL\n\n  // comment-out below line if you do not have your own socket.io server\n\n  public disableInputButtons() {\n    // document.getElementById('open-or-join-room').disabled = true;\n    // document.getElementById('open-room').disabled = true;\n    // document.getElementById('join-room').disabled = true;\n    // document.getElementById('room-id').disabled = true;\n  }\n  // ......................................................\n  // ......................Handling Room-ID................\n  // ......................................................\n  public showRoomURL(roomid) {\n    let roomHashURL = '#' + roomid;\n    let roomQueryStringURL = '?roomid=' + roomid;\n    let html = '<h2>Unique URL for your room:</h2><br>';\n    html += 'Hash URL: <a href=\"' + roomHashURL + '\" target=\"_blank\">' + roomHashURL + '</a>';\n    html += '<br>';\n    html += 'QueryString URL: <a href=\"' + roomQueryStringURL + '\" target=\"_blank\">' + roomQueryStringURL + '</a>';\n    let roomURLsDiv = document.getElementById('room-urls');\n    roomURLsDiv.innerHTML = html;\n    roomURLsDiv.style.display = 'block';\n  }\n  private sanitize(url: string) {\n    return this.sanitizer.bypassSecurityTrustResourceUrl(url);\n  }\n  private asyncDataWithWebpack() {\n    // you can also async load mock data with 'es6-promise-loader'\n    // you would do this if you don't want the mock-data bundled\n    // remember that 'es6-promise-loader' is a promise\n    setTimeout(() => {\n\n      System.import('../../assets/mock-data/mock-data.json')\n        .then((json) => {\n\n          this.localState = json;\n        });\n\n    });\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader??ref--7-0!./src/app/student/student.component.ts","import {\n  Component,\n  OnInit, AfterContentInit, ElementRef, SecurityContext\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport './rtcMultiConnection.js';\nimport './mediaElements.js';\nimport * as io from 'socket.io-client';\nimport * as _ from 'underscore';\nimport { UUID } from 'angular2-uuid';\nimport $ from 'jquery';\ndeclare var jQuery: any;\n@Component({\n  selector: 'teacher',\n  styles: [require('./teacher.style.css')],\n  template: require('./teacher.template.html'),\n})\nexport class TeacherComponent implements OnInit {\n\n  public localState: any;\n  public io = io;\n  public students = [];\n  public localVideo = '';\n  public uuid = UUID.UUID();\n  public classStarted: Boolean;\n  public audioCtx = new AudioContext();\n  // public mediaElement = this.mediaElement;\n\n  public connection = new RTCMultiConnection('', '', io);\n\n  // public getMedia = new getMediaElement();\n\n  constructor(\n    public route: ActivatedRoute,\n    private elementRef: ElementRef,\n    private sanitizer: DomSanitizer\n\n  ) {\n    // this.connection.socketURL = 'https://rtcmulticonnection.herokuapp.com:443/';\n    // let socket = io('https://rtcmulticonnection.herokuapp.com:443/');\n    this.connection.socketURL = 'https://webrtcsocketserver.herokuapp.com/';\n    let socket = io('https://webrtcsocketserver.herokuapp.com/');\n\n    // this.connection.socketURL = 'http://localhost:9001/';\n    // let socket = io('http://localhost:9001/');\n    this.connection.enableLogs = false;\n    socket.on('connect', function () {\n\n    });\n    // this.connection.io = 'https://rtcmulticonnection.herokuapp.com:443/';\n\n    this.connection.socketMessageEvent = 'audio-video-file-chat-demo';\n    this.connection.enableFileSharing = true; // by default, it is \"false\".\n    this.connection.session = {\n      audio: true,\n      video: true,\n      data: true\n    };\n    this.connection.sdpConstraints.mandatory = {\n      OfferToReceiveAudio: true,\n      OfferToReceiveVideo: true\n    };\n    this.connection.videosContainer = document.getElementById('videoscontainer');\n    this.connection.onstream = function (event) {\n      let width = 100;\n      let mediaElement = event.mediaElement;\n      let el = getMediaElement(event.mediaElement, {\n        title: event.userid,\n        buttons: ['full-screen'],\n        width,\n        showOnMouseEnter: true\n      });\n      if (event.type === 'remote') {\n        // event.blobURL = event.blobURL + event.streamid;\n        let src = this.sanitize(event.blobURL);\n        this.students.push({ userid: event.userid, src });\n        setTimeout(this.getFrequency(event), 5000);\n        // setInterval(console.log(frequencyData), 500);\n      } else if (event.type === 'local') {\n        // event.blobURL = event.blobURL + event.streamid;\n\n        this.localVideo = this.sanitize(event.blobURL);\n      }\n      // this.elementRef.nativeElement.appendChild(mediaElement);\n      setTimeout(function () {\n        // mediaElement.media.play();\n      }, 5000);\n      // this.mediaElement.id = event.streamid;\n    }.bind(this);\n    this.connection.onstreamended = function (event) {\n      let mediaElement = document.getElementById(event.streamid);\n      if (mediaElement) {\n        mediaElement.parentNode.removeChild(mediaElement);\n      }\n    }.bind(this);\n    // this.connection.onmessage = appendDIV;\n    this.connection.filesContainer = document.getElementById('file-container');\n    this.connection.onopen = function () {\n      // document.getElementById('share-file').disabled = false;\n      // document.getElementById('input-text-chat').disabled = false;\n      // document.getElementById('btn-leave-room').disabled = false;\n      // document.querySelector('h1').innerHTML = 'You are connected with: ' + this.connection.getAllParticipants().join(', ');\n    }.bind(this);\n    this.connection.onclose = function (event) {\n\n      this.students = this.students.filter((o) => { return o.userid !== event.userid; });\n      if (this.connection.getAllParticipants().length) {\n        // document.querySelector('h1').innerHTML = 'You are still connected with: ' + this.connection.getAllParticipants().join(', ');\n      }\n      else {\n        // document.querySelector('h1').innerHTML = 'Seems session has been closed or all participants left.';\n      }\n    }.bind(this);\n    this.connection.onEntireSessionClosed = function (event) {\n      // document.getElementById('share-file').disabled = true;\n      // document.getElementById('input-text-chat').disabled = true;\n      // document.getElementById('btn-leave-room').disabled = true;\n      // document.getElementById('open-or-join-room').disabled = false;\n      // document.getElementById('open-room').disabled = false;\n      // document.getElementById('join-room').disabled = false;\n      // document.getElementById('room-id').disabled = false;\n      this.connection.attachStreams.forEach(function (stream) {\n        stream.stop();\n      });\n      // don't display alert for moderator\n      if (this.connection.userid === event.userid) return;\n      document.querySelector('h1').innerHTML = 'Entire session has been closed by the moderator: ' + event.userid;\n    }.bind(this);\n    this.connection.onUserIdAlreadyTaken = function (useridAlreadyTaken, yourNewUserId) {\n      // seems room is already opened\n      this.connection.join(useridAlreadyTaken);\n    }.bind(this);\n\n  }\n\n  public ngOnInit() {\n    this.route\n      .data\n      .subscribe((data: any) => {\n        // your resolved data from route\n        this.localState = data.yourData;\n      });\n    let canvas = document.getElementById('myCanvas-qdw81w4k9zc')\n    console.log('canvas :', canvas);\n    console.log('canvas :', $('#video-qdw81w4k9zc'));\n\n    // static data that is bundled\n    // var mockData = require('assets/mock-data/mock-data.json');\n    // console.log('mockData', mockData);\n    // if you're working with mock data you can also use http.get('assets/mock-data/mock-data.json')\n    this.asyncDataWithWebpack();\n  }\n  public startClass() {\n    this.disableInputButtons();\n\n    this.connection.open(this.uuid, function () {\n      this.classStarted = true;\n    }.bind(this));\n  };\n  public joinRoom() {\n    this.disableInputButtons();\n    this.connection.join('11111');\n  };\n\n  // by default, socket.io server is assumed to be deployed on your own URL\n\n  // comment-out below line if you do not have your own socket.io server\n\n  public disableInputButtons() {\n    // document.getElementById('open-or-join-room').disabled = true;\n    // document.getElementById('open-room').disabled = true;\n    // document.getElementById('join-room').disabled = true;\n    // document.getElementById('room-id').disabled = true;\n  }\n  // ......................................................\n  // ......................Handling Room-ID................\n  // ......................................................\n  public showRoomURL(roomid) {\n    let roomHashURL = '#' + roomid;\n    let roomQueryStringURL = '?roomid=' + roomid;\n    let html = '<h2>Unique URL for your room:</h2><br>';\n    html += 'Hash URL: <a href=\"' + roomHashURL + '\" target=\"_blank\">' + roomHashURL + '</a>';\n    html += '<br>';\n    html += 'QueryString URL: <a href=\"' + roomQueryStringURL + '\" target=\"_blank\">' + roomQueryStringURL + '</a>';\n    let roomURLsDiv = document.getElementById('room-urls');\n    roomURLsDiv.innerHTML = html;\n    roomURLsDiv.style.display = 'block';\n  }\n\n  public getFrequency(event) {\n    // let canvas = $('#myCanvas-qdw81w4k9zc');\n    let canvas = document.getElementById('myCanvas-qdw81w4k9zc')\n    console.log('canvas :', canvas);\n    console.log('canvas :', $('#video-qdw81w4k9zc'));\n\n\n    let analyser = this.audioCtx.createAnalyser();\n    let source = this.audioCtx.createMediaStreamSource(event.stream);\n    source.connect(analyser);\n    analyser.connect(this.audioCtx.destination);\n    analyser.fftSize = 32;\n\n    let frequencyData = new Uint8Array(analyser.frequencyBinCount);\n    analyser.getByteFrequencyData(frequencyData);\n    // P10.style.height = ((frequencyData[0] * 100) / 256) + \"%\";\n    // P20.style.height = ((frequencyData[1] * 100) / 256) + \"%\";\n    // P30.style.height = ((frequencyData[2] * 100) / 256) + \"%\";\n    // P40.style.height = ((frequencyData[3] * 100) / 256) + \"%\";\n    // P50.style.height = ((frequencyData[4] * 100) / 256) + \"%\";\n    // P60.style.height = ((frequencyData[5] * 100) / 256) + \"%\";\n    // P70.style.height = ((frequencyData[6] * 100) / 256) + \"%\";\n    // P80.style.height = ((frequencyData[7] * 100) / 256) + \"%\";\n    // P90.style.height = ((frequencyData[8] * 100) / 256) + \"%\";\n\n    function renderFrame() {\n      requestAnimationFrame(renderFrame);\n      // update data in frequencyData\n      analyser.getByteFrequencyData(frequencyData);\n      // render frame based on values in frequencyData\n      console.log(frequencyData);\n    }\n    // audio.start();\n    // renderFrame();\n\n  }\n\n  private sanitize(url: string) {\n    return this.sanitizer.bypassSecurityTrustResourceUrl(url);\n  }\n  private asyncDataWithWebpack() {\n    // you can also async load mock data with 'es6-promise-loader'\n    // you would do this if you don't want the mock-data bundled\n    // remember that 'es6-promise-loader' is a promise\n    setTimeout(() => {\n\n      System.import('../../assets/mock-data/mock-data.json')\n        .then((json) => {\n\n          this.localState = json;\n        });\n\n    });\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader??ref--7-0!./src/app/teacher/teacher.component.ts","/*\n * Angular bootstraping\n */\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { decorateModuleRef } from './app/environment';\nimport { bootloader } from '@angularclass/hmr';\n/*\n * App Module\n * our top level module that holds all of our components\n */\nimport { AppModule } from './app';\n\n/*\n * Bootstrap our Angular app with a top level NgModule\n */\nexport function main(): Promise<any> {\n  return platformBrowserDynamic()\n    .bootstrapModule(AppModule)\n    .then(decorateModuleRef)\n    .catch((err) => console.error(err));\n}\n\n// needed for hmr\n// in prod this is replace for document ready\nbootloader(main);\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/tslint-loader??ref--7-0!./src/main.browser.ts","exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")(undefined);\n// imports\n\n\n// module\nexports.push([module.id, \"/* this file will be extracted to main dist folder and is imported in index.html */\\n/* This file is for setting global styles  */\\nnav {\\n  margin-top: 16px; }\\n\\nnav a {\\n  background-color: #00838F;\\n  color: white;\\n  padding: 8px 16px;\\n  margin: 8px;\\n  vertical-align: middle;\\n  line-height: 1.25;\\n  text-align: center;\\n  text-decoration: none;\\n  border-radius: 4px; }\\n\", \"\"]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader!./~/sass-loader/lib/loader.js!./src/styles/styles.scss\n// module id = 98\n// module chunks = 1","exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")(undefined);\n// imports\n\n\n// module\nexports.push([module.id, \"html, body{\\n  height: 100%;\\n  font-family: Arial, Helvetica, sans-serif\\n}\\n\\na.active {\\n  background-color: gray;\\n}\\n\", \"\"]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader!./src/app/app.component.css\n// module id = 99\n// module chunks = 1","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")(undefined);\n// imports\n\n\n// module\nexports.push([module.id, \"/*styles for home content only*/\", \"\"]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader!./src/app/home/home.component.css\n// module id = 100\n// module chunks = 1","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")(undefined);\n// imports\n\n\n// module\nexports.push([module.id, \"        /*video {\\n            object-fit: fill;\\n            width: 30%;\\n        }\\n        \\n        button,\\n        input,\\n        select {\\n            font-weight: normal;\\n            padding: 2px 4px;\\n            text-decoration: none;\\n            display: inline-block;\\n            text-shadow: none;\\n            font-size: 16px;\\n            outline: none;\\n        }\\n        \\n        .make-center {\\n            text-align: center;\\n            padding: 5px 10px;\\n        }*/\\n        \\n        .teacherCard {\\n            margin-top: 35px;\\n        }\\n        \\n        .teacherVideo {\\n            height: 250px;\\n            width: 450px\\n        }\\n        \\n        .studentVideo {\\n            height: 150px;\\n            width: 250px\\n        }\", \"\"]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader!./src/app/student/student.style.css\n// module id = 101\n// module chunks = 1","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")(undefined);\n// imports\n\n\n// module\nexports.push([module.id, \"        /*video {\\n            object-fit: fill;\\n            width: 30%;\\n        }\\n        \\n        button,\\n        input,\\n        select {\\n            font-weight: normal;\\n            padding: 2px 4px;\\n            text-decoration: none;\\n            display: inline-block;\\n            text-shadow: none;\\n            font-size: 16px;\\n            outline: none;\\n        }\\n        \\n        .make-center {\\n            text-align: center;\\n            padding: 5px 10px;\\n        }*/\\n        \\n        .teacherCard {\\n            margin-top: 35px;\\n        }\\n        \\n        .teacherVideo {\\n            height: 250px;\\n            width: 450px\\n        }\\n        \\n        .studentVideo {\\n            height: 150px;\\n            width: 250px\\n        }\", \"\"]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader!./src/app/teacher/teacher.style.css\n// module id = 102\n// module chunks = 1","exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")(undefined);\n// imports\n\n\n// module\nexports.push([module.id, \"h1 {\\n  color: #00BCD4;\\n}\", \"\"]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader!./src/styles/headings.css\n// module id = 103\n// module chunks = 1","module.exports = \"<div>\\n    <h1 x-large class=\\\"sample-content\\\">Welcome to Remote School</h1>\\n\\n    <hr>\\n\\n    <div>\\n        To start a class go to Teacher menu, and share class ID with your students. To join an existing class go to Student menu and use class ID provided by your teacher.\\n    </div>\\n\\n    <hr>\\n\\n    <div>\\n        <!--<h4>Local State</h4>\\n\\n        <form (ngSubmit)=\\\"submitState(localState.value)\\\" autocomplete=\\\"off\\\">\\n\\n            <input [value]=\\\"localState.value\\\" (input)=\\\"localState.value = $event.target.value\\\" placeholder=\\\"Submit Local State to App State\\\" autofocus>\\n\\n            <button>Submit Value</button>\\n            <md-card>\\n                <button md-button>FLAT</button>\\n                <button md-raised-button>RAISED</button>\\n            </md-card>\\n        </form>-->\\n        <!--\\n        <input type=\\\"text\\\" [value]=\\\"localState.value\\\" (input)=\\\"localState.value = $event.target.value\\\" autofocus>\\n        Rather than wiring up two-way data-binding ourselves with [value] and (input)\\n        we can use Angular's [(ngModel)] syntax\\n        <input type=\\\"text\\\" name=\\\"textInput\\\" [(ngModel)]=\\\"localState.value\\\" autofocus>\\n      -->\\n\\n        <!--<pre>this.localState = {{ localState | json }}</pre>-->\\n\\n    </div>\\n\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/home/home.component.html\n// module id = 117\n// module chunks = 1","module.exports = \"<section class=\\\"experiment\\\">\\n    <md-card class=\\\"teacherCard\\\">\\n        <md-card-title>Welcome to Class</md-card-title>\\n    </md-card>\\n    <!--<md-card class=\\\"teacherCard\\\">\\n        <button id=\\\"join-room\\\" md-button (click)=\\\"joinRoom()\\\">Join Class</button>\\n    </md-card>-->\\n    <!--<div class=\\\"make-center\\\">\\n        <input type=\\\"text\\\" id=\\\"room-id\\\" value=\\\"abcdef\\\">\\n        <button id=\\\"open-room\\\" md-button (click)=\\\"openRoom()\\\">Open Room</button>\\n        <button id=\\\"join-room\\\" (click)=\\\"joinRoom()\\\">Join Room</button>\\n       \\n\\n        <br><br>\\n        <input type=\\\"text\\\" id=\\\"input-text-chat\\\" placeholder=\\\"Enter Text Chat\\\" disabled>\\n        <button id=\\\"share-file\\\" disabled (click)=\\\"toggleImage()\\\">Share File</button>\\n        <br><br>\\n        <button id=\\\"btn-leave-room\\\" disabled (click)=\\\"toggleImage()\\\">Leave /or close the room</button>\\n\\n        <div id=\\\"room-urls\\\" style=\\\"text-align: center;display: none;background: #F1EDED;margin: 15px -10px;border: 1px solid rgb(189, 189, 189);border-left: 0;border-right: 0;\\\"></div>\\n    </div>-->\\n\\n    <div id=\\\"chat-container\\\">\\n        <div id=\\\"file-container\\\"></div>\\n        <div class=\\\"chat-output\\\"></div>\\n    </div>\\n    <md-card class=\\\"teacherCard\\\">\\n        <md-card-title>Class</md-card-title>\\n        <md-input-container>\\n            <input mdInput placeholder=\\\"Class ID\\\" #newClassID (keyup.enter)=\\\"joinClass(newClassID.value)\\\" (blur)=\\\"joinClass(newClassID.value); newClassID.value='' \\\" />\\n\\n        </md-input-container>\\n        <button md-button (click)=\\\"joinClass(newClassID.value)\\\">Join Class</button>\\n\\n\\n\\n    </md-card>\\n    <md-card class=\\\"teacherCard\\\" *ngIf=\\\"localVideo;\\\">\\n        <md-card-content *ngIf=\\\"teacherVideo;\\\">\\n\\n            <h1>Teacher</h1>\\n            <video controls #teacherStream [src]=\\\"teacherVideo\\\" autoplay class=\\\"teacherVideo\\\">\\n            </video>\\n\\n        </md-card-content>\\n        <md-card-content *ngIf=\\\"localVideo;\\\">\\n\\n\\n            <h1>You</h1>\\n            <video controls #localStream [src]=\\\"localVideo\\\" autoplay muted=\\\"true\\\" class=\\\"teacherVideo\\\">\\n            </video>\\n\\n        </md-card-content>\\n    </md-card>\\n    <md-card class=\\\"teacherCard\\\" *ngIf=\\\"students.length>0;\\\">\\n        <md-card-title>Classmates</md-card-title>\\n        <md-card-content>\\n\\n\\n            <video controls #localStream [src]=\\\"stream.src\\\" *ngFor=\\\"let stream of students\\\" autoplay class=\\\"studentVideo\\\">\\n        </video>\\n        </md-card-content>\\n\\n\\n    </md-card>\\n\\n\\n\\n</section>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/student/student.template.html\n// module id = 118\n// module chunks = 1","module.exports = \"<section class=\\\"experiment\\\">\\n    <!--<md-card class=\\\"teacherCard\\\">\\n        <md-card-title>Welcome to Remote School</md-card-title>\\n    </md-card>-->\\n    <md-card class=\\\"teacherCard\\\">\\n        <label *ngIf=\\\"classStarted;\\\">\\n            Please share this ID with your students to Join the class :<b>{{uuid}}</b>\\n        </label>\\n        <button md-button id=\\\"open-room\\\" *ngIf=\\\"!classStarted;\\\" (click)=\\\"startClass()\\\">Start Class</button>\\n        <!--<button id=\\\"join-room\\\" md-button (click)=\\\"joinRoom()\\\">Join Class</button>-->\\n    </md-card>\\n    <!--<div class=\\\"make-center\\\">\\n        <input type=\\\"text\\\" id=\\\"room-id\\\" value=\\\"abcdef\\\">\\n        <button id=\\\"open-room\\\" md-button (click)=\\\"openRoom()\\\">Open Room</button>\\n        <button id=\\\"join-room\\\" (click)=\\\"joinRoom()\\\">Join Room</button>\\n       \\n\\n        <br><br>\\n        <input type=\\\"text\\\" id=\\\"input-text-chat\\\" placeholder=\\\"Enter Text Chat\\\" disabled>\\n        <button id=\\\"share-file\\\" disabled (click)=\\\"toggleImage()\\\">Share File</button>\\n        <br><br>\\n        <button id=\\\"btn-leave-room\\\" disabled (click)=\\\"toggleImage()\\\">Leave /or close the room</button>\\n\\n        <div id=\\\"room-urls\\\" style=\\\"text-align: center;display: none;background: #F1EDED;margin: 15px -10px;border: 1px solid rgb(189, 189, 189);border-left: 0;border-right: 0;\\\"></div>\\n    </div>-->\\n\\n    <div id=\\\"chat-container\\\">\\n        <div id=\\\"file-container\\\"></div>\\n        <div class=\\\"chat-output\\\"></div>\\n    </div>\\n    <md-card class=\\\"teacherCard\\\" *ngIf=\\\"localVideo;\\\">\\n        <md-card-title>Teacher</md-card-title>\\n        <md-card-content>\\n            <video controls #localStream [src]=\\\"localVideo\\\" autoplay muted=\\\"true\\\" class=\\\"teacherVideo\\\">\\n            </video>\\n        </md-card-content>\\n\\n    </md-card>\\n    <md-card class=\\\"teacherCard\\\" *ngIf=\\\"students.length>0;\\\">\\n        <md-card-title>Students</md-card-title>\\n        <canvas id=\\\"myCanvas-qdw81w4k9zc\\\" width=\\\"100\\\" height=\\\"50\\\" style=\\\"background:lightgray;\\\"></canvas>\\n        <md-card-content *ngFor=\\\"let stream of students\\\">\\n\\n\\n            <video id=\\\"video-qdw81w4k9zc\\\" controls #localStream [src]=\\\"stream.src\\\" autoplay class=\\\"studentVideo\\\" style=\\\"border:20px;\\\">\\n        </video>\\n        </md-card-content>\\n\\n\\n    </md-card>\\n\\n\\n\\n</section>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/teacher/teacher.template.html\n// module id = 119\n// module chunks = 1","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../node_modules/css-loader/index.js!../../node_modules/sass-loader/lib/loader.js!./styles.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!../../node_modules/style-loader/addStyles.js\")(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../node_modules/css-loader/index.js!../../node_modules/sass-loader/lib/loader.js!./styles.scss\", function() {\n\t\t\tvar newContent = require(\"!!../../node_modules/css-loader/index.js!../../node_modules/sass-loader/lib/loader.js!./styles.scss\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/styles/styles.scss\n// module id = 123\n// module chunks = 1","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../node_modules/css-loader/index.js!./headings.css\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!../../node_modules/style-loader/addStyles.js\")(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../node_modules/css-loader/index.js!./headings.css\", function() {\n\t\t\tvar newContent = require(\"!!../../node_modules/css-loader/index.js!./headings.css\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/styles/headings.css\n// module id = 124\n// module chunks = 1","\n        var result = require(\"!!../../node_modules/css-loader/index.js!./app.component.css\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/app.component.css\n// module id = 126\n// module chunks = 1","\n        var result = require(\"!!../../../node_modules/css-loader/index.js!./home.component.css\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/home/home.component.css\n// module id = 127\n// module chunks = 1","\n        var result = require(\"!!../../../node_modules/css-loader/index.js!./student.style.css\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/student/student.style.css\n// module id = 128\n// module chunks = 1","\n        var result = require(\"!!../../../node_modules/css-loader/index.js!./teacher.style.css\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/teacher/teacher.style.css\n// module id = 129\n// module chunks = 1","// Last time updated at August 19, 2014, 14:46:23\n\n// Muaz Khan     - www.MuazKhan.com\n// MIT License   - www.WebRTC-Experiment.com/licence\n// Documentation - github.com/muaz-khan/WebRTC-Experiment/tree/master/getMediaElement\n\n// Demo          - www.WebRTC-Experiment.com/getMediaElement\n\ndocument.write('<link rel=\"stylesheet\" href=\"https://cdn.WebRTC-Experiment.com/getMediaElement.css\">');\n\n// __________________\n// getMediaElement.js\n\nwindow.getMediaElement = function(mediaElement, config) {\n    config = config || {};\n\n    if (!mediaElement.nodeName || (mediaElement.nodeName.toLowerCase() != 'audio' && mediaElement.nodeName.toLowerCase() != 'video')) {\n        if (!mediaElement.getVideoTracks().length) {\n            return getAudioElement(mediaElement, config);\n        }\n\n        var mediaStream = mediaElement;\n        mediaElement = document.createElement(mediaStream.getVideoTracks().length ? 'video' : 'audio');\n        mediaElement[!!navigator.mozGetUserMedia ? 'mozSrcObject' : 'src'] = !!navigator.mozGetUserMedia ? mediaStream : window.webkitURL.createObjectURL(mediaStream);\n    }\n\n    if (mediaElement.nodeName && mediaElement.nodeName.toLowerCase() == 'audio') {\n        return getAudioElement(mediaElement, config);\n    }\n\n    mediaElement.controls = false;\n\n    var buttons = config.buttons || ['mute-audio', 'mute-video', 'full-screen', 'volume-slider', 'stop'];\n    buttons.has = function(element) {\n        return buttons.indexOf(element) !== -1;\n    };\n\n    config.toggle = config.toggle || [];\n    config.toggle.has = function(element) {\n        return config.toggle.indexOf(element) !== -1;\n    };\n\n    var mediaElementContainer = document.createElement('div');\n    mediaElementContainer.className = 'media-container';\n\n    var mediaControls = document.createElement('div');\n    mediaControls.className = 'media-controls';\n    mediaElementContainer.appendChild(mediaControls);\n\n    if (buttons.has('mute-audio')) {\n        var muteAudio = document.createElement('div');\n        muteAudio.className = 'control ' + (config.toggle.has('mute-audio') ? 'unmute-audio selected' : 'mute-audio');\n        mediaControls.appendChild(muteAudio);\n\n        muteAudio.onclick = function() {\n            if (muteAudio.className.indexOf('unmute-audio') != -1) {\n                muteAudio.className = muteAudio.className.replace('unmute-audio selected', 'mute-audio');\n                mediaElement.muted = false;\n                mediaElement.volume = 1;\n                if (config.onUnMuted) config.onUnMuted('audio');\n            } else {\n                muteAudio.className = muteAudio.className.replace('mute-audio', 'unmute-audio selected');\n                mediaElement.muted = true;\n                mediaElement.volume = 0;\n                if (config.onMuted) config.onMuted('audio');\n            }\n        };\n    }\n\n    if (buttons.has('mute-video')) {\n        var muteVideo = document.createElement('div');\n        muteVideo.className = 'control ' + (config.toggle.has('mute-video') ? 'unmute-video selected' : 'mute-video');\n        mediaControls.appendChild(muteVideo);\n\n        muteVideo.onclick = function() {\n            if (muteVideo.className.indexOf('unmute-video') != -1) {\n                muteVideo.className = muteVideo.className.replace('unmute-video selected', 'mute-video');\n                mediaElement.muted = false;\n                mediaElement.volume = 1;\n                mediaElement.play();\n                if (config.onUnMuted) config.onUnMuted('video');\n            } else {\n                muteVideo.className = muteVideo.className.replace('mute-video', 'unmute-video selected');\n                mediaElement.muted = true;\n                mediaElement.volume = 0;\n                mediaElement.pause();\n                if (config.onMuted) config.onMuted('video');\n            }\n        };\n    }\n\n    if (buttons.has('take-snapshot')) {\n        var takeSnapshot = document.createElement('div');\n        takeSnapshot.className = 'control take-snapshot';\n        mediaControls.appendChild(takeSnapshot);\n\n        takeSnapshot.onclick = function() {\n            if (config.onTakeSnapshot) config.onTakeSnapshot();\n        };\n    }\n\n    if (buttons.has('stop')) {\n        var stop = document.createElement('div');\n        stop.className = 'control stop';\n        mediaControls.appendChild(stop);\n\n        stop.onclick = function() {\n            mediaElementContainer.style.opacity = 0;\n            setTimeout(function() {\n                if (mediaElementContainer.parentNode) {\n                    mediaElementContainer.parentNode.removeChild(mediaElementContainer);\n                }\n            }, 800);\n            if (config.onStopped) config.onStopped();\n        };\n    }\n\n    var volumeControl = document.createElement('div');\n    volumeControl.className = 'volume-control';\n\n    if (buttons.has('record-audio')) {\n        var recordAudio = document.createElement('div');\n        recordAudio.className = 'control ' + (config.toggle.has('record-audio') ? 'stop-recording-audio selected' : 'record-audio');\n        volumeControl.appendChild(recordAudio);\n\n        recordAudio.onclick = function() {\n            if (recordAudio.className.indexOf('stop-recording-audio') != -1) {\n                recordAudio.className = recordAudio.className.replace('stop-recording-audio selected', 'record-audio');\n                if (config.onRecordingStopped) config.onRecordingStopped('audio');\n            } else {\n                recordAudio.className = recordAudio.className.replace('record-audio', 'stop-recording-audio selected');\n                if (config.onRecordingStarted) config.onRecordingStarted('audio');\n            }\n        };\n    }\n\n    if (buttons.has('record-video')) {\n        var recordVideo = document.createElement('div');\n        recordVideo.className = 'control ' + (config.toggle.has('record-video') ? 'stop-recording-video selected' : 'record-video');\n        volumeControl.appendChild(recordVideo);\n\n        recordVideo.onclick = function() {\n            if (recordVideo.className.indexOf('stop-recording-video') != -1) {\n                recordVideo.className = recordVideo.className.replace('stop-recording-video selected', 'record-video');\n                if (config.onRecordingStopped) config.onRecordingStopped('video');\n            } else {\n                recordVideo.className = recordVideo.className.replace('record-video', 'stop-recording-video selected');\n                if (config.onRecordingStarted) config.onRecordingStarted('video');\n            }\n        };\n    }\n\n    if (buttons.has('volume-slider')) {\n        var volumeSlider = document.createElement('div');\n        volumeSlider.className = 'control volume-slider';\n        volumeControl.appendChild(volumeSlider);\n\n        var slider = document.createElement('input');\n        slider.type = 'range';\n        slider.min = 0;\n        slider.max = 100;\n        slider.value = 100;\n        slider.onchange = function() {\n            mediaElement.volume = '.' + slider.value.toString().substr(0, 1);\n        };\n        volumeSlider.appendChild(slider);\n    }\n\n    if (buttons.has('full-screen')) {\n        var zoom = document.createElement('div');\n        zoom.className = 'control ' + (config.toggle.has('zoom-in') ? 'zoom-out selected' : 'zoom-in');\n\n        if (!slider && !recordAudio && !recordVideo && zoom) {\n            mediaControls.insertBefore(zoom, mediaControls.firstChild);\n        } else volumeControl.appendChild(zoom);\n\n        zoom.onclick = function() {\n            if (zoom.className.indexOf('zoom-out') != -1) {\n                zoom.className = zoom.className.replace('zoom-out selected', 'zoom-in');\n                exitFullScreen();\n            } else {\n                zoom.className = zoom.className.replace('zoom-in', 'zoom-out selected');\n                launchFullscreen(mediaElementContainer);\n            }\n        };\n\n        function launchFullscreen(element) {\n            if (element.requestFullscreen) {\n                element.requestFullscreen();\n            } else if (element.mozRequestFullScreen) {\n                element.mozRequestFullScreen();\n            } else if (element.webkitRequestFullscreen) {\n                element.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);\n            }\n        }\n\n        function exitFullScreen() {\n            if (document.fullscreen) {\n                document.cancelFullScreen();\n            }\n\n            if (document.mozFullScreen) {\n                document.mozCancelFullScreen();\n            }\n\n            if (document.webkitIsFullScreen) {\n                document.webkitCancelFullScreen();\n            }\n        }\n\n        function screenStateChange(e) {\n            if (e.srcElement != mediaElementContainer) return;\n\n            var isFullScreeMode = document.webkitIsFullScreen || document.mozFullScreen || document.fullscreen;\n\n            mediaElementContainer.style.width = (isFullScreeMode ? (window.innerWidth - 20) : config.width) + 'px';\n            mediaElementContainer.style.display = isFullScreeMode ? 'block' : 'inline-block';\n\n            if (config.height) {\n                mediaBox.style.height = (isFullScreeMode ? (window.innerHeight - 20) : config.height) + 'px';\n            }\n\n            if (!isFullScreeMode && config.onZoomout) config.onZoomout();\n            if (isFullScreeMode && config.onZoomin) config.onZoomin();\n\n            if (!isFullScreeMode && zoom.className.indexOf('zoom-out') != -1) {\n                zoom.className = zoom.className.replace('zoom-out selected', 'zoom-in');\n                if (config.onZoomout) config.onZoomout();\n            }\n            setTimeout(adjustControls, 1000);\n        }\n\n        document.addEventListener('fullscreenchange', screenStateChange, false);\n        document.addEventListener('mozfullscreenchange', screenStateChange, false);\n        document.addEventListener('webkitfullscreenchange', screenStateChange, false);\n    }\n\n    if (buttons.has('volume-slider') || buttons.has('full-screen') || buttons.has('record-audio') || buttons.has('record-video')) {\n        mediaElementContainer.appendChild(volumeControl);\n    }\n\n    var mediaBox = document.createElement('div');\n    mediaBox.className = 'media-box';\n    mediaElementContainer.appendChild(mediaBox);\n\n    mediaBox.appendChild(mediaElement);\n\n    if (!config.width) config.width = (innerWidth / 2) - 50;\n\n    mediaElementContainer.style.width = config.width + 'px';\n\n    if (config.height) {\n        mediaBox.style.height = config.height + 'px';\n    }\n\n    mediaBox.querySelector('video').style.maxHeight = innerHeight + 'px';\n\n    var times = 0;\n\n    function adjustControls() {\n        mediaControls.style.marginLeft = (mediaElementContainer.clientWidth - mediaControls.clientWidth - 2) + 'px';\n\n        if (slider) {\n            slider.style.width = (mediaElementContainer.clientWidth / 3) + 'px';\n            volumeControl.style.marginLeft = (mediaElementContainer.clientWidth / 3 - 30) + 'px';\n\n            if (zoom) zoom.style['border-top-right-radius'] = '5px';\n        } else {\n            volumeControl.style.marginLeft = (mediaElementContainer.clientWidth - volumeControl.clientWidth - 2) + 'px';\n        }\n\n        volumeControl.style.marginTop = (mediaElementContainer.clientHeight - volumeControl.clientHeight - 2) + 'px';\n\n        if (times < 10) {\n            times++;\n            setTimeout(adjustControls, 1000);\n        } else times = 0;\n    }\n\n    if (config.showOnMouseEnter || typeof config.showOnMouseEnter === 'undefined') {\n        mediaElementContainer.onmouseenter = mediaElementContainer.onmousedown = function() {\n            adjustControls();\n            mediaControls.style.opacity = 1;\n            volumeControl.style.opacity = 1;\n        };\n\n        mediaElementContainer.onmouseleave = function() {\n            mediaControls.style.opacity = 0;\n            volumeControl.style.opacity = 0;\n        };\n    } else {\n        setTimeout(function() {\n            adjustControls();\n            setTimeout(function() {\n                mediaControls.style.opacity = 1;\n                volumeControl.style.opacity = 1;\n            }, 300);\n        }, 700);\n    }\n\n    adjustControls();\n\n    mediaElementContainer.toggle = function(clasName) {\n        if (typeof clasName != 'string') {\n            for (var i = 0; i < clasName.length; i++) {\n                mediaElementContainer.toggle(clasName[i]);\n            }\n            return;\n        }\n\n        if (clasName == 'mute-audio' && muteAudio) muteAudio.onclick();\n        if (clasName == 'mute-video' && muteVideo) muteVideo.onclick();\n\n        if (clasName == 'record-audio' && recordAudio) recordAudio.onclick();\n        if (clasName == 'record-video' && recordVideo) recordVideo.onclick();\n\n        if (clasName == 'stop' && stop) stop.onclick();\n\n        return this;\n    };\n\n    mediaElementContainer.media = mediaElement;\n\n    return mediaElementContainer;\n}\n\n// __________________\n// getAudioElement.js\n\nfunction getAudioElement(mediaElement, config) {\n    config = config || {};\n\n    if (!mediaElement.nodeName || (mediaElement.nodeName.toLowerCase() != 'audio' && mediaElement.nodeName.toLowerCase() != 'video')) {\n        var mediaStream = mediaElement;\n        mediaElement = document.createElement('audio');\n        mediaElement[!!navigator.mozGetUserMedia ? 'mozSrcObject' : 'src'] = !!navigator.mozGetUserMedia ? mediaStream : window.webkitURL.createObjectURL(mediaStream);\n    }\n\n    config.toggle = config.toggle || [];\n    config.toggle.has = function(element) {\n        return config.toggle.indexOf(element) !== -1;\n    };\n\n    mediaElement.controls = false;\n    mediaElement.play();\n\n    var mediaElementContainer = document.createElement('div');\n    mediaElementContainer.className = 'media-container';\n\n    var mediaControls = document.createElement('div');\n    mediaControls.className = 'media-controls';\n    mediaElementContainer.appendChild(mediaControls);\n\n    var muteAudio = document.createElement('div');\n    muteAudio.className = 'control ' + (config.toggle.has('mute-audio') ? 'unmute-audio selected' : 'mute-audio');\n    mediaControls.appendChild(muteAudio);\n\n    muteAudio.style['border-top-left-radius'] = '5px';\n\n    muteAudio.onclick = function() {\n        if (muteAudio.className.indexOf('unmute-audio') != -1) {\n            muteAudio.className = muteAudio.className.replace('unmute-audio selected', 'mute-audio');\n            mediaElement.muted = false;\n            if (config.onUnMuted) config.onUnMuted('audio');\n        } else {\n            muteAudio.className = muteAudio.className.replace('mute-audio', 'unmute-audio selected');\n            mediaElement.muted = true;\n            if (config.onMuted) config.onMuted('audio');\n        }\n    };\n\n    if (!config.buttons || (config.buttons && config.buttons.indexOf('record-audio') != -1)) {\n        var recordAudio = document.createElement('div');\n        recordAudio.className = 'control ' + (config.toggle.has('record-audio') ? 'stop-recording-audio selected' : 'record-audio');\n        mediaControls.appendChild(recordAudio);\n\n        recordAudio.onclick = function() {\n            if (recordAudio.className.indexOf('stop-recording-audio') != -1) {\n                recordAudio.className = recordAudio.className.replace('stop-recording-audio selected', 'record-audio');\n                if (config.onRecordingStopped) config.onRecordingStopped('audio');\n            } else {\n                recordAudio.className = recordAudio.className.replace('record-audio', 'stop-recording-audio selected');\n                if (config.onRecordingStarted) config.onRecordingStarted('audio');\n            }\n        };\n    }\n\n    var volumeSlider = document.createElement('div');\n    volumeSlider.className = 'control volume-slider';\n    volumeSlider.style.width = 'auto';\n    mediaControls.appendChild(volumeSlider);\n\n    var slider = document.createElement('input');\n    slider.style.marginTop = '11px';\n    slider.style.width = ' 200px';\n\n    if (config.buttons && config.buttons.indexOf('record-audio') == -1) {\n        slider.style.width = ' 241px';\n    }\n\n    slider.type = 'range';\n    slider.min = 0;\n    slider.max = 100;\n    slider.value = 100;\n    slider.onchange = function() {\n        mediaElement.volume = '.' + slider.value.toString().substr(0, 1);\n    };\n    volumeSlider.appendChild(slider);\n\n    var stop = document.createElement('div');\n    stop.className = 'control stop';\n    mediaControls.appendChild(stop);\n\n    stop.onclick = function() {\n        mediaElementContainer.style.opacity = 0;\n        setTimeout(function() {\n            if (mediaElementContainer.parentNode) {\n                mediaElementContainer.parentNode.removeChild(mediaElementContainer);\n            }\n        }, 800);\n        if (config.onStopped) config.onStopped();\n    };\n\n    stop.style['border-top-right-radius'] = '5px';\n    stop.style['border-bottom-right-radius'] = '5px';\n\n    var mediaBox = document.createElement('div');\n    mediaBox.className = 'media-box';\n    mediaElementContainer.appendChild(mediaBox);\n\n    var h2 = document.createElement('h2');\n    h2.innerHTML = config.title || 'Audio Element';\n    h2.setAttribute('style', 'position: absolute;color: rgb(160, 160, 160);font-size: 20px;text-shadow: 1px 1px rgb(255, 255, 255);padding:0;margin:0;');\n    mediaBox.appendChild(h2);\n\n    mediaBox.appendChild(mediaElement);\n\n    mediaElementContainer.style.width = '329px';\n    mediaBox.style.height = '90px';\n\n    h2.style.width = mediaElementContainer.style.width;\n    h2.style.height = '50px';\n    h2.style.overflow = 'hidden';\n\n    var times = 0;\n\n    function adjustControls() {\n        mediaControls.style.marginLeft = (mediaElementContainer.clientWidth - mediaControls.clientWidth - 7) + 'px';\n        mediaControls.style.marginTop = (mediaElementContainer.clientHeight - mediaControls.clientHeight - 6) + 'px';\n        if (times < 10) {\n            times++;\n            setTimeout(adjustControls, 1000);\n        } else times = 0;\n    }\n\n    if (config.showOnMouseEnter || typeof config.showOnMouseEnter === 'undefined') {\n        mediaElementContainer.onmouseenter = mediaElementContainer.onmousedown = function() {\n            adjustControls();\n            mediaControls.style.opacity = 1;\n        };\n\n        mediaElementContainer.onmouseleave = function() {\n            mediaControls.style.opacity = 0;\n        };\n    } else {\n        setTimeout(function() {\n            adjustControls();\n            setTimeout(function() {\n                mediaControls.style.opacity = 1;\n            }, 300);\n        }, 700);\n    }\n\n    adjustControls();\n\n    mediaElementContainer.toggle = function(clasName) {\n        if (typeof clasName != 'string') {\n            for (var i = 0; i < clasName.length; i++) {\n                mediaElementContainer.toggle(clasName[i]);\n            }\n            return;\n        }\n\n        if (clasName == 'mute-audio' && muteAudio) muteAudio.onclick();\n        if (clasName == 'record-audio' && recordAudio) recordAudio.onclick();\n        if (clasName == 'stop' && stop) stop.onclick();\n\n        return this;\n    };\n\n    mediaElementContainer.media = mediaElement;\n\n    return mediaElementContainer;\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/student/mediaElements.js\n// module id = 132\n// module chunks = 1","'use strict';\n\n// Last time updated: 2017-03-11 7:14:04 AM UTC\n\n// _________________________\n// RTCMultiConnection v3.4.4\n\n// Open-Sourced: https://github.com/muaz-khan/RTCMultiConnection\n\n// --------------------------------------------------\n// Muaz Khan     - www.MuazKhan.com\n// MIT License   - www.WebRTC-Experiment.com/licence\n// --------------------------------------------------\n\nwindow.RTCMultiConnection = function(roomid, forceOptions, io) {\n    var io = io;\n\n    function SocketConnection(connection, connectCallback) {\n        var parameters = '';\n\n        parameters += '?userid=' + connection.userid;\n        parameters += '&sessionid=' + connection.sessionid;\n        parameters += '&msgEvent=' + connection.socketMessageEvent;\n        parameters += '&socketCustomEvent=' + connection.socketCustomEvent;\n        parameters += '&autoCloseEntireSession=' + !!connection.autoCloseEntireSession;\n\n        parameters += '&maxParticipantsAllowed=' + connection.maxParticipantsAllowed;\n\n        if (connection.enableScalableBroadcast) {\n            parameters += '&enableScalableBroadcast=true';\n            parameters += '&maxRelayLimitPerUser=' + (connection.maxRelayLimitPerUser || 2);\n        }\n\n        if (connection.socketCustomParameters) {\n            parameters += connection.socketCustomParameters;\n        }\n\n        try {\n            io.sockets = {};\n        } catch (e) {};\n\n        if (!connection.socketURL) {\n            connection.socketURL = '/';\n        }\n\n        if (connection.socketURL.substr(connection.socketURL.length - 1, 1) != '/') {\n            // connection.socketURL = 'https://domain.com:9001/';\n            throw '\"socketURL\" MUST end with a slash.';\n        }\n\n        if (connection.enableLogs) {\n            if (connection.socketURL == '/') {\n                console.info('socket.io is connected at: ', location.origin + '/');\n            } else {\n                console.info('socket.io is connected at: ', connection.socketURL);\n            }\n        }\n\n        try {\n            connection.socket = io(connection.socketURL + parameters);\n        } catch (e) {\n            connection.socket = io.connect(connection.socketURL + parameters, connection.socketOptions);\n        }\n\n        // detect signaling medium\n        connection.socket.isIO = true;\n\n        var mPeer = connection.multiPeersHandler;\n\n        connection.socket.on('extra-data-updated', function(remoteUserId, extra) {\n            if (!connection.peers[remoteUserId]) return;\n            connection.peers[remoteUserId].extra = extra;\n\n            connection.onExtraDataUpdated({\n                userid: remoteUserId,\n                extra: extra\n            });\n\n            if (!connection.peersBackup[remoteUserId]) {\n                connection.peersBackup[remoteUserId] = {\n                    userid: remoteUserId,\n                    extra: {}\n                };\n            }\n\n            connection.peersBackup[remoteUserId].extra = extra;\n        });\n\n        connection.socket.on(connection.socketMessageEvent, function(message) {\n            if (message.remoteUserId != connection.userid) return;\n\n            if (connection.peers[message.sender] && connection.peers[message.sender].extra != message.message.extra) {\n                connection.peers[message.sender].extra = message.extra;\n                connection.onExtraDataUpdated({\n                    userid: message.sender,\n                    extra: message.extra\n                });\n            }\n\n            if (message.message.streamSyncNeeded && connection.peers[message.sender]) {\n                var stream = connection.streamEvents[message.message.streamid];\n                if (!stream || !stream.stream) {\n                    return;\n                }\n\n                var action = message.message.action;\n\n                if (action === 'ended' || action === 'inactive' || action === 'stream-removed') {\n                    if (connection.peersBackup[stream.userid]) {\n                        stream.extra = connection.peersBackup[stream.userid].extra;\n                    }\n                    connection.onstreamended(stream);\n                    return;\n                }\n\n                var type = message.message.type != 'both' ? message.message.type : null;\n\n                if (typeof stream.stream[action] == 'function') {\n                    stream.stream[action](type);\n                }\n                return;\n            }\n\n            if (message.message === 'connectWithAllParticipants') {\n                if (connection.broadcasters.indexOf(message.sender) === -1) {\n                    connection.broadcasters.push(message.sender);\n                }\n\n                mPeer.onNegotiationNeeded({\n                    allParticipants: connection.getAllParticipants(message.sender)\n                }, message.sender);\n                return;\n            }\n\n            if (message.message === 'removeFromBroadcastersList') {\n                if (connection.broadcasters.indexOf(message.sender) !== -1) {\n                    delete connection.broadcasters[connection.broadcasters.indexOf(message.sender)];\n                    connection.broadcasters = removeNullEntries(connection.broadcasters);\n                }\n                return;\n            }\n\n            if (message.message === 'dropPeerConnection') {\n                connection.deletePeer(message.sender);\n                return;\n            }\n\n            if (message.message.allParticipants) {\n                if (message.message.allParticipants.indexOf(message.sender) === -1) {\n                    message.message.allParticipants.push(message.sender);\n                }\n\n                message.message.allParticipants.forEach(function(participant) {\n                    mPeer[!connection.peers[participant] ? 'createNewPeer' : 'renegotiatePeer'](participant, {\n                        localPeerSdpConstraints: {\n                            OfferToReceiveAudio: connection.sdpConstraints.mandatory.OfferToReceiveAudio,\n                            OfferToReceiveVideo: connection.sdpConstraints.mandatory.OfferToReceiveVideo\n                        },\n                        remotePeerSdpConstraints: {\n                            OfferToReceiveAudio: connection.session.oneway ? !!connection.session.audio : connection.sdpConstraints.mandatory.OfferToReceiveAudio,\n                            OfferToReceiveVideo: connection.session.oneway ? !!connection.session.video || !!connection.session.screen : connection.sdpConstraints.mandatory.OfferToReceiveVideo\n                        },\n                        isOneWay: !!connection.session.oneway || connection.direction === 'one-way',\n                        isDataOnly: isData(connection.session)\n                    });\n                });\n                return;\n            }\n\n            if (message.message.newParticipant) {\n                if (message.message.newParticipant == connection.userid) return;\n                if (!!connection.peers[message.message.newParticipant]) return;\n\n                mPeer.createNewPeer(message.message.newParticipant, message.message.userPreferences || {\n                    localPeerSdpConstraints: {\n                        OfferToReceiveAudio: connection.sdpConstraints.mandatory.OfferToReceiveAudio,\n                        OfferToReceiveVideo: connection.sdpConstraints.mandatory.OfferToReceiveVideo\n                    },\n                    remotePeerSdpConstraints: {\n                        OfferToReceiveAudio: connection.session.oneway ? !!connection.session.audio : connection.sdpConstraints.mandatory.OfferToReceiveAudio,\n                        OfferToReceiveVideo: connection.session.oneway ? !!connection.session.video || !!connection.session.screen : connection.sdpConstraints.mandatory.OfferToReceiveVideo\n                    },\n                    isOneWay: !!connection.session.oneway || connection.direction === 'one-way',\n                    isDataOnly: isData(connection.session)\n                });\n                return;\n            }\n\n            if (message.message.readyForOffer || message.message.addMeAsBroadcaster) {\n                connection.addNewBroadcaster(message.sender);\n            }\n\n            if (message.message.newParticipationRequest && message.sender !== connection.userid) {\n                if (connection.peers[message.sender]) {\n                    connection.deletePeer(message.sender);\n                }\n\n                var userPreferences = {\n                    extra: message.extra || {},\n                    localPeerSdpConstraints: message.message.remotePeerSdpConstraints || {\n                        OfferToReceiveAudio: connection.sdpConstraints.mandatory.OfferToReceiveAudio,\n                        OfferToReceiveVideo: connection.sdpConstraints.mandatory.OfferToReceiveVideo\n                    },\n                    remotePeerSdpConstraints: message.message.localPeerSdpConstraints || {\n                        OfferToReceiveAudio: connection.session.oneway ? !!connection.session.audio : connection.sdpConstraints.mandatory.OfferToReceiveAudio,\n                        OfferToReceiveVideo: connection.session.oneway ? !!connection.session.video || !!connection.session.screen : connection.sdpConstraints.mandatory.OfferToReceiveVideo\n                    },\n                    isOneWay: typeof message.message.isOneWay !== 'undefined' ? message.message.isOneWay : !!connection.session.oneway || connection.direction === 'one-way',\n                    isDataOnly: typeof message.message.isDataOnly !== 'undefined' ? message.message.isDataOnly : isData(connection.session),\n                    dontGetRemoteStream: typeof message.message.isOneWay !== 'undefined' ? message.message.isOneWay : !!connection.session.oneway || connection.direction === 'one-way',\n                    dontAttachLocalStream: !!message.message.dontGetRemoteStream,\n                    connectionDescription: message,\n                    successCallback: function() {\n                        // if its oneway----- todo: THIS SEEMS NOT IMPORTANT.\n                        if (typeof message.message.isOneWay !== 'undefined' ? message.message.isOneWay : !!connection.session.oneway || connection.direction === 'one-way') {\n                            connection.addNewBroadcaster(message.sender, userPreferences);\n                        }\n\n                        if (!!connection.session.oneway || connection.direction === 'one-way' || isData(connection.session)) {\n                            connection.addNewBroadcaster(message.sender, userPreferences);\n                        }\n                    }\n                };\n\n                connection.onNewParticipant(message.sender, userPreferences);\n                return;\n            }\n\n            if (message.message.shiftedModerationControl) {\n                connection.onShiftedModerationControl(message.sender, message.message.broadcasters);\n                return;\n            }\n\n            if (message.message.changedUUID) {\n                if (connection.peers[message.message.oldUUID]) {\n                    connection.peers[message.message.newUUID] = connection.peers[message.message.oldUUID];\n                    delete connection.peers[message.message.oldUUID];\n                }\n            }\n\n            if (message.message.userLeft) {\n                mPeer.onUserLeft(message.sender);\n\n                if (!!message.message.autoCloseEntireSession) {\n                    connection.leave();\n                }\n\n                return;\n            }\n\n            mPeer.addNegotiatedMessage(message.message, message.sender);\n        });\n\n        connection.socket.on('user-left', function(userid) {\n            onUserLeft(userid);\n\n            connection.onUserStatusChanged({\n                userid: userid,\n                status: 'offline',\n                extra: connection.peers[userid] ? connection.peers[userid].extra || {} : {}\n            });\n\n            var eventObject = {\n                userid: userid,\n                extra: {}\n            };\n\n            if (connection.peersBackup[eventObject.userid]) {\n                eventObject.extra = connection.peersBackup[eventObject.userid].extra;\n            }\n\n            connection.onleave(eventObject);\n        });\n\n        var alreadyConnected = false;\n\n        connection.socket.resetProps = function() {\n            alreadyConnected = false;\n        };\n\n        connection.socket.on('connect', function() {\n            if (alreadyConnected) {\n                return;\n            }\n            alreadyConnected = true;\n\n            if (connection.enableLogs) {\n                console.info('socket.io connection is opened.');\n            }\n\n            setTimeout(function() {\n                connection.socket.emit('extra-data-updated', connection.extra);\n\n                if (connectCallback) {\n                    connectCallback(connection.socket);\n                }\n            }, 1000);\n        });\n\n        connection.socket.on('disconnect', function() {\n            if (connection.enableLogs) {\n                console.warn('socket.io connection is closed');\n            }\n        });\n\n        connection.socket.on('join-with-password', function(remoteUserId) {\n            connection.onJoinWithPassword(remoteUserId);\n        });\n\n        connection.socket.on('invalid-password', function(remoteUserId, oldPassword) {\n            connection.onInvalidPassword(remoteUserId, oldPassword);\n        });\n\n        connection.socket.on('password-max-tries-over', function(remoteUserId) {\n            connection.onPasswordMaxTriesOver(remoteUserId);\n        });\n\n        connection.socket.on('user-disconnected', function(remoteUserId) {\n            if (remoteUserId === connection.userid) {\n                return;\n            }\n\n            connection.onUserStatusChanged({\n                userid: remoteUserId,\n                status: 'offline',\n                extra: connection.peers[remoteUserId] ? connection.peers[remoteUserId].extra || {} : {}\n            });\n\n            connection.deletePeer(remoteUserId);\n        });\n\n        connection.socket.on('user-connected', function(userid) {\n            if (userid === connection.userid) {\n                return;\n            }\n\n            connection.onUserStatusChanged({\n                userid: userid,\n                status: 'online',\n                extra: connection.peers[userid] ? connection.peers[userid].extra || {} : {}\n            });\n        });\n\n        connection.socket.on('closed-entire-session', function(sessionid, extra) {\n            connection.leave();\n            connection.onEntireSessionClosed({\n                sessionid: sessionid,\n                userid: sessionid,\n                extra: extra\n            });\n        });\n\n        connection.socket.on('userid-already-taken', function(useridAlreadyTaken, yourNewUserId) {\n            connection.isInitiator = false;\n            connection.userid = yourNewUserId;\n\n            connection.onUserIdAlreadyTaken(useridAlreadyTaken, yourNewUserId);\n        })\n\n        connection.socket.on('logs', function(log) {\n            if (!connection.enableLogs) return;\n            console.debug('server-logs', log);\n        });\n\n        connection.socket.on('number-of-broadcast-viewers-updated', function(data) {\n            connection.onNumberOfBroadcastViewersUpdated(data);\n        });\n\n        connection.socket.on('room-full', function(roomid) {\n            connection.onRoomFull(roomid);\n        });\n\n        connection.socket.on('become-next-modrator', function(sessionid) {\n            if (sessionid != connection.sessionid) return;\n            setTimeout(function() {\n                connection.open(sessionid);\n                connection.socket.emit('shift-moderator-control-on-disconnect');\n            }, 1000);\n        });\n    }\n\n    function MultiPeers(connection) {\n        var self = this;\n\n        var skipPeers = ['getAllParticipants', 'getLength', 'selectFirst', 'streams', 'send', 'forEach'];\n        connection.peersBackup = {};\n        connection.peers = {\n            getLength: function() {\n                var numberOfPeers = 0;\n                for (var peer in this) {\n                    if (skipPeers.indexOf(peer) == -1) {\n                        numberOfPeers++;\n                    }\n                }\n                return numberOfPeers;\n            },\n            selectFirst: function() {\n                var firstPeer;\n                for (var peer in this) {\n                    if (skipPeers.indexOf(peer) == -1) {\n                        firstPeer = this[peer];\n                    }\n                }\n                return firstPeer;\n            },\n            getAllParticipants: function(sender) {\n                var allPeers = [];\n                for (var peer in this) {\n                    if (skipPeers.indexOf(peer) == -1 && peer != sender) {\n                        allPeers.push(peer);\n                    }\n                }\n                return allPeers;\n            },\n            forEach: function(callbcak) {\n                this.getAllParticipants().forEach(function(participant) {\n                    callbcak(connection.peers[participant]);\n                });\n            },\n            send: function(data, remoteUserId) {\n                var that = this;\n\n                if (!isNull(data.size) && !isNull(data.type)) {\n                    self.shareFile(data, remoteUserId);\n                    return;\n                }\n\n                if (data.type !== 'text' && !(data instanceof ArrayBuffer) && !(data instanceof DataView)) {\n                    TextSender.send({\n                        text: data,\n                        channel: this,\n                        connection: connection,\n                        remoteUserId: remoteUserId\n                    });\n                    return;\n                }\n\n                if (data.type === 'text') {\n                    data = JSON.stringify(data);\n                }\n\n                if (remoteUserId) {\n                    var remoteUser = connection.peers[remoteUserId];\n                    if (remoteUser) {\n                        if (!remoteUser.channels.length) {\n                            connection.peers[remoteUserId].createDataChannel();\n                            connection.renegotiate(remoteUserId);\n                            setTimeout(function() {\n                                that.send(data, remoteUserId);\n                            }, 3000);\n                            return;\n                        }\n\n                        remoteUser.channels.forEach(function(channel) {\n                            channel.send(data);\n                        });\n                        return;\n                    }\n                }\n\n                this.getAllParticipants().forEach(function(participant) {\n                    if (!that[participant].channels.length) {\n                        connection.peers[participant].createDataChannel();\n                        connection.renegotiate(participant);\n                        setTimeout(function() {\n                            that[participant].channels.forEach(function(channel) {\n                                channel.send(data);\n                            });\n                        }, 3000);\n                        return;\n                    }\n\n                    that[participant].channels.forEach(function(channel) {\n                        channel.send(data);\n                    });\n                });\n            }\n        };\n\n        this.uuid = connection.userid;\n\n        this.getLocalConfig = function(remoteSdp, remoteUserId, userPreferences) {\n            if (!userPreferences) {\n                userPreferences = {};\n            }\n\n            return {\n                streamsToShare: userPreferences.streamsToShare || {},\n                rtcMultiConnection: connection,\n                connectionDescription: userPreferences.connectionDescription,\n                userid: remoteUserId,\n                localPeerSdpConstraints: userPreferences.localPeerSdpConstraints,\n                remotePeerSdpConstraints: userPreferences.remotePeerSdpConstraints,\n                dontGetRemoteStream: !!userPreferences.dontGetRemoteStream,\n                dontAttachLocalStream: !!userPreferences.dontAttachLocalStream,\n                renegotiatingPeer: !!userPreferences.renegotiatingPeer,\n                peerRef: userPreferences.peerRef,\n                channels: userPreferences.channels || [],\n                onLocalSdp: function(localSdp) {\n                    self.onNegotiationNeeded(localSdp, remoteUserId);\n                },\n                onLocalCandidate: function(localCandidate) {\n                    localCandidate = OnIceCandidateHandler.processCandidates(connection, localCandidate)\n                    if (localCandidate) {\n                        self.onNegotiationNeeded(localCandidate, remoteUserId);\n                    }\n                },\n                remoteSdp: remoteSdp,\n                onDataChannelMessage: function(message) {\n                    if (!connection.fbr && connection.enableFileSharing) initFileBufferReader();\n\n                    if (typeof message == 'string' || !connection.enableFileSharing) {\n                        self.onDataChannelMessage(message, remoteUserId);\n                        return;\n                    }\n\n                    var that = this;\n\n                    if (message instanceof ArrayBuffer || message instanceof DataView) {\n                        connection.fbr.convertToObject(message, function(object) {\n                            that.onDataChannelMessage(object);\n                        });\n                        return;\n                    }\n\n                    if (message.readyForNextChunk) {\n                        connection.fbr.getNextChunk(message, function(nextChunk, isLastChunk) {\n                            connection.peers[remoteUserId].channels.forEach(function(channel) {\n                                channel.send(nextChunk);\n                            });\n                        }, remoteUserId);\n                        return;\n                    }\n\n                    if (message.chunkMissing) {\n                        connection.fbr.chunkMissing(message);\n                        return;\n                    }\n\n                    connection.fbr.addChunk(message, function(promptNextChunk) {\n                        connection.peers[remoteUserId].peer.channel.send(promptNextChunk);\n                    });\n                },\n                onDataChannelError: function(error) {\n                    self.onDataChannelError(error, remoteUserId);\n                },\n                onDataChannelOpened: function(channel) {\n                    self.onDataChannelOpened(channel, remoteUserId);\n                },\n                onDataChannelClosed: function(event) {\n                    self.onDataChannelClosed(event, remoteUserId);\n                },\n                onRemoteStream: function(stream) {\n                    if (connection.peers[remoteUserId]) {\n                        connection.peers[remoteUserId].streams.push(stream);\n                    }\n\n                    if (isPluginRTC && window.PluginRTC) {\n                        var mediaElement = document.createElement('video');\n                        var body = connection.videosContainer;\n                        body.insertBefore(mediaElement, body.firstChild);\n                        setTimeout(function() {\n                            window.PluginRTC.attachMediaStream(mediaElement, stream);\n                        }, 3000);\n                        return;\n                    }\n\n                    self.onGettingRemoteMedia(stream, remoteUserId);\n                },\n                onRemoteStreamRemoved: function(stream) {\n                    self.onRemovingRemoteMedia(stream, remoteUserId);\n                },\n                onPeerStateChanged: function(states) {\n                    self.onPeerStateChanged(states);\n\n                    if (states.iceConnectionState === 'new') {\n                        self.onNegotiationStarted(remoteUserId, states);\n                    }\n\n                    if (states.iceConnectionState === 'connected') {\n                        self.onNegotiationCompleted(remoteUserId, states);\n                    }\n\n                    if (states.iceConnectionState.search(/closed|failed/gi) !== -1) {\n                        self.onUserLeft(remoteUserId);\n                        self.disconnectWith(remoteUserId);\n                    }\n                }\n            };\n        };\n\n        this.createNewPeer = function(remoteUserId, userPreferences) {\n            if (connection.maxParticipantsAllowed <= connection.getAllParticipants().length) {\n                return;\n            }\n\n            userPreferences = userPreferences || {};\n\n            if (connection.isInitiator && !!connection.session.audio && connection.session.audio === 'two-way' && !userPreferences.streamsToShare) {\n                userPreferences.isOneWay = false;\n                userPreferences.isDataOnly = false;\n                userPreferences.session = connection.session;\n            }\n\n            if (!userPreferences.isOneWay && !userPreferences.isDataOnly) {\n                userPreferences.isOneWay = true;\n                this.onNegotiationNeeded({\n                    enableMedia: true,\n                    userPreferences: userPreferences\n                }, remoteUserId);\n                return;\n            }\n\n            userPreferences = connection.setUserPreferences(userPreferences, remoteUserId);\n            var localConfig = this.getLocalConfig(null, remoteUserId, userPreferences);\n            connection.peers[remoteUserId] = new PeerInitiator(localConfig);\n        };\n\n        this.createAnsweringPeer = function(remoteSdp, remoteUserId, userPreferences) {\n            userPreferences = connection.setUserPreferences(userPreferences || {}, remoteUserId);\n\n            var localConfig = this.getLocalConfig(remoteSdp, remoteUserId, userPreferences);\n            connection.peers[remoteUserId] = new PeerInitiator(localConfig);\n        };\n\n        this.renegotiatePeer = function(remoteUserId, userPreferences, remoteSdp) {\n            if (!connection.peers[remoteUserId]) {\n                if (connection.enableLogs) {\n                    console.error('This peer (' + remoteUserId + ') does not exist. Renegotiation skipped.');\n                }\n                return;\n            }\n\n            if (!userPreferences) {\n                userPreferences = {};\n            }\n\n            userPreferences.renegotiatingPeer = true;\n            userPreferences.peerRef = connection.peers[remoteUserId].peer;\n            userPreferences.channels = connection.peers[remoteUserId].channels;\n\n            var localConfig = this.getLocalConfig(remoteSdp, remoteUserId, userPreferences);\n\n            connection.peers[remoteUserId] = new PeerInitiator(localConfig);\n        };\n\n        this.replaceTrack = function(track, remoteUserId, isVideoTrack) {\n            if (!connection.peers[remoteUserId]) {\n                throw 'This peer (' + remoteUserId + ') does not exist.';\n            }\n\n            var peer = connection.peers[remoteUserId].peer;\n\n            if (!!peer.getSenders && typeof peer.getSenders === 'function' && peer.getSenders().length) {\n                peer.getSenders().forEach(function(rtpSender) {\n                    if (isVideoTrack && rtpSender.track instanceof VideoStreamTrack) {\n                        connection.peers[remoteUserId].peer.lastVideoTrack = rtpSender.track;\n                        rtpSender.replaceTrack(track);\n                    }\n\n                    if (!isVideoTrack && rtpSender.track instanceof AudioStreamTrack) {\n                        connection.peers[remoteUserId].peer.lastAudioTrack = rtpSender.track;\n                        rtpSender.replaceTrack(track);\n                    }\n                });\n                return;\n            }\n\n            console.warn('RTPSender.replaceTrack is NOT supported.');\n            this.renegotiatePeer(remoteUserId);\n        };\n\n        this.onNegotiationNeeded = function(message, remoteUserId) {};\n        this.addNegotiatedMessage = function(message, remoteUserId) {\n            if (message.type && message.sdp) {\n                if (message.type == 'answer') {\n                    if (connection.peers[remoteUserId]) {\n                        connection.peers[remoteUserId].addRemoteSdp(message);\n                    }\n                }\n\n                if (message.type == 'offer') {\n                    if (message.renegotiatingPeer) {\n                        this.renegotiatePeer(remoteUserId, null, message);\n                    } else {\n                        this.createAnsweringPeer(message, remoteUserId);\n                    }\n                }\n\n                if (connection.enableLogs) {\n                    console.log('Remote peer\\'s sdp:', message.sdp);\n                }\n                return;\n            }\n\n            if (message.candidate) {\n                if (connection.peers[remoteUserId]) {\n                    connection.peers[remoteUserId].addRemoteCandidate(message);\n                }\n\n                if (connection.enableLogs) {\n                    console.log('Remote peer\\'s candidate pairs:', message.candidate);\n                }\n                return;\n            }\n\n            if (message.enableMedia) {\n                connection.session = message.userPreferences.session || connection.session;\n\n                if (connection.session.oneway && connection.attachStreams.length) {\n                    connection.attachStreams = [];\n                }\n\n                if (message.userPreferences.isDataOnly && connection.attachStreams.length) {\n                    connection.attachStreams.length = [];\n                }\n\n                var streamsToShare = {};\n                connection.attachStreams.forEach(function(stream) {\n                    streamsToShare[stream.streamid] = {\n                        isAudio: !!stream.isAudio,\n                        isVideo: !!stream.isVideo,\n                        isScreen: !!stream.isScreen\n                    };\n                });\n                message.userPreferences.streamsToShare = streamsToShare;\n\n                self.onNegotiationNeeded({\n                    readyForOffer: true,\n                    userPreferences: message.userPreferences\n                }, remoteUserId);\n            }\n\n            if (message.readyForOffer) {\n                connection.onReadyForOffer(remoteUserId, message.userPreferences);\n            }\n\n            function cb(stream) {\n                gumCallback(stream, message, remoteUserId);\n            }\n        };\n\n        function gumCallback(stream, message, remoteUserId) {\n            var streamsToShare = {};\n            connection.attachStreams.forEach(function(stream) {\n                streamsToShare[stream.streamid] = {\n                    isAudio: !!stream.isAudio,\n                    isVideo: !!stream.isVideo,\n                    isScreen: !!stream.isScreen\n                };\n            });\n            message.userPreferences.streamsToShare = streamsToShare;\n\n            self.onNegotiationNeeded({\n                readyForOffer: true,\n                userPreferences: message.userPreferences\n            }, remoteUserId);\n        }\n\n        this.connectNewParticipantWithAllBroadcasters = function(newParticipantId, userPreferences, broadcastersList) {\n            if (connection.socket.isIO) {\n                return;\n            }\n\n            broadcastersList = (broadcastersList || '').split('|-,-|');\n\n            if (!broadcastersList.length) {\n                return;\n            }\n\n            var firstBroadcaster;\n\n            var remainingBroadcasters = [];\n            broadcastersList.forEach(function(list) {\n                list = (list || '').replace(/ /g, '');\n                if (list.length) {\n                    if (!firstBroadcaster) {\n                        firstBroadcaster = list;\n                    } else {\n                        remainingBroadcasters.push(list);\n                    }\n                }\n            });\n\n            if (!firstBroadcaster) {\n                return;\n            }\n\n            self.onNegotiationNeeded({\n                newParticipant: newParticipantId,\n                userPreferences: userPreferences || false\n            }, firstBroadcaster);\n\n            if (!remainingBroadcasters.length) {\n                return;\n            }\n\n            setTimeout(function() {\n                self.connectNewParticipantWithAllBroadcasters(newParticipantId, userPreferences, remainingBroadcasters.join('|-,-|'));\n            }, 3 * 1000);\n        };\n\n        this.onGettingRemoteMedia = function(stream, remoteUserId) {};\n        this.onRemovingRemoteMedia = function(stream, remoteUserId) {};\n        this.onGettingLocalMedia = function(localStream) {};\n        this.onLocalMediaError = function(error, constraints) {\n            connection.onMediaError(error, constraints);\n        };\n\n        function initFileBufferReader() {\n            connection.fbr = new FileBufferReader();\n            connection.fbr.onProgress = function(chunk) {\n                connection.onFileProgress(chunk);\n            };\n            connection.fbr.onBegin = function(file) {\n                connection.onFileStart(file);\n            };\n            connection.fbr.onEnd = function(file) {\n                connection.onFileEnd(file);\n            };\n        }\n\n        this.shareFile = function(file, remoteUserId) {\n            if (!connection.enableFileSharing) {\n                throw '\"connection.enableFileSharing\" is false.';\n            }\n\n            initFileBufferReader();\n\n            connection.fbr.readAsArrayBuffer(file, function(uuid) {\n                var arrayOfUsers = connection.getAllParticipants();\n\n                if (remoteUserId) {\n                    arrayOfUsers = [remoteUserId];\n                }\n\n                arrayOfUsers.forEach(function(participant) {\n                    connection.fbr.getNextChunk(uuid, function(nextChunk) {\n                        connection.peers[participant].channels.forEach(function(channel) {\n                            channel.send(nextChunk);\n                        });\n                    }, participant);\n                });\n            }, {\n                userid: connection.userid,\n                // extra: connection.extra,\n                chunkSize: isFirefox ? 15 * 1000 : connection.chunkSize || 0\n            });\n        };\n\n        if (typeof 'TextReceiver' !== 'undefined') {\n            var textReceiver = new TextReceiver(connection);\n        }\n\n        this.onDataChannelMessage = function(message, remoteUserId) {\n            textReceiver.receive(JSON.parse(message), remoteUserId, connection.peers[remoteUserId] ? connection.peers[remoteUserId].extra : {});\n        };\n\n        this.onDataChannelClosed = function(event, remoteUserId) {\n            event.userid = remoteUserId;\n            event.extra = connection.peers[remoteUserId] ? connection.peers[remoteUserId].extra : {};\n            connection.onclose(event);\n        };\n\n        this.onDataChannelError = function(error, remoteUserId) {\n            error.userid = remoteUserId;\n            event.extra = connection.peers[remoteUserId] ? connection.peers[remoteUserId].extra : {};\n            connection.onerror(error);\n        };\n\n        this.onDataChannelOpened = function(channel, remoteUserId) {\n            // keep last channel only; we are not expecting parallel/channels channels\n            if (connection.peers[remoteUserId].channels.length) {\n                connection.peers[remoteUserId].channels = [channel];\n                return;\n            }\n\n            connection.peers[remoteUserId].channels.push(channel);\n            connection.onopen({\n                userid: remoteUserId,\n                extra: connection.peers[remoteUserId] ? connection.peers[remoteUserId].extra : {},\n                channel: channel\n            });\n        };\n\n        this.onPeerStateChanged = function(state) {\n            connection.onPeerStateChanged(state);\n        };\n\n        this.onNegotiationStarted = function(remoteUserId, states) {};\n        this.onNegotiationCompleted = function(remoteUserId, states) {};\n\n        this.getRemoteStreams = function(remoteUserId) {\n            remoteUserId = remoteUserId || connection.peers.getAllParticipants()[0];\n            return connection.peers[remoteUserId] ? connection.peers[remoteUserId].streams : [];\n        };\n\n        this.isPluginRTC = connection.isPluginRTC = isPluginRTC;\n    }\n\n    // globals.js\n\n    var isOpera = !!window.opera || navigator.userAgent.indexOf(' OPR/') >= 0;\n    var isFirefox = typeof window.InstallTrigger !== 'undefined';\n    var isSafari = Object.prototype.toString.call(window.HTMLElement).indexOf('Constructor') > 0;\n    var isChrome = !!window.chrome && !isOpera;\n    var isIE = !!document.documentMode;\n\n    var isMobileDevice = !!navigator.userAgent.match(/Android|iPhone|iPad|iPod|BlackBerry|IEMobile/i);\n\n    if (typeof cordova !== 'undefined') {\n        isMobileDevice = true;\n        isChrome = true;\n    }\n\n    if (navigator && navigator.userAgent && navigator.userAgent.indexOf('Crosswalk') !== -1) {\n        isMobileDevice = true;\n        isChrome = true;\n    }\n\n    var isPluginRTC = !isMobileDevice && (isSafari || isIE);\n\n    if (isPluginRTC && typeof URL !== 'undefined') {\n        URL.createObjectURL = function() {};\n    }\n\n    // detect node-webkit\n    var isNodeWebkit = !!(window.process && (typeof window.process === 'object') && window.process.versions && window.process.versions['node-webkit']);\n\n    var chromeVersion = 50;\n    var matchArray = navigator.userAgent.match(/Chrom(e|ium)\\/([0-9]+)\\./);\n    if (isChrome && matchArray && matchArray[2]) {\n        chromeVersion = parseInt(matchArray[2], 10);\n    }\n\n    var firefoxVersion = 50;\n    matchArray = navigator.userAgent.match(/Firefox\\/(.*)/);\n    if (isFirefox && matchArray && matchArray[1]) {\n        firefoxVersion = parseInt(matchArray[1], 10);\n    }\n\n    function fireEvent(obj, eventName, args) {\n        if (typeof CustomEvent === 'undefined') {\n            return;\n        }\n\n        var eventDetail = {\n            arguments: args,\n            __exposedProps__: args\n        };\n\n        var event = new CustomEvent(eventName, eventDetail);\n        obj.dispatchEvent(event);\n    }\n\n    function setHarkEvents(connection, streamEvent) {\n        if (!connection || !streamEvent) {\n            throw 'Both arguments are required.';\n        }\n\n        if (!connection.onspeaking || !connection.onsilence) {\n            return;\n        }\n\n        if (typeof hark === 'undefined') {\n            throw 'hark.js not found.';\n        }\n\n        hark(streamEvent.stream, {\n            onspeaking: function() {\n                connection.onspeaking(streamEvent);\n            },\n            onsilence: function() {\n                connection.onsilence(streamEvent);\n            },\n            onvolumechange: function(volume, threshold) {\n                if (!connection.onvolumechange) {\n                    return;\n                }\n                connection.onvolumechange(merge({\n                    volume: volume,\n                    threshold: threshold\n                }, streamEvent));\n            }\n        });\n    }\n\n    function setMuteHandlers(connection, streamEvent) {\n        if (!streamEvent.stream || !streamEvent.stream || !streamEvent.stream.addEventListener) return;\n\n        streamEvent.stream.addEventListener('mute', function(event) {\n            event = connection.streamEvents[streamEvent.streamid];\n\n            event.session = {\n                audio: event.muteType === 'audio',\n                video: event.muteType === 'video'\n            };\n\n            connection.onmute(event);\n        }, false);\n\n        streamEvent.stream.addEventListener('unmute', function(event) {\n            event = connection.streamEvents[streamEvent.streamid];\n\n            event.session = {\n                audio: event.unmuteType === 'audio',\n                video: event.unmuteType === 'video'\n            };\n\n            connection.onunmute(event);\n        }, false);\n    }\n\n    function getRandomString() {\n        if (window.crypto && window.crypto.getRandomValues && navigator.userAgent.indexOf('Safari') === -1) {\n            var a = window.crypto.getRandomValues(new Uint32Array(3)),\n                token = '';\n            for (var i = 0, l = a.length; i < l; i++) {\n                token += a[i].toString(36);\n            }\n            return token;\n        } else {\n            return (Math.random() * new Date().getTime()).toString(36).replace(/\\./g, '');\n        }\n    }\n\n    // Get HTMLAudioElement/HTMLVideoElement accordingly\n\n    function getRMCMediaElement(stream, callback, connection) {\n        var isAudioOnly = false;\n        if (!!stream.getVideoTracks && !stream.getVideoTracks().length) {\n            isAudioOnly = true;\n        }\n\n        var mediaElement = document.createElement(isAudioOnly ? 'audio' : 'video');\n\n        if (isPluginRTC && window.PluginRTC) {\n            connection.videosContainer.insertBefore(mediaElement, connection.videosContainer.firstChild);\n\n            setTimeout(function() {\n                window.PluginRTC.attachMediaStream(mediaElement, stream);\n                callback(mediaElement);\n            }, 1000);\n\n            return;\n        }\n\n        // \"mozSrcObject\" is always preferred over \"src\"!!\n        mediaElement[isFirefox ? 'mozSrcObject' : 'src'] = isFirefox ? stream : window.URL.createObjectURL(stream);\n        mediaElement.controls = true;\n\n        // http://goo.gl/WZ5nFl\n        // Firefox don't yet support onended for any stream (remote/local)\n        if (isFirefox) {\n            var streamEndedEvent = 'ended';\n\n            if ('oninactive' in mediaElement) {\n                streamEndedEvent = 'inactive';\n            }\n\n            mediaElement.addEventListener(streamEndedEvent, function() {\n                // fireEvent(stream, streamEndedEvent, stream);\n                currentUserMediaRequest.remove(stream.idInstance);\n\n                if (stream.type === 'local') {\n                    streamEndedEvent = 'ended';\n\n                    if ('oninactive' in stream) {\n                        streamEndedEvent = 'inactive';\n                    }\n\n                    StreamsHandler.onSyncNeeded(stream.streamid, streamEndedEvent);\n\n                    connection.attachStreams.forEach(function(aStream, idx) {\n                        if (stream.streamid === aStream.streamid) {\n                            delete connection.attachStreams[idx];\n                        }\n                    });\n\n                    var newStreamsArray = [];\n                    connection.attachStreams.forEach(function(aStream) {\n                        if (aStream) {\n                            newStreamsArray.push(aStream);\n                        }\n                    });\n                    connection.attachStreams = newStreamsArray;\n\n                    var streamEvent = connection.streamEvents[stream.streamid];\n\n                    if (streamEvent) {\n                        connection.onstreamended(streamEvent);\n                        return;\n                    }\n                    if (this.parentNode) {\n                        this.parentNode.removeChild(this);\n                    }\n                }\n            }, false);\n        }\n\n        mediaElement.play();\n        callback(mediaElement);\n    }\n\n    // if IE\n    if (!window.addEventListener) {\n        window.addEventListener = function(el, eventName, eventHandler) {\n            if (!el.attachEvent) {\n                return;\n            }\n            el.attachEvent('on' + eventName, eventHandler);\n        };\n    }\n\n    function listenEventHandler(eventName, eventHandler) {\n        window.removeEventListener(eventName, eventHandler);\n        window.addEventListener(eventName, eventHandler, false);\n    }\n\n    window.attachEventListener = function(video, type, listener, useCapture) {\n        video.addEventListener(type, listener, useCapture);\n    };\n\n    function removeNullEntries(array) {\n        var newArray = [];\n        array.forEach(function(item) {\n            if (item) {\n                newArray.push(item);\n            }\n        });\n        return newArray;\n    }\n\n\n    function isData(session) {\n        return !session.audio && !session.video && !session.screen && session.data;\n    }\n\n    function isNull(obj) {\n        return typeof obj === 'undefined';\n    }\n\n    function isString(obj) {\n        return typeof obj === 'string';\n    }\n\n    var MediaStream = window.MediaStream;\n\n    if (typeof MediaStream === 'undefined' && typeof webkitMediaStream !== 'undefined') {\n        MediaStream = webkitMediaStream;\n    }\n\n    /*global MediaStream:true */\n    if (typeof MediaStream !== 'undefined') {\n        if (!('getVideoTracks' in MediaStream.prototype)) {\n            MediaStream.prototype.getVideoTracks = function() {\n                if (!this.getTracks) {\n                    return [];\n                }\n\n                var tracks = [];\n                this.getTracks.forEach(function(track) {\n                    if (track.kind.toString().indexOf('video') !== -1) {\n                        tracks.push(track);\n                    }\n                });\n                return tracks;\n            };\n\n            MediaStream.prototype.getAudioTracks = function() {\n                if (!this.getTracks) {\n                    return [];\n                }\n\n                var tracks = [];\n                this.getTracks.forEach(function(track) {\n                    if (track.kind.toString().indexOf('audio') !== -1) {\n                        tracks.push(track);\n                    }\n                });\n                return tracks;\n            };\n        }\n\n        if (!('stop' in MediaStream.prototype)) {\n            MediaStream.prototype.stop = function() {\n                this.getAudioTracks().forEach(function(track) {\n                    if (!!track.stop) {\n                        track.stop();\n                    }\n                });\n\n                this.getVideoTracks().forEach(function(track) {\n                    if (!!track.stop) {\n                        track.stop();\n                    }\n                });\n            };\n        }\n    }\n\n    function isAudioPlusTab(connection, audioPlusTab) {\n        if (connection.session.audio && connection.session.audio === 'two-way') {\n            return false;\n        }\n\n        if (isFirefox && audioPlusTab !== false) {\n            return true;\n        }\n\n        if (!isChrome || chromeVersion < 50) return false;\n\n        if (typeof audioPlusTab === true) {\n            return true;\n        }\n\n        if (typeof audioPlusTab === 'undefined' && connection.session.audio && connection.session.screen && !connection.session.video) {\n            audioPlusTab = true;\n            return true;\n        }\n\n        return false;\n    }\n\n    function getAudioScreenConstraints(screen_constraints) {\n        if (isFirefox) {\n            return true;\n        }\n\n        if (!isChrome) return false;\n\n        return {\n            mandatory: {\n                chromeMediaSource: screen_constraints.mandatory.chromeMediaSource,\n                chromeMediaSourceId: screen_constraints.mandatory.chromeMediaSourceId\n            }\n        };\n    }\n\n    window.iOSDefaultAudioOutputDevice = window.iOSDefaultAudioOutputDevice || 'speaker'; // earpiece or speaker\n\n    // Last time updated: 2017-03-11 6:31:40 AM UTC\n\n    // Latest file can be found here: https://cdn.webrtc-experiment.com/DetectRTC.js\n\n    // Muaz Khan     - www.MuazKhan.com\n    // MIT License   - www.WebRTC-Experiment.com/licence\n    // Documentation - github.com/muaz-khan/DetectRTC\n    // ____________\n    // DetectRTC.js\n\n    // DetectRTC.hasWebcam (has webcam device!)\n    // DetectRTC.hasMicrophone (has microphone device!)\n    // DetectRTC.hasSpeakers (has speakers!)\n\n    (function() {\n\n        'use strict';\n\n        var browserFakeUserAgent = 'Fake/5.0 (FakeOS) AppleWebKit/123 (KHTML, like Gecko) Fake/12.3.4567.89 Fake/123.45';\n\n        var isNodejs = typeof process === 'object' && typeof process.versions === 'object' && process.versions.node;\n        if (isNodejs) {\n            var version = process.versions.node.toString().replace('v', '');\n            browserFakeUserAgent = 'Nodejs/' + version + ' (NodeOS) AppleWebKit/' + version + ' (KHTML, like Gecko) Nodejs/' + version + ' Nodejs/' + version\n        }\n\n        (function(that) {\n            if (typeof window !== 'undefined') {\n                return;\n            }\n\n            if (typeof window === 'undefined' && typeof global !== 'undefined') {\n                global.navigator = {\n                    userAgent: browserFakeUserAgent,\n                    getUserMedia: function() {}\n                };\n\n                /*global window:true */\n                that.window = global;\n            } else if (typeof window === 'undefined') {\n                // window = this;\n            }\n\n            if (typeof document === 'undefined') {\n                /*global document:true */\n                that.document = {};\n\n                document.createElement = document.captureStream = document.mozCaptureStream = function() {\n                    return {};\n                };\n            }\n\n            if (typeof location === 'undefined') {\n                /*global location:true */\n                that.location = {\n                    protocol: 'file:',\n                    href: '',\n                    hash: ''\n                };\n            }\n\n            if (typeof screen === 'undefined') {\n                /*global screen:true */\n                that.screen = {\n                    width: 0,\n                    height: 0\n                };\n            }\n        })(typeof global !== 'undefined' ? global : window);\n\n        /*global navigator:true */\n        var navigator = window.navigator;\n\n        if (typeof navigator !== 'undefined') {\n            if (typeof navigator.webkitGetUserMedia !== 'undefined') {\n                navigator.getUserMedia = navigator.webkitGetUserMedia;\n            }\n\n            if (typeof navigator.mozGetUserMedia !== 'undefined') {\n                navigator.getUserMedia = navigator.mozGetUserMedia;\n            }\n        } else {\n            navigator = {\n                getUserMedia: function() {},\n                userAgent: browserFakeUserAgent\n            };\n        }\n\n        var isMobileDevice = !!(/Android|webOS|iPhone|iPad|iPod|BB10|BlackBerry|IEMobile|Opera Mini|Mobile|mobile/i.test(navigator.userAgent || ''));\n\n        var isEdge = navigator.userAgent.indexOf('Edge') !== -1 && (!!navigator.msSaveOrOpenBlob || !!navigator.msSaveBlob);\n\n        var isOpera = !!window.opera || navigator.userAgent.indexOf(' OPR/') >= 0;\n        var isFirefox = typeof window.InstallTrigger !== 'undefined';\n        var isSafari = Object.prototype.toString.call(window.HTMLElement).indexOf('Constructor') > 0;\n        var isChrome = !!window.chrome && !isOpera;\n        var isIE = !!document.documentMode && !isEdge;\n\n        // this one can also be used:\n        // https://www.websocket.org/js/stuff.js (DetectBrowser.js)\n\n        function getBrowserInfo() {\n            var nVer = navigator.appVersion;\n            var nAgt = navigator.userAgent;\n            var browserName = navigator.appName;\n            var fullVersion = '' + parseFloat(navigator.appVersion);\n            var majorVersion = parseInt(navigator.appVersion, 10);\n            var nameOffset, verOffset, ix;\n\n            // In Opera, the true version is after 'Opera' or after 'Version'\n            if (isOpera) {\n                browserName = 'Opera';\n                try {\n                    fullVersion = navigator.userAgent.split('OPR/')[1].split(' ')[0];\n                    majorVersion = fullVersion.split('.')[0];\n                } catch (e) {\n                    fullVersion = '0.0.0.0';\n                    majorVersion = 0;\n                }\n            }\n            // In MSIE, the true version is after 'MSIE' in userAgent\n            else if (isIE) {\n                verOffset = nAgt.indexOf('MSIE');\n                browserName = 'IE';\n                fullVersion = nAgt.substring(verOffset + 5);\n            }\n            // In Chrome, the true version is after 'Chrome' \n            else if (isChrome) {\n                verOffset = nAgt.indexOf('Chrome');\n                browserName = 'Chrome';\n                fullVersion = nAgt.substring(verOffset + 7);\n            }\n            // In Safari, the true version is after 'Safari' or after 'Version' \n            else if (isSafari) {\n                verOffset = nAgt.indexOf('Safari');\n                browserName = 'Safari';\n                fullVersion = nAgt.substring(verOffset + 7);\n\n                if ((verOffset = nAgt.indexOf('Version')) !== -1) {\n                    fullVersion = nAgt.substring(verOffset + 8);\n                }\n            }\n            // In Firefox, the true version is after 'Firefox' \n            else if (isFirefox) {\n                verOffset = nAgt.indexOf('Firefox');\n                browserName = 'Firefox';\n                fullVersion = nAgt.substring(verOffset + 8);\n            }\n\n            // In most other browsers, 'name/version' is at the end of userAgent \n            else if ((nameOffset = nAgt.lastIndexOf(' ') + 1) < (verOffset = nAgt.lastIndexOf('/'))) {\n                browserName = nAgt.substring(nameOffset, verOffset);\n                fullVersion = nAgt.substring(verOffset + 1);\n\n                if (browserName.toLowerCase() === browserName.toUpperCase()) {\n                    browserName = navigator.appName;\n                }\n            }\n\n            if (isEdge) {\n                browserName = 'Edge';\n                // fullVersion = navigator.userAgent.split('Edge/')[1];\n                fullVersion = parseInt(navigator.userAgent.match(/Edge\\/(\\d+).(\\d+)$/)[2], 10).toString();\n            }\n\n            // trim the fullVersion string at semicolon/space if present\n            if ((ix = fullVersion.indexOf(';')) !== -1) {\n                fullVersion = fullVersion.substring(0, ix);\n            }\n\n            if ((ix = fullVersion.indexOf(' ')) !== -1) {\n                fullVersion = fullVersion.substring(0, ix);\n            }\n\n            majorVersion = parseInt('' + fullVersion, 10);\n\n            if (isNaN(majorVersion)) {\n                fullVersion = '' + parseFloat(navigator.appVersion);\n                majorVersion = parseInt(navigator.appVersion, 10);\n            }\n\n            return {\n                fullVersion: fullVersion,\n                version: majorVersion,\n                name: browserName,\n                isPrivateBrowsing: false\n            };\n        }\n\n        // via: https://gist.github.com/cou929/7973956\n\n        function retry(isDone, next) {\n            var currentTrial = 0,\n                maxRetry = 50,\n                interval = 10,\n                isTimeout = false;\n            var id = window.setInterval(\n                function() {\n                    if (isDone()) {\n                        window.clearInterval(id);\n                        next(isTimeout);\n                    }\n                    if (currentTrial++ > maxRetry) {\n                        window.clearInterval(id);\n                        isTimeout = true;\n                        next(isTimeout);\n                    }\n                },\n                10\n            );\n        }\n\n        function isIE10OrLater(userAgent) {\n            var ua = userAgent.toLowerCase();\n            if (ua.indexOf('msie') === 0 && ua.indexOf('trident') === 0) {\n                return false;\n            }\n            var match = /(?:msie|rv:)\\s?([\\d\\.]+)/.exec(ua);\n            if (match && parseInt(match[1], 10) >= 10) {\n                return true;\n            }\n            return false;\n        }\n\n        function detectPrivateMode(callback) {\n            var isPrivate;\n\n            try {\n\n                if (window.webkitRequestFileSystem) {\n                    window.webkitRequestFileSystem(\n                        window.TEMPORARY, 1,\n                        function() {\n                            isPrivate = false;\n                        },\n                        function(e) {\n                            isPrivate = true;\n                        }\n                    );\n                } else if (window.indexedDB && /Firefox/.test(window.navigator.userAgent)) {\n                    var db;\n                    try {\n                        db = window.indexedDB.open('test');\n                        db.onerror = function() {\n                            return true;\n                        };\n                    } catch (e) {\n                        isPrivate = true;\n                    }\n\n                    if (typeof isPrivate === 'undefined') {\n                        retry(\n                            function isDone() {\n                                return db.readyState === 'done' ? true : false;\n                            },\n                            function next(isTimeout) {\n                                if (!isTimeout) {\n                                    isPrivate = db.result ? false : true;\n                                }\n                            }\n                        );\n                    }\n                } else if (isIE10OrLater(window.navigator.userAgent)) {\n                    isPrivate = false;\n                    try {\n                        if (!window.indexedDB) {\n                            isPrivate = true;\n                        }\n                    } catch (e) {\n                        isPrivate = true;\n                    }\n                } else if (window.localStorage && /Safari/.test(window.navigator.userAgent)) {\n                    try {\n                        window.localStorage.setItem('test', 1);\n                    } catch (e) {\n                        isPrivate = true;\n                    }\n\n                    if (typeof isPrivate === 'undefined') {\n                        isPrivate = false;\n                        window.localStorage.removeItem('test');\n                    }\n                }\n\n            } catch (e) {\n                isPrivate = false;\n            }\n\n            retry(\n                function isDone() {\n                    return typeof isPrivate !== 'undefined' ? true : false;\n                },\n                function next(isTimeout) {\n                    callback(isPrivate);\n                }\n            );\n        }\n\n        var isMobile = {\n            Android: function() {\n                return navigator.userAgent.match(/Android/i);\n            },\n            BlackBerry: function() {\n                return navigator.userAgent.match(/BlackBerry|BB10/i);\n            },\n            iOS: function() {\n                return navigator.userAgent.match(/iPhone|iPad|iPod/i);\n            },\n            Opera: function() {\n                return navigator.userAgent.match(/Opera Mini/i);\n            },\n            Windows: function() {\n                return navigator.userAgent.match(/IEMobile/i);\n            },\n            any: function() {\n                return (isMobile.Android() || isMobile.BlackBerry() || isMobile.iOS() || isMobile.Opera() || isMobile.Windows());\n            },\n            getOsName: function() {\n                var osName = 'Unknown OS';\n                if (isMobile.Android()) {\n                    osName = 'Android';\n                }\n\n                if (isMobile.BlackBerry()) {\n                    osName = 'BlackBerry';\n                }\n\n                if (isMobile.iOS()) {\n                    osName = 'iOS';\n                }\n\n                if (isMobile.Opera()) {\n                    osName = 'Opera Mini';\n                }\n\n                if (isMobile.Windows()) {\n                    osName = 'Windows';\n                }\n\n                return osName;\n            }\n        };\n\n        // via: http://jsfiddle.net/ChristianL/AVyND/\n        function detectDesktopOS() {\n            var unknown = '-';\n\n            var nVer = navigator.appVersion;\n            var nAgt = navigator.userAgent;\n\n            var os = unknown;\n            var clientStrings = [{\n                s: 'Windows 10',\n                r: /(Windows 10.0|Windows NT 10.0)/\n            }, {\n                s: 'Windows 8.1',\n                r: /(Windows 8.1|Windows NT 6.3)/\n            }, {\n                s: 'Windows 8',\n                r: /(Windows 8|Windows NT 6.2)/\n            }, {\n                s: 'Windows 7',\n                r: /(Windows 7|Windows NT 6.1)/\n            }, {\n                s: 'Windows Vista',\n                r: /Windows NT 6.0/\n            }, {\n                s: 'Windows Server 2003',\n                r: /Windows NT 5.2/\n            }, {\n                s: 'Windows XP',\n                r: /(Windows NT 5.1|Windows XP)/\n            }, {\n                s: 'Windows 2000',\n                r: /(Windows NT 5.0|Windows 2000)/\n            }, {\n                s: 'Windows ME',\n                r: /(Win 9x 4.90|Windows ME)/\n            }, {\n                s: 'Windows 98',\n                r: /(Windows 98|Win98)/\n            }, {\n                s: 'Windows 95',\n                r: /(Windows 95|Win95|Windows_95)/\n            }, {\n                s: 'Windows NT 4.0',\n                r: /(Windows NT 4.0|WinNT4.0|WinNT|Windows NT)/\n            }, {\n                s: 'Windows CE',\n                r: /Windows CE/\n            }, {\n                s: 'Windows 3.11',\n                r: /Win16/\n            }, {\n                s: 'Android',\n                r: /Android/\n            }, {\n                s: 'Open BSD',\n                r: /OpenBSD/\n            }, {\n                s: 'Sun OS',\n                r: /SunOS/\n            }, {\n                s: 'Linux',\n                r: /(Linux|X11)/\n            }, {\n                s: 'iOS',\n                r: /(iPhone|iPad|iPod)/\n            }, {\n                s: 'Mac OS X',\n                r: /Mac OS X/\n            }, {\n                s: 'Mac OS',\n                r: /(MacPPC|MacIntel|Mac_PowerPC|Macintosh)/\n            }, {\n                s: 'QNX',\n                r: /QNX/\n            }, {\n                s: 'UNIX',\n                r: /UNIX/\n            }, {\n                s: 'BeOS',\n                r: /BeOS/\n            }, {\n                s: 'OS/2',\n                r: /OS\\/2/\n            }, {\n                s: 'Search Bot',\n                r: /(nuhk|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask Jeeves\\/Teoma|ia_archiver)/\n            }];\n            for (var id in clientStrings) {\n                var cs = clientStrings[id];\n                if (cs.r.test(nAgt)) {\n                    os = cs.s;\n                    break;\n                }\n            }\n\n            var osVersion = unknown;\n\n            if (/Windows/.test(os)) {\n                if (/Windows (.*)/.test(os)) {\n                    osVersion = /Windows (.*)/.exec(os)[1];\n                }\n                os = 'Windows';\n            }\n\n            switch (os) {\n                case 'Mac OS X':\n                    if (/Mac OS X (10[\\.\\_\\d]+)/.test(nAgt)) {\n                        osVersion = /Mac OS X (10[\\.\\_\\d]+)/.exec(nAgt)[1];\n                    }\n                    break;\n                case 'Android':\n                    if (/Android ([\\.\\_\\d]+)/.test(nAgt)) {\n                        osVersion = /Android ([\\.\\_\\d]+)/.exec(nAgt)[1];\n                    }\n                    break;\n                case 'iOS':\n                    if (/OS (\\d+)_(\\d+)_?(\\d+)?/.test(nAgt)) {\n                        osVersion = /OS (\\d+)_(\\d+)_?(\\d+)?/.exec(nVer);\n                        osVersion = osVersion[1] + '.' + osVersion[2] + '.' + (osVersion[3] | 0);\n                    }\n                    break;\n            }\n\n            return {\n                osName: os,\n                osVersion: osVersion\n            };\n        }\n\n        var osName = 'Unknown OS';\n        var osVersion = 'Unknown OS Version';\n\n        function getAndroidVersion(ua) {\n            ua = (ua || navigator.userAgent).toLowerCase();\n            var match = ua.match(/android\\s([0-9\\.]*)/);\n            return match ? match[1] : false;\n        }\n\n        var osInfo = detectDesktopOS();\n\n        if (osInfo && osInfo.osName && osInfo.osName != '-') {\n            osName = osInfo.osName;\n            osVersion = osInfo.osVersion;\n        } else if (isMobile.any()) {\n            osName = isMobile.getOsName();\n\n            if (osName == 'Android') {\n                osVersion = getAndroidVersion();\n            }\n        }\n\n        var isNodejs = typeof process === 'object' && typeof process.versions === 'object' && process.versions.node;\n\n        if (osName === 'Unknown OS' && isNodejs) {\n            osName = 'Nodejs';\n            osVersion = process.versions.node.toString().replace('v', '');\n        }\n\n        var isCanvasSupportsStreamCapturing = false;\n        var isVideoSupportsStreamCapturing = false;\n        ['captureStream', 'mozCaptureStream', 'webkitCaptureStream'].forEach(function(item) {\n            if (!isCanvasSupportsStreamCapturing && item in document.createElement('canvas')) {\n                isCanvasSupportsStreamCapturing = true;\n            }\n\n            if (!isVideoSupportsStreamCapturing && item in document.createElement('video')) {\n                isVideoSupportsStreamCapturing = true;\n            }\n        });\n\n        // via: https://github.com/diafygi/webrtc-ips\n        function DetectLocalIPAddress(callback) {\n            if (!DetectRTC.isWebRTCSupported) {\n                return;\n            }\n\n            if (DetectRTC.isORTCSupported) {\n                return;\n            }\n\n            getIPs(function(ip) {\n                //local IPs\n                if (ip.match(/^(192\\.168\\.|169\\.254\\.|10\\.|172\\.(1[6-9]|2\\d|3[01]))/)) {\n                    callback('Local: ' + ip);\n                }\n\n                //assume the rest are public IPs\n                else {\n                    callback('Public: ' + ip);\n                }\n            });\n        }\n\n        //get the IP addresses associated with an account\n        function getIPs(callback) {\n            var ipDuplicates = {};\n\n            //compatibility for firefox and chrome\n            var RTCPeerConnection = window.RTCPeerConnection || window.mozRTCPeerConnection || window.webkitRTCPeerConnection;\n            var useWebKit = !!window.webkitRTCPeerConnection;\n\n            // bypass naive webrtc blocking using an iframe\n            if (!RTCPeerConnection) {\n                var iframe = document.getElementById('iframe');\n                if (!iframe) {\n                    //<iframe id=\"iframe\" sandbox=\"allow-same-origin\" style=\"display: none\"></iframe>\n                    throw 'NOTE: you need to have an iframe in the page right above the script tag.';\n                }\n                var win = iframe.contentWindow;\n                RTCPeerConnection = win.RTCPeerConnection || win.mozRTCPeerConnection || win.webkitRTCPeerConnection;\n                useWebKit = !!win.webkitRTCPeerConnection;\n            }\n\n            // if still no RTCPeerConnection then it is not supported by the browser so just return\n            if (!RTCPeerConnection) {\n                return;\n            }\n\n            //minimal requirements for data connection\n            var mediaConstraints = {\n                optional: [{\n                    RtpDataChannels: true\n                }]\n            };\n\n            //firefox already has a default stun server in about:config\n            //    media.peerconnection.default_iceservers =\n            //    [{\"url\": \"stun:stun.services.mozilla.com\"}]\n            var servers;\n\n            //add same stun server for chrome\n            if (useWebKit) {\n                servers = {\n                    iceServers: [{\n                        urls: 'stun:stun.services.mozilla.com'\n                    }]\n                };\n\n                if (typeof DetectRTC !== 'undefined' && DetectRTC.browser.isFirefox && DetectRTC.browser.version <= 38) {\n                    servers[0] = {\n                        url: servers[0].urls\n                    };\n                }\n            }\n\n            //construct a new RTCPeerConnection\n            var pc = new RTCPeerConnection(servers, mediaConstraints);\n\n            function handleCandidate(candidate) {\n                //match just the IP address\n                var ipRegex = /([0-9]{1,3}(\\.[0-9]{1,3}){3})/;\n                var match = ipRegex.exec(candidate);\n                if (!match) {\n                    console.warn('Could not match IP address in', candidate);\n                    return;\n                }\n                var ipAddress = match[1];\n\n                //remove duplicates\n                if (ipDuplicates[ipAddress] === undefined) {\n                    callback(ipAddress);\n                }\n\n                ipDuplicates[ipAddress] = true;\n            }\n\n            //listen for candidate events\n            pc.onicecandidate = function(ice) {\n                //skip non-candidate events\n                if (ice.candidate) {\n                    handleCandidate(ice.candidate.candidate);\n                }\n            };\n\n            //create a bogus data channel\n            pc.createDataChannel('');\n\n            //create an offer sdp\n            pc.createOffer(function(result) {\n\n                //trigger the stun server request\n                pc.setLocalDescription(result, function() {}, function() {});\n\n            }, function() {});\n\n            //wait for a while to let everything done\n            setTimeout(function() {\n                //read candidate info from local description\n                var lines = pc.localDescription.sdp.split('\\n');\n\n                lines.forEach(function(line) {\n                    if (line.indexOf('a=candidate:') === 0) {\n                        handleCandidate(line);\n                    }\n                });\n            }, 1000);\n        }\n\n        var MediaDevices = [];\n\n        var audioInputDevices = [];\n        var audioOutputDevices = [];\n        var videoInputDevices = [];\n\n        if (navigator.mediaDevices && navigator.mediaDevices.enumerateDevices) {\n            // Firefox 38+ seems having support of enumerateDevices\n            // Thanks @xdumaine/enumerateDevices\n            navigator.enumerateDevices = function(callback) {\n                navigator.mediaDevices.enumerateDevices().then(callback).catch(function() {\n                    callback([]);\n                });\n            };\n        }\n\n        // Media Devices detection\n        var canEnumerate = false;\n\n        /*global MediaStreamTrack:true */\n        if (typeof MediaStreamTrack !== 'undefined' && 'getSources' in MediaStreamTrack) {\n            canEnumerate = true;\n        } else if (navigator.mediaDevices && !!navigator.mediaDevices.enumerateDevices) {\n            canEnumerate = true;\n        }\n\n        var hasMicrophone = false;\n        var hasSpeakers = false;\n        var hasWebcam = false;\n\n        var isWebsiteHasMicrophonePermissions = false;\n        var isWebsiteHasWebcamPermissions = false;\n\n        // http://dev.w3.org/2011/webrtc/editor/getusermedia.html#mediadevices\n        function checkDeviceSupport(callback) {\n            if (!canEnumerate) {\n                if (callback) {\n                    callback();\n                }\n                return;\n            }\n\n            if (!navigator.enumerateDevices && window.MediaStreamTrack && window.MediaStreamTrack.getSources) {\n                navigator.enumerateDevices = window.MediaStreamTrack.getSources.bind(window.MediaStreamTrack);\n            }\n\n            if (!navigator.enumerateDevices && navigator.enumerateDevices) {\n                navigator.enumerateDevices = navigator.enumerateDevices.bind(navigator);\n            }\n\n            if (!navigator.enumerateDevices) {\n                if (callback) {\n                    callback();\n                }\n                return;\n            }\n\n            MediaDevices = [];\n\n            audioInputDevices = [];\n            audioOutputDevices = [];\n            videoInputDevices = [];\n\n            isWebsiteHasMicrophonePermissions = false;\n            isWebsiteHasWebcamPermissions = false;\n\n            // to prevent duplication\n            var alreadyUsedDevices = {};\n\n            navigator.enumerateDevices(function(devices) {\n                devices.forEach(function(_device) {\n                    var device = {};\n                    for (var d in _device) {\n                        try {\n                            if (typeof _device[d] !== 'function') {\n                                device[d] = _device[d];\n                            }\n                        } catch (e) {}\n                    }\n\n                    if (alreadyUsedDevices[device.deviceId + device.label]) {\n                        return;\n                    }\n\n                    // if it is MediaStreamTrack.getSources\n                    if (device.kind === 'audio') {\n                        device.kind = 'audioinput';\n                    }\n\n                    if (device.kind === 'video') {\n                        device.kind = 'videoinput';\n                    }\n\n                    if (!device.deviceId) {\n                        device.deviceId = device.id;\n                    }\n\n                    if (!device.id) {\n                        device.id = device.deviceId;\n                    }\n\n                    if (!device.label) {\n                        device.label = 'Please invoke getUserMedia once.';\n                        if (DetectRTC.browser.isChrome && DetectRTC.browser.version >= 46 && !/^(https:|chrome-extension:)$/g.test(location.protocol || '')) {\n                            if (document.domain.search && document.domain.search(/localhost|127.0./g) === -1) {\n                                device.label = 'HTTPs is required to get label of this ' + device.kind + ' device.';\n                            }\n                        }\n                    } else {\n                        if (device.kind === 'videoinput' && !isWebsiteHasWebcamPermissions) {\n                            isWebsiteHasWebcamPermissions = true;\n                        }\n\n                        if (device.kind === 'audioinput' && !isWebsiteHasMicrophonePermissions) {\n                            isWebsiteHasMicrophonePermissions = true;\n                        }\n                    }\n\n                    if (device.kind === 'audioinput') {\n                        hasMicrophone = true;\n\n                        if (audioInputDevices.indexOf(device) === -1) {\n                            audioInputDevices.push(device);\n                        }\n                    }\n\n                    if (device.kind === 'audiooutput') {\n                        hasSpeakers = true;\n\n                        if (audioOutputDevices.indexOf(device) === -1) {\n                            audioOutputDevices.push(device);\n                        }\n                    }\n\n                    if (device.kind === 'videoinput') {\n                        hasWebcam = true;\n\n                        if (videoInputDevices.indexOf(device) === -1) {\n                            videoInputDevices.push(device);\n                        }\n                    }\n\n                    // there is no 'videoouput' in the spec.\n                    MediaDevices.push(device);\n\n                    alreadyUsedDevices[device.deviceId + device.label] = device;\n                });\n\n                if (typeof DetectRTC !== 'undefined') {\n                    // to sync latest outputs\n                    DetectRTC.MediaDevices = MediaDevices;\n                    DetectRTC.hasMicrophone = hasMicrophone;\n                    DetectRTC.hasSpeakers = hasSpeakers;\n                    DetectRTC.hasWebcam = hasWebcam;\n\n                    DetectRTC.isWebsiteHasWebcamPermissions = isWebsiteHasWebcamPermissions;\n                    DetectRTC.isWebsiteHasMicrophonePermissions = isWebsiteHasMicrophonePermissions;\n\n                    DetectRTC.audioInputDevices = audioInputDevices;\n                    DetectRTC.audioOutputDevices = audioOutputDevices;\n                    DetectRTC.videoInputDevices = videoInputDevices;\n                }\n\n                if (callback) {\n                    callback();\n                }\n            });\n        }\n\n        // check for microphone/camera support!\n        checkDeviceSupport();\n\n        var DetectRTC = window.DetectRTC || {};\n\n        // ----------\n        // DetectRTC.browser.name || DetectRTC.browser.version || DetectRTC.browser.fullVersion\n        DetectRTC.browser = getBrowserInfo();\n\n        detectPrivateMode(function(isPrivateBrowsing) {\n            DetectRTC.browser.isPrivateBrowsing = !!isPrivateBrowsing;\n        });\n\n        // DetectRTC.isChrome || DetectRTC.isFirefox || DetectRTC.isEdge\n        DetectRTC.browser['is' + DetectRTC.browser.name] = true;\n\n        // -----------\n        DetectRTC.osName = osName;\n        DetectRTC.osVersion = osVersion;\n\n        var isNodeWebkit = typeof process === 'object' && typeof process.versions === 'object' && process.versions['node-webkit'];\n\n        // --------- Detect if system supports WebRTC 1.0 or WebRTC 1.1.\n        var isWebRTCSupported = false;\n        ['RTCPeerConnection', 'webkitRTCPeerConnection', 'mozRTCPeerConnection', 'RTCIceGatherer'].forEach(function(item) {\n            if (isWebRTCSupported) {\n                return;\n            }\n\n            if (item in window) {\n                isWebRTCSupported = true;\n            }\n        });\n        DetectRTC.isWebRTCSupported = isWebRTCSupported;\n\n        //-------\n        DetectRTC.isORTCSupported = typeof RTCIceGatherer !== 'undefined';\n\n        // --------- Detect if system supports screen capturing API\n        var isScreenCapturingSupported = false;\n        if (DetectRTC.browser.isChrome && DetectRTC.browser.version >= 35) {\n            isScreenCapturingSupported = true;\n        } else if (DetectRTC.browser.isFirefox && DetectRTC.browser.version >= 34) {\n            isScreenCapturingSupported = true;\n        }\n\n        if (!/^(https:|chrome-extension:)$/g.test(location.protocol || '')) {\n            if (document.domain.search && document.domain.search(/localhost|127.0./g) === -1) {\n                // DetectRTC.browser.isChrome\n                isScreenCapturingSupported = false;\n            }\n\n            if (DetectRTC.browser.isFirefox) {\n                isScreenCapturingSupported = false;\n            }\n        }\n        DetectRTC.isScreenCapturingSupported = isScreenCapturingSupported;\n\n        // --------- Detect if WebAudio API are supported\n        var webAudio = {\n            isSupported: false,\n            isCreateMediaStreamSourceSupported: false\n        };\n\n        ['AudioContext', 'webkitAudioContext', 'mozAudioContext', 'msAudioContext'].forEach(function(item) {\n            if (webAudio.isSupported) {\n                return;\n            }\n\n            if (item in window) {\n                webAudio.isSupported = true;\n\n                if (window[item] && 'createMediaStreamSource' in window[item].prototype) {\n                    webAudio.isCreateMediaStreamSourceSupported = true;\n                }\n            }\n        });\n        DetectRTC.isAudioContextSupported = webAudio.isSupported;\n        DetectRTC.isCreateMediaStreamSourceSupported = webAudio.isCreateMediaStreamSourceSupported;\n\n        // ---------- Detect if SCTP/RTP channels are supported.\n\n        var isRtpDataChannelsSupported = false;\n        if (DetectRTC.browser.isChrome && DetectRTC.browser.version > 31) {\n            isRtpDataChannelsSupported = true;\n        }\n        DetectRTC.isRtpDataChannelsSupported = isRtpDataChannelsSupported;\n\n        var isSCTPSupportd = false;\n        if (DetectRTC.browser.isFirefox && DetectRTC.browser.version > 28) {\n            isSCTPSupportd = true;\n        } else if (DetectRTC.browser.isChrome && DetectRTC.browser.version > 25) {\n            isSCTPSupportd = true;\n        } else if (DetectRTC.browser.isOpera && DetectRTC.browser.version >= 11) {\n            isSCTPSupportd = true;\n        }\n        DetectRTC.isSctpDataChannelsSupported = isSCTPSupportd;\n\n        // ---------\n\n        DetectRTC.isMobileDevice = isMobileDevice; // \"isMobileDevice\" boolean is defined in \"getBrowserInfo.js\"\n\n        // ------\n        var isGetUserMediaSupported = false;\n        if (navigator.getUserMedia) {\n            isGetUserMediaSupported = true;\n        } else if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n            isGetUserMediaSupported = true;\n        }\n\n        if (DetectRTC.browser.isChrome && DetectRTC.browser.version >= 46 && !/^(https:|chrome-extension:)$/g.test(location.protocol || '')) {\n            if (document.domain.search && document.domain.search(/localhost|127.0./g) === -1) {\n                isGetUserMediaSupported = 'Requires HTTPs';\n            }\n        }\n\n        if (DetectRTC.osName === 'Nodejs') {\n            isGetUserMediaSupported = false;\n        }\n        DetectRTC.isGetUserMediaSupported = isGetUserMediaSupported;\n\n        var displayResolution = '';\n        if (screen.width) {\n            var width = (screen.width) ? screen.width : '';\n            var height = (screen.height) ? screen.height : '';\n            displayResolution += '' + width + ' x ' + height;\n        }\n        DetectRTC.displayResolution = displayResolution;\n\n        // ----------\n        DetectRTC.isCanvasSupportsStreamCapturing = isCanvasSupportsStreamCapturing;\n        DetectRTC.isVideoSupportsStreamCapturing = isVideoSupportsStreamCapturing;\n\n        if (DetectRTC.browser.name == 'Chrome' && DetectRTC.browser.version >= 53) {\n            if (!DetectRTC.isCanvasSupportsStreamCapturing) {\n                DetectRTC.isCanvasSupportsStreamCapturing = 'Requires chrome flag: enable-experimental-web-platform-features';\n            }\n\n            if (!DetectRTC.isVideoSupportsStreamCapturing) {\n                DetectRTC.isVideoSupportsStreamCapturing = 'Requires chrome flag: enable-experimental-web-platform-features';\n            }\n        }\n\n        // ------\n        DetectRTC.DetectLocalIPAddress = DetectLocalIPAddress;\n\n        DetectRTC.isWebSocketsSupported = 'WebSocket' in window && 2 === window.WebSocket.CLOSING;\n        DetectRTC.isWebSocketsBlocked = !DetectRTC.isWebSocketsSupported;\n\n        if (DetectRTC.osName === 'Nodejs') {\n            DetectRTC.isWebSocketsSupported = true;\n            DetectRTC.isWebSocketsBlocked = false;\n        }\n\n        DetectRTC.checkWebSocketsSupport = function(callback) {\n            callback = callback || function() {};\n            try {\n                var websocket = new WebSocket('wss://echo.websocket.org:443/');\n                websocket.onopen = function() {\n                    DetectRTC.isWebSocketsBlocked = false;\n                    callback();\n                    websocket.close();\n                    websocket = null;\n                };\n                websocket.onerror = function() {\n                    DetectRTC.isWebSocketsBlocked = true;\n                    callback();\n                };\n            } catch (e) {\n                DetectRTC.isWebSocketsBlocked = true;\n                callback();\n            }\n        };\n\n        // -------\n        DetectRTC.load = function(callback) {\n            callback = callback || function() {};\n            checkDeviceSupport(callback);\n        };\n\n        DetectRTC.MediaDevices = MediaDevices;\n        DetectRTC.hasMicrophone = hasMicrophone;\n        DetectRTC.hasSpeakers = hasSpeakers;\n        DetectRTC.hasWebcam = hasWebcam;\n\n        DetectRTC.isWebsiteHasWebcamPermissions = isWebsiteHasWebcamPermissions;\n        DetectRTC.isWebsiteHasMicrophonePermissions = isWebsiteHasMicrophonePermissions;\n\n        DetectRTC.audioInputDevices = audioInputDevices;\n        DetectRTC.audioOutputDevices = audioOutputDevices;\n        DetectRTC.videoInputDevices = videoInputDevices;\n\n        // ------\n        var isSetSinkIdSupported = false;\n        if ('setSinkId' in document.createElement('video')) {\n            isSetSinkIdSupported = true;\n        }\n        DetectRTC.isSetSinkIdSupported = isSetSinkIdSupported;\n\n        // -----\n        var isRTPSenderReplaceTracksSupported = false;\n        if (DetectRTC.browser.isFirefox && typeof mozRTCPeerConnection !== 'undefined' /*&& DetectRTC.browser.version > 39*/ ) {\n            /*global mozRTCPeerConnection:true */\n            if ('getSenders' in mozRTCPeerConnection.prototype) {\n                isRTPSenderReplaceTracksSupported = true;\n            }\n        } else if (DetectRTC.browser.isChrome && typeof webkitRTCPeerConnection !== 'undefined') {\n            /*global webkitRTCPeerConnection:true */\n            if ('getSenders' in webkitRTCPeerConnection.prototype) {\n                isRTPSenderReplaceTracksSupported = true;\n            }\n        }\n        DetectRTC.isRTPSenderReplaceTracksSupported = isRTPSenderReplaceTracksSupported;\n\n        //------\n        var isRemoteStreamProcessingSupported = false;\n        if (DetectRTC.browser.isFirefox && DetectRTC.browser.version > 38) {\n            isRemoteStreamProcessingSupported = true;\n        }\n        DetectRTC.isRemoteStreamProcessingSupported = isRemoteStreamProcessingSupported;\n\n        //-------\n        var isApplyConstraintsSupported = false;\n\n        /*global MediaStreamTrack:true */\n        if (typeof MediaStreamTrack !== 'undefined' && 'applyConstraints' in MediaStreamTrack.prototype) {\n            isApplyConstraintsSupported = true;\n        }\n        DetectRTC.isApplyConstraintsSupported = isApplyConstraintsSupported;\n\n        //-------\n        var isMultiMonitorScreenCapturingSupported = false;\n        if (DetectRTC.browser.isFirefox && DetectRTC.browser.version >= 43) {\n            // version 43 merely supports platforms for multi-monitors\n            // version 44 will support exact multi-monitor selection i.e. you can select any monitor for screen capturing.\n            isMultiMonitorScreenCapturingSupported = true;\n        }\n        DetectRTC.isMultiMonitorScreenCapturingSupported = isMultiMonitorScreenCapturingSupported;\n\n        DetectRTC.isPromisesSupported = !!('Promise' in window);\n\n        if (typeof DetectRTC === 'undefined') {\n            window.DetectRTC = {};\n        }\n\n        var MediaStream = window.MediaStream;\n\n        if (typeof MediaStream === 'undefined' && typeof webkitMediaStream !== 'undefined') {\n            MediaStream = webkitMediaStream;\n        }\n\n        if (typeof MediaStream !== 'undefined') {\n            DetectRTC.MediaStream = Object.keys(MediaStream.prototype);\n        } else DetectRTC.MediaStream = false;\n\n        if (typeof MediaStreamTrack !== 'undefined') {\n            DetectRTC.MediaStreamTrack = Object.keys(MediaStreamTrack.prototype);\n        } else DetectRTC.MediaStreamTrack = false;\n\n        var RTCPeerConnection = window.RTCPeerConnection || window.mozRTCPeerConnection || window.webkitRTCPeerConnection;\n\n        if (typeof RTCPeerConnection !== 'undefined') {\n            DetectRTC.RTCPeerConnection = Object.keys(RTCPeerConnection.prototype);\n        } else DetectRTC.RTCPeerConnection = false;\n\n        window.DetectRTC = DetectRTC;\n\n        if (typeof module !== 'undefined' /* && !!module.exports*/ ) {\n            module.exports = DetectRTC;\n        }\n\n        if (typeof define === 'function' && define.amd) {\n            define('DetectRTC', [], function() {\n                return DetectRTC;\n            });\n        }\n    })();\n\n    // ios-hacks.js\n\n    function setCordovaAPIs() {\n        if (DetectRTC.osName !== 'iOS') return;\n        if (typeof cordova === 'undefined' || typeof cordova.plugins === 'undefined' || typeof cordova.plugins.iosrtc === 'undefined') return;\n\n        var iosrtc = cordova.plugins.iosrtc;\n        window.webkitRTCPeerConnection = iosrtc.RTCPeerConnection;\n        window.RTCSessionDescription = iosrtc.RTCSessionDescription;\n        window.RTCIceCandidate = iosrtc.RTCIceCandidate;\n        window.MediaStream = iosrtc.MediaStream;\n        window.MediaStreamTrack = iosrtc.MediaStreamTrack;\n        navigator.getUserMedia = navigator.webkitGetUserMedia = iosrtc.getUserMedia;\n\n        iosrtc.debug.enable('iosrtc*');\n        if (typeof iosrtc.selectAudioOutput == 'function') {\n            iosrtc.selectAudioOutput(window.iOSDefaultAudioOutputDevice || 'speaker'); // earpiece or speaker\n        }\n        iosrtc.registerGlobals();\n    }\n\n    document.addEventListener('deviceready', setCordovaAPIs, false);\n    setCordovaAPIs();\n\n    // RTCPeerConnection.js\n\n    var defaults = {};\n\n    function setSdpConstraints(config) {\n        var sdpConstraints;\n\n        var sdpConstraints_mandatory = {\n            OfferToReceiveAudio: !!config.OfferToReceiveAudio,\n            OfferToReceiveVideo: !!config.OfferToReceiveVideo\n        };\n\n        sdpConstraints = {\n            mandatory: sdpConstraints_mandatory,\n            optional: [{\n                VoiceActivityDetection: false\n            }]\n        };\n\n        if (!!navigator.mozGetUserMedia && firefoxVersion > 34) {\n            sdpConstraints = {\n                OfferToReceiveAudio: !!config.OfferToReceiveAudio,\n                OfferToReceiveVideo: !!config.OfferToReceiveVideo\n            };\n        }\n\n        return sdpConstraints;\n    }\n\n    var RTCPeerConnection;\n    if (typeof window.RTCPeerConnection !== 'undefined') {\n        RTCPeerConnection = window.RTCPeerConnection;\n    } else if (typeof mozRTCPeerConnection !== 'undefined') {\n        RTCPeerConnection = mozRTCPeerConnection;\n    } else if (typeof webkitRTCPeerConnection !== 'undefined') {\n        RTCPeerConnection = webkitRTCPeerConnection;\n    }\n\n    var RTCSessionDescription = window.RTCSessionDescription || window.mozRTCSessionDescription;\n    var RTCIceCandidate = window.RTCIceCandidate || window.mozRTCIceCandidate;\n    var MediaStreamTrack = window.MediaStreamTrack;\n\n    window.onPluginRTCInitialized = function() {\n        MediaStreamTrack = window.PluginRTC.MediaStreamTrack;\n        RTCPeerConnection = window.PluginRTC.RTCPeerConnection;\n        RTCIceCandidate = window.PluginRTC.RTCIceCandidate;\n        RTCSessionDescription = window.PluginRTC.RTCSessionDescription;\n    }\n\n    if (typeof window.PluginRTC !== 'undefined') {\n        window.onPluginRTCInitialized();\n    }\n\n    function PeerInitiator(config) {\n        if (!RTCPeerConnection) {\n            throw 'WebRTC 1.0 (RTCPeerConnection) API are NOT available in this browser.';\n        }\n\n        var connection = config.rtcMultiConnection;\n\n        this.extra = config.remoteSdp ? config.remoteSdp.extra : connection.extra;\n        this.userid = config.userid;\n        this.streams = [];\n        this.channels = config.channels || [];\n        this.connectionDescription = config.connectionDescription;\n\n        this.addStream = function(session) {\n            connection.addStream(session, this.userid);\n        };\n\n        this.removeStream = function(streamid) {\n            connection.removeStream(streamid, this.userid);\n        };\n\n        var self = this;\n\n        if (config.remoteSdp) {\n            this.connectionDescription = config.remoteSdp.connectionDescription;\n        }\n\n        var allRemoteStreams = {};\n\n        defaults.sdpConstraints = setSdpConstraints({\n            OfferToReceiveAudio: true,\n            OfferToReceiveVideo: true\n        });\n\n        var peer;\n\n        var renegotiatingPeer = !!config.renegotiatingPeer;\n        if (config.remoteSdp) {\n            renegotiatingPeer = !!config.remoteSdp.renegotiatingPeer;\n        }\n\n        var localStreams = [];\n        connection.attachStreams.forEach(function(stream) {\n            if (!!stream) {\n                localStreams.push(stream);\n            }\n        });\n\n        if (!renegotiatingPeer) {\n            var iceTransports = 'all';\n            if (connection.candidates.turn || connection.candidates.relay) {\n                if (!connection.candidates.stun && !connection.candidates.reflexive && !connection.candidates.host) {\n                    iceTransports = 'relay';\n                }\n            }\n\n            peer = new RTCPeerConnection(navigator.onLine ? {\n                iceServers: connection.iceServers,\n                iceTransportPolicy: connection.iceTransportPolicy || iceTransports,\n                rtcpMuxPolicy: connection.rtcpMuxPolicy || 'negotiate'\n            } : null, window.PluginRTC ? null : connection.optionalArgument);\n\n            if (!connection.iceServers.length) {\n                peer = new RTCPeerConnection(null, null);\n            }\n        } else {\n            peer = config.peerRef;\n        }\n\n        function getLocalStreams() {\n            // if-block is temporarily disabled\n            if (false && 'getSenders' in peer && typeof peer.getSenders === 'function') {\n                var streamObject2 = new MediaStream();\n                peer.getSenders().forEach(function(sender) {\n                    streamObject2.addTrack(sender.track);\n                });\n                return streamObject2;\n            }\n            return peer.getLocalStreams();\n        }\n\n        peer.onicecandidate = function(event) {\n            if (!event.candidate) {\n                if (!connection.trickleIce) {\n                    var localSdp = peer.localDescription;\n                    config.onLocalSdp({\n                        type: localSdp.type,\n                        sdp: localSdp.sdp,\n                        remotePeerSdpConstraints: config.remotePeerSdpConstraints || false,\n                        renegotiatingPeer: !!config.renegotiatingPeer || false,\n                        connectionDescription: self.connectionDescription,\n                        dontGetRemoteStream: !!config.dontGetRemoteStream,\n                        extra: connection ? connection.extra : {},\n                        streamsToShare: streamsToShare,\n                        isFirefoxOffered: isFirefox\n                    });\n                }\n                return;\n            }\n\n            if (!connection.trickleIce) return;\n            config.onLocalCandidate({\n                candidate: event.candidate.candidate,\n                sdpMid: event.candidate.sdpMid,\n                sdpMLineIndex: event.candidate.sdpMLineIndex\n            });\n        };\n\n        var isFirefoxOffered = !isFirefox;\n        if (config.remoteSdp && config.remoteSdp.remotePeerSdpConstraints && config.remoteSdp.remotePeerSdpConstraints.isFirefoxOffered) {\n            isFirefoxOffered = true;\n        }\n\n        localStreams.forEach(function(localStream) {\n            if (config.remoteSdp && config.remoteSdp.remotePeerSdpConstraints && config.remoteSdp.remotePeerSdpConstraints.dontGetRemoteStream) {\n                return;\n            }\n\n            if (config.dontAttachLocalStream) {\n                return;\n            }\n\n            localStream = connection.beforeAddingStream(localStream, self);\n\n            if (!localStream) return;\n\n            if (getLocalStreams().forEach) {\n                getLocalStreams().forEach(function(stream) {\n                    if (localStream && stream.id == localStream.id) {\n                        localStream = null;\n                    }\n                });\n            }\n\n            if (localStream) {\n                peer.addStream(localStream);\n            }\n        });\n\n        peer.oniceconnectionstatechange = peer.onsignalingstatechange = function() {\n            var extra = self.extra;\n            if (connection.peers[self.userid]) {\n                extra = connection.peers[self.userid].extra || extra;\n            }\n\n            if (!peer) {\n                return;\n            }\n\n            config.onPeerStateChanged({\n                iceConnectionState: peer.iceConnectionState,\n                iceGatheringState: peer.iceGatheringState,\n                signalingState: peer.signalingState,\n                extra: extra,\n                userid: self.userid\n            });\n\n            if (isFirefox && peer.iceConnectionState.search(/closed|failed/gi) !== -1) {\n                self.streams.forEach(function(stream) {\n                    var streamEvent = connection.streamEvents[stream.id] || {\n                        streamid: stream.id,\n                        stream: stream,\n                        type: 'remote'\n                    };\n\n                    connection.onstreamended(streamEvent);\n                });\n            }\n        };\n\n        var sdpConstraints = {\n            OfferToReceiveAudio: !!localStreams.length,\n            OfferToReceiveVideo: !!localStreams.length\n        };\n\n        if (config.localPeerSdpConstraints) sdpConstraints = config.localPeerSdpConstraints;\n\n        defaults.sdpConstraints = setSdpConstraints(sdpConstraints);\n\n        var remoteStreamAddEvent = 'addstream';\n        if ('ontrack' in peer) {\n            // temporarily disabled\n            // remoteStreamAddEvent = 'track';\n        }\n\n        var streamObject;\n        peer.addEventListener(remoteStreamAddEvent, function(event) {\n            if (!event) return;\n            if (event.streams && event.streams.length && !event.stream) {\n                if (!streamObject) {\n                    streamObject = new MediaStream();\n                    return;\n                }\n\n                event.streams.forEach(function(stream) {\n                    if (stream.getVideoTracks().length) {\n                        streamObject.addTrack(stream.getVideoTracks()[0]);\n                    }\n                    if (stream.getAudioTracks().length) {\n                        streamObject.addTrack(stream.getAudioTracks()[0]);\n                    }\n                });\n                event.stream = streamObject;\n\n                if (connection.session.audio && connection.session.video && (!streamObject.getVideoTracks().length || !streamObject.getAudioTracks().length)) {\n                    return;\n                }\n\n                streamObject = null;\n            }\n\n            var streamsToShare = {};\n            if (config.remoteSdp && config.remoteSdp.streamsToShare) {\n                streamsToShare = config.remoteSdp.streamsToShare;\n            } else if (config.streamsToShare) {\n                streamsToShare = config.streamsToShare;\n            }\n\n            var streamToShare = streamsToShare[event.stream.id];\n            if (streamToShare) {\n                event.stream.isAudio = streamToShare.isAudio;\n                event.stream.isVideo = streamToShare.isVideo;\n                event.stream.isScreen = streamToShare.isScreen;\n            }\n            event.stream.streamid = event.stream.id;\n            if (isFirefox || !event.stream.stop) {\n                event.stream.stop = function() {\n                    var streamEndedEvent = 'ended';\n\n                    if ('oninactive' in event.stream) {\n                        streamEndedEvent = 'inactive';\n                    }\n                    fireEvent(event.stream, streamEndedEvent);\n                };\n            }\n            allRemoteStreams[event.stream.id] = event.stream;\n            config.onRemoteStream(event.stream);\n        }, false);\n\n        peer.onremovestream = function(event) {\n            event.stream.streamid = event.stream.id;\n\n            if (allRemoteStreams[event.stream.id]) {\n                delete allRemoteStreams[event.stream.id];\n            }\n\n            config.onRemoteStreamRemoved(event.stream);\n        };\n\n        this.addRemoteCandidate = function(remoteCandidate) {\n            peer.addIceCandidate(new RTCIceCandidate(remoteCandidate));\n        };\n\n        this.addRemoteSdp = function(remoteSdp, cb) {\n            remoteSdp.sdp = connection.processSdp(remoteSdp.sdp);\n            peer.setRemoteDescription(new RTCSessionDescription(remoteSdp), cb || function() {}, function(error) {\n                if (!!connection.enableLogs) {\n                    console.error(JSON.stringify(error, null, '\\t'), '\\n', remoteSdp.type, remoteSdp.sdp);\n                }\n            });\n        };\n\n        var isOfferer = true;\n\n        if (config.remoteSdp) {\n            isOfferer = false;\n        }\n\n        this.createDataChannel = function() {\n            var channel = peer.createDataChannel('sctp', {});\n            setChannelEvents(channel);\n        };\n\n        if (connection.session.data === true && !renegotiatingPeer) {\n            if (!isOfferer) {\n                peer.ondatachannel = function(event) {\n                    var channel = event.channel;\n                    setChannelEvents(channel);\n                };\n            } else {\n                this.createDataChannel();\n            }\n        }\n\n        if (config.remoteSdp) {\n            if (config.remoteSdp.remotePeerSdpConstraints) {\n                sdpConstraints = config.remoteSdp.remotePeerSdpConstraints;\n            }\n            defaults.sdpConstraints = setSdpConstraints(sdpConstraints);\n            this.addRemoteSdp(config.remoteSdp, function() {\n                createOfferOrAnswer('createAnswer');\n            });\n        }\n\n        function setChannelEvents(channel) {\n            // force ArrayBuffer in Firefox; which uses \"Blob\" by default.\n            channel.binaryType = 'arraybuffer';\n\n            channel.onmessage = function(event) {\n                config.onDataChannelMessage(event.data);\n            };\n\n            channel.onopen = function() {\n                config.onDataChannelOpened(channel);\n            };\n\n            channel.onerror = function(error) {\n                config.onDataChannelError(error);\n            };\n\n            channel.onclose = function(event) {\n                config.onDataChannelClosed(event);\n            };\n\n            channel.internalSend = channel.send;\n            channel.send = function(data) {\n                if (channel.readyState !== 'open') {\n                    return;\n                }\n\n                channel.internalSend(data);\n            };\n\n            peer.channel = channel;\n        }\n\n        if (connection.session.audio == 'two-way' || connection.session.video == 'two-way' || connection.session.screen == 'two-way') {\n            defaults.sdpConstraints = setSdpConstraints({\n                OfferToReceiveAudio: connection.session.audio == 'two-way' || (config.remoteSdp && config.remoteSdp.remotePeerSdpConstraints && config.remoteSdp.remotePeerSdpConstraints.OfferToReceiveAudio),\n                OfferToReceiveVideo: connection.session.video == 'two-way' || connection.session.screen == 'two-way' || (config.remoteSdp && config.remoteSdp.remotePeerSdpConstraints && config.remoteSdp.remotePeerSdpConstraints.OfferToReceiveAudio)\n            });\n        }\n\n        var streamsToShare = {};\n        if (getLocalStreams().forEach) {\n            getLocalStreams().forEach(function(stream) {\n                streamsToShare[stream.streamid] = {\n                    isAudio: !!stream.isAudio,\n                    isVideo: !!stream.isVideo,\n                    isScreen: !!stream.isScreen\n                };\n            });\n        }\n\n        function createOfferOrAnswer(_method) {\n            peer[_method](function(localSdp) {\n                localSdp.sdp = connection.processSdp(localSdp.sdp);\n                peer.setLocalDescription(localSdp, function() {\n                    if (!connection.trickleIce) return;\n                    config.onLocalSdp({\n                        type: localSdp.type,\n                        sdp: localSdp.sdp,\n                        remotePeerSdpConstraints: config.remotePeerSdpConstraints || false,\n                        renegotiatingPeer: !!config.renegotiatingPeer || false,\n                        connectionDescription: self.connectionDescription,\n                        dontGetRemoteStream: !!config.dontGetRemoteStream,\n                        extra: connection ? connection.extra : {},\n                        streamsToShare: streamsToShare,\n                        isFirefoxOffered: isFirefox\n                    });\n\n                    connection.onSettingLocalDescription(self);\n                }, function(error) {\n                    if (!connection.enableLogs) return;\n                    console.error('setLocalDescription error', error);\n                });\n            }, function(error) {\n                if (!!connection.enableLogs) {\n                    console.error('sdp-error', error);\n                }\n            }, defaults.sdpConstraints);\n        }\n\n        if (isOfferer) {\n            createOfferOrAnswer('createOffer');\n        }\n\n        peer.nativeClose = peer.close;\n        peer.close = function() {\n            if (!peer) {\n                return;\n            }\n\n            try {\n                if (peer.iceConnectionState.search(/closed|failed/gi) === -1) {\n                    peer.getRemoteStreams().forEach(function(stream) {\n                        stream.stop();\n                    });\n                }\n                peer.nativeClose();\n            } catch (e) {}\n\n            peer = null;\n            self.peer = null;\n        };\n\n        this.peer = peer;\n    }\n\n    // CodecsHandler.js\n\n    var CodecsHandler = (function() {\n        var isMobileDevice = !!navigator.userAgent.match(/Android|iPhone|iPad|iPod|BlackBerry|IEMobile/i);\n        if (typeof cordova !== 'undefined') {\n            isMobileDevice = true;\n        }\n\n        if (navigator && navigator.userAgent && navigator.userAgent.indexOf('Crosswalk') !== -1) {\n            isMobileDevice = true;\n        }\n\n        // \"removeVPX\" and \"removeNonG722\" methods are taken from github/mozilla/webrtc-landing\n        function removeVPX(sdp) {\n            if (!sdp || typeof sdp !== 'string') {\n                throw 'Invalid arguments.';\n            }\n\n            // this method is NOT reliable\n\n            sdp = sdp.replace('a=rtpmap:100 VP8/90000\\r\\n', '');\n            sdp = sdp.replace('a=rtpmap:101 VP9/90000\\r\\n', '');\n\n            sdp = sdp.replace(/m=video ([0-9]+) RTP\\/SAVPF ([0-9 ]*) 100/g, 'm=video $1 RTP\\/SAVPF $2');\n            sdp = sdp.replace(/m=video ([0-9]+) RTP\\/SAVPF ([0-9 ]*) 101/g, 'm=video $1 RTP\\/SAVPF $2');\n\n            sdp = sdp.replace(/m=video ([0-9]+) RTP\\/SAVPF 100([0-9 ]*)/g, 'm=video $1 RTP\\/SAVPF$2');\n            sdp = sdp.replace(/m=video ([0-9]+) RTP\\/SAVPF 101([0-9 ]*)/g, 'm=video $1 RTP\\/SAVPF$2');\n\n            sdp = sdp.replace('a=rtcp-fb:120 nack\\r\\n', '');\n            sdp = sdp.replace('a=rtcp-fb:120 nack pli\\r\\n', '');\n            sdp = sdp.replace('a=rtcp-fb:120 ccm fir\\r\\n', '');\n\n            sdp = sdp.replace('a=rtcp-fb:101 nack\\r\\n', '');\n            sdp = sdp.replace('a=rtcp-fb:101 nack pli\\r\\n', '');\n            sdp = sdp.replace('a=rtcp-fb:101 ccm fir\\r\\n', '');\n\n            return sdp;\n        }\n\n        function disableNACK(sdp) {\n            if (!sdp || typeof sdp !== 'string') {\n                throw 'Invalid arguments.';\n            }\n\n            sdp = sdp.replace('a=rtcp-fb:126 nack\\r\\n', '');\n            sdp = sdp.replace('a=rtcp-fb:126 nack pli\\r\\n', 'a=rtcp-fb:126 pli\\r\\n');\n            sdp = sdp.replace('a=rtcp-fb:97 nack\\r\\n', '');\n            sdp = sdp.replace('a=rtcp-fb:97 nack pli\\r\\n', 'a=rtcp-fb:97 pli\\r\\n');\n\n            return sdp;\n        }\n\n        function prioritize(codecMimeType, peer) {\n            if (!peer || !peer.getSenders || !peer.getSenders().length) {\n                return;\n            }\n\n            if (!codecMimeType || typeof codecMimeType !== 'string') {\n                throw 'Invalid arguments.';\n            }\n\n            peer.getSenders().forEach(function(sender) {\n                var params = sender.getParameters();\n                for (var i = 0; i < params.codecs.length; i++) {\n                    if (params.codecs[i].mimeType == codecMimeType) {\n                        params.codecs.unshift(params.codecs.splice(i, 1));\n                        break;\n                    }\n                }\n                sender.setParameters(params);\n            });\n        }\n\n        function removeNonG722(sdp) {\n            return sdp.replace(/m=audio ([0-9]+) RTP\\/SAVPF ([0-9 ]*)/g, 'm=audio $1 RTP\\/SAVPF 9');\n        }\n\n        function setBAS(sdp, bandwidth, isScreen) {\n            if (!bandwidth) {\n                return sdp;\n            }\n\n            if (typeof isFirefox !== 'undefined' && isFirefox) {\n                return sdp;\n            }\n\n            if (isMobileDevice) {\n                return sdp;\n            }\n\n            if (isScreen) {\n                if (!bandwidth.screen) {\n                    console.warn('It seems that you are not using bandwidth for screen. Screen sharing is expected to fail.');\n                } else if (bandwidth.screen < 300) {\n                    console.warn('It seems that you are using wrong bandwidth value for screen. Screen sharing is expected to fail.');\n                }\n            }\n\n            // if screen; must use at least 300kbs\n            if (bandwidth.screen && isScreen) {\n                sdp = sdp.replace(/b=AS([^\\r\\n]+\\r\\n)/g, '');\n                sdp = sdp.replace(/a=mid:video\\r\\n/g, 'a=mid:video\\r\\nb=AS:' + bandwidth.screen + '\\r\\n');\n            }\n\n            // remove existing bandwidth lines\n            if (bandwidth.audio || bandwidth.video || bandwidth.data) {\n                sdp = sdp.replace(/b=AS([^\\r\\n]+\\r\\n)/g, '');\n            }\n\n            if (bandwidth.audio) {\n                sdp = sdp.replace(/a=mid:audio\\r\\n/g, 'a=mid:audio\\r\\nb=AS:' + bandwidth.audio + '\\r\\n');\n            }\n\n            if (bandwidth.video) {\n                sdp = sdp.replace(/a=mid:video\\r\\n/g, 'a=mid:video\\r\\nb=AS:' + (isScreen ? bandwidth.screen : bandwidth.video) + '\\r\\n');\n            }\n\n            return sdp;\n        }\n\n        // Find the line in sdpLines that starts with |prefix|, and, if specified,\n        // contains |substr| (case-insensitive search).\n        function findLine(sdpLines, prefix, substr) {\n            return findLineInRange(sdpLines, 0, -1, prefix, substr);\n        }\n\n        // Find the line in sdpLines[startLine...endLine - 1] that starts with |prefix|\n        // and, if specified, contains |substr| (case-insensitive search).\n        function findLineInRange(sdpLines, startLine, endLine, prefix, substr) {\n            var realEndLine = endLine !== -1 ? endLine : sdpLines.length;\n            for (var i = startLine; i < realEndLine; ++i) {\n                if (sdpLines[i].indexOf(prefix) === 0) {\n                    if (!substr ||\n                        sdpLines[i].toLowerCase().indexOf(substr.toLowerCase()) !== -1) {\n                        return i;\n                    }\n                }\n            }\n            return null;\n        }\n\n        // Gets the codec payload type from an a=rtpmap:X line.\n        function getCodecPayloadType(sdpLine) {\n            var pattern = new RegExp('a=rtpmap:(\\\\d+) \\\\w+\\\\/\\\\d+');\n            var result = sdpLine.match(pattern);\n            return (result && result.length === 2) ? result[1] : null;\n        }\n\n        function setVideoBitrates(sdp, params) {\n            if (isMobileDevice) {\n                return sdp;\n            }\n\n            params = params || {};\n            var xgoogle_min_bitrate = params.min;\n            var xgoogle_max_bitrate = params.max;\n\n            var sdpLines = sdp.split('\\r\\n');\n\n            // VP8\n            var vp8Index = findLine(sdpLines, 'a=rtpmap', 'VP8/90000');\n            var vp8Payload;\n            if (vp8Index) {\n                vp8Payload = getCodecPayloadType(sdpLines[vp8Index]);\n            }\n\n            if (!vp8Payload) {\n                return sdp;\n            }\n\n            var rtxIndex = findLine(sdpLines, 'a=rtpmap', 'rtx/90000');\n            var rtxPayload;\n            if (rtxIndex) {\n                rtxPayload = getCodecPayloadType(sdpLines[rtxIndex]);\n            }\n\n            if (!rtxIndex) {\n                return sdp;\n            }\n\n            var rtxFmtpLineIndex = findLine(sdpLines, 'a=fmtp:' + rtxPayload.toString());\n            if (rtxFmtpLineIndex !== null) {\n                var appendrtxNext = '\\r\\n';\n                appendrtxNext += 'a=fmtp:' + vp8Payload + ' x-google-min-bitrate=' + (xgoogle_min_bitrate || '228') + '; x-google-max-bitrate=' + (xgoogle_max_bitrate || '228');\n                sdpLines[rtxFmtpLineIndex] = sdpLines[rtxFmtpLineIndex].concat(appendrtxNext);\n                sdp = sdpLines.join('\\r\\n');\n            }\n\n            return sdp;\n        }\n\n        function setOpusAttributes(sdp, params) {\n            if (isMobileDevice) {\n                return sdp;\n            }\n\n            params = params || {};\n\n            var sdpLines = sdp.split('\\r\\n');\n\n            // Opus\n            var opusIndex = findLine(sdpLines, 'a=rtpmap', 'opus/48000');\n            var opusPayload;\n            if (opusIndex) {\n                opusPayload = getCodecPayloadType(sdpLines[opusIndex]);\n            }\n\n            if (!opusPayload) {\n                return sdp;\n            }\n\n            var opusFmtpLineIndex = findLine(sdpLines, 'a=fmtp:' + opusPayload.toString());\n            if (opusFmtpLineIndex === null) {\n                return sdp;\n            }\n\n            var appendOpusNext = '';\n            appendOpusNext += '; stereo=' + (typeof params.stereo != 'undefined' ? params.stereo : '1');\n            appendOpusNext += '; sprop-stereo=' + (typeof params['sprop-stereo'] != 'undefined' ? params['sprop-stereo'] : '1');\n\n            if (typeof params.maxaveragebitrate != 'undefined') {\n                appendOpusNext += '; maxaveragebitrate=' + (params.maxaveragebitrate || 128 * 1024 * 8);\n            }\n\n            if (typeof params.maxplaybackrate != 'undefined') {\n                appendOpusNext += '; maxplaybackrate=' + (params.maxplaybackrate || 128 * 1024 * 8);\n            }\n\n            if (typeof params.cbr != 'undefined') {\n                appendOpusNext += '; cbr=' + (typeof params.cbr != 'undefined' ? params.cbr : '1');\n            }\n\n            if (typeof params.useinbandfec != 'undefined') {\n                appendOpusNext += '; useinbandfec=' + params.useinbandfec;\n            }\n\n            if (typeof params.usedtx != 'undefined') {\n                appendOpusNext += '; usedtx=' + params.usedtx;\n            }\n\n            if (typeof params.maxptime != 'undefined') {\n                appendOpusNext += '\\r\\na=maxptime:' + params.maxptime;\n            }\n\n            sdpLines[opusFmtpLineIndex] = sdpLines[opusFmtpLineIndex].concat(appendOpusNext);\n\n            sdp = sdpLines.join('\\r\\n');\n            return sdp;\n        }\n\n        function preferVP9(sdp) {\n            if (sdp.indexOf('SAVPF 100 101') === -1 || sdp.indexOf('VP9/90000') === -1) {\n                return sdp;\n            }\n\n            return sdp.replace('SAVPF 100 101', 'SAVPF 101 100');\n        }\n\n        // forceStereoAudio => via webrtcexample.com\n        // requires getUserMedia => echoCancellation:false\n        function forceStereoAudio(sdp) {\n            var sdpLines = sdp.split('\\r\\n');\n            var fmtpLineIndex = null;\n            for (var i = 0; i < sdpLines.length; i++) {\n                if (sdpLines[i].search('opus/48000') !== -1) {\n                    var opusPayload = extractSdp(sdpLines[i], /:(\\d+) opus\\/48000/i);\n                    break;\n                }\n            }\n            for (var i = 0; i < sdpLines.length; i++) {\n                if (sdpLines[i].search('a=fmtp') !== -1) {\n                    var payload = extractSdp(sdpLines[i], /a=fmtp:(\\d+)/);\n                    if (payload === opusPayload) {\n                        fmtpLineIndex = i;\n                        break;\n                    }\n                }\n            }\n            if (fmtpLineIndex === null) return sdp;\n            sdpLines[fmtpLineIndex] = sdpLines[fmtpLineIndex].concat('; stereo=1; sprop-stereo=1');\n            sdp = sdpLines.join('\\r\\n');\n            return sdp;\n        }\n\n        return {\n            removeVPX: removeVPX,\n            disableNACK: disableNACK,\n            prioritize: prioritize,\n            removeNonG722: removeNonG722,\n            setApplicationSpecificBandwidth: function(sdp, bandwidth, isScreen) {\n                return setBAS(sdp, bandwidth, isScreen);\n            },\n            setVideoBitrates: function(sdp, params) {\n                return setVideoBitrates(sdp, params);\n            },\n            setOpusAttributes: function(sdp, params) {\n                return setOpusAttributes(sdp, params);\n            },\n            preferVP9: preferVP9,\n            forceStereoAudio: forceStereoAudio\n        };\n    })();\n\n    // backward compatibility\n    window.BandwidthHandler = CodecsHandler;\n\n    // OnIceCandidateHandler.js\n\n    var OnIceCandidateHandler = (function() {\n        function processCandidates(connection, icePair) {\n            var candidate = icePair.candidate;\n\n            var iceRestrictions = connection.candidates;\n            var stun = iceRestrictions.stun;\n            var turn = iceRestrictions.turn;\n\n            if (!isNull(iceRestrictions.reflexive)) {\n                stun = iceRestrictions.reflexive;\n            }\n\n            if (!isNull(iceRestrictions.relay)) {\n                turn = iceRestrictions.relay;\n            }\n\n            if (!iceRestrictions.host && !!candidate.match(/typ host/g)) {\n                return;\n            }\n\n            if (!turn && !!candidate.match(/typ relay/g)) {\n                return;\n            }\n\n            if (!stun && !!candidate.match(/typ srflx/g)) {\n                return;\n            }\n\n            var protocol = connection.iceProtocols;\n\n            if (!protocol.udp && !!candidate.match(/ udp /g)) {\n                return;\n            }\n\n            if (!protocol.tcp && !!candidate.match(/ tcp /g)) {\n                return;\n            }\n\n            if (connection.enableLogs) {\n                console.debug('Your candidate pairs:', candidate);\n            }\n\n            return {\n                candidate: candidate,\n                sdpMid: icePair.sdpMid,\n                sdpMLineIndex: icePair.sdpMLineIndex\n            };\n        }\n\n        return {\n            processCandidates: processCandidates\n        };\n    })();\n\n    // IceServersHandler.js\n\n    var IceServersHandler = (function() {\n        function getIceServers(connection) {\n            var iceServers = [];\n\n            iceServers.push(getSTUNObj('stun:stun.l.google.com:19302'));\n\n            iceServers.push(getTURNObj('stun:webrtcweb.com:7788', 'muazkh', 'muazkh')); // coTURN\n            iceServers.push(getTURNObj('turn:webrtcweb.com:7788', 'muazkh', 'muazkh')); // coTURN\n            iceServers.push(getTURNObj('turn:webrtcweb.com:8877', 'muazkh', 'muazkh')); // coTURN\n\n            iceServers.push(getTURNObj('turns:webrtcweb.com:7788', 'muazkh', 'muazkh')); // coTURN\n            iceServers.push(getTURNObj('turns:webrtcweb.com:8877', 'muazkh', 'muazkh')); // coTURN\n\n            // iceServers.push(getTURNObj('turn:webrtcweb.com:3344', 'muazkh', 'muazkh')); // resiprocate\n            // iceServers.push(getTURNObj('turn:webrtcweb.com:4433', 'muazkh', 'muazkh')); // resiprocate\n\n            // check if restund is still active: http://webrtcweb.com:4050/\n            iceServers.push(getTURNObj('stun:webrtcweb.com:4455', 'muazkh', 'muazkh')); // restund\n            iceServers.push(getTURNObj('turn:webrtcweb.com:4455', 'muazkh', 'muazkh')); // restund\n            iceServers.push(getTURNObj('turn:webrtcweb.com:5544?transport=tcp', 'muazkh', 'muazkh')); // restund\n\n            return iceServers;\n        }\n\n        function getSTUNObj(stunStr) {\n            var urlsParam = 'urls';\n            if (typeof isPluginRTC !== 'undefined') {\n                urlsParam = 'url';\n            }\n\n            var obj = {};\n            obj[urlsParam] = stunStr;\n            return obj;\n        }\n\n        function getTURNObj(turnStr, username, credential) {\n            var urlsParam = 'urls';\n            if (typeof isPluginRTC !== 'undefined') {\n                urlsParam = 'url';\n            }\n\n            var obj = {\n                username: username,\n                credential: credential\n            };\n            obj[urlsParam] = turnStr;\n            return obj;\n        }\n\n        return {\n            getIceServers: getIceServers\n        };\n    })();\n\n    // getUserMediaHandler.js\n\n    function setStreamType(constraints, stream) {\n        if (constraints.mandatory && constraints.mandatory.chromeMediaSource) {\n            stream.isScreen = true;\n        } else if (constraints.mozMediaSource || constraints.mediaSource) {\n            stream.isScreen = true;\n        } else if (constraints.video) {\n            stream.isVideo = true;\n        } else if (constraints.audio) {\n            stream.isAudio = true;\n        }\n    }\n\n    // allow users to manage this object (to support re-capturing of screen/etc.)\n    window.currentUserMediaRequest = {\n        streams: [],\n        mutex: false,\n        queueRequests: [],\n        remove: function(idInstance) {\n            this.mutex = false;\n\n            var stream = this.streams[idInstance];\n            if (!stream) {\n                return;\n            }\n\n            stream = stream.stream;\n\n            var options = stream.currentUserMediaRequestOptions;\n\n            if (this.queueRequests.indexOf(options)) {\n                delete this.queueRequests[this.queueRequests.indexOf(options)];\n                this.queueRequests = removeNullEntries(this.queueRequests);\n            }\n\n            this.streams[idInstance].stream = null;\n            delete this.streams[idInstance];\n        }\n    };\n\n    function getUserMediaHandler(options) {\n        if (currentUserMediaRequest.mutex === true) {\n            currentUserMediaRequest.queueRequests.push(options);\n            return;\n        }\n        currentUserMediaRequest.mutex = true;\n\n        // easy way to match\n        var idInstance = JSON.stringify(options.localMediaConstraints);\n\n        function streaming(stream, returnBack) {\n            setStreamType(options.localMediaConstraints, stream);\n            options.onGettingLocalMedia(stream, returnBack);\n\n            var streamEndedEvent = 'ended';\n\n            if ('oninactive' in stream) {\n                streamEndedEvent = 'inactive';\n            }\n            stream.addEventListener(streamEndedEvent, function() {\n                delete currentUserMediaRequest.streams[idInstance];\n\n                currentUserMediaRequest.mutex = false;\n                if (currentUserMediaRequest.queueRequests.indexOf(options)) {\n                    delete currentUserMediaRequest.queueRequests[currentUserMediaRequest.queueRequests.indexOf(options)];\n                    currentUserMediaRequest.queueRequests = removeNullEntries(currentUserMediaRequest.queueRequests);\n                }\n            }, false);\n\n            currentUserMediaRequest.streams[idInstance] = {\n                stream: stream\n            };\n            currentUserMediaRequest.mutex = false;\n\n            if (currentUserMediaRequest.queueRequests.length) {\n                getUserMediaHandler(currentUserMediaRequest.queueRequests.shift());\n            }\n        }\n\n        if (currentUserMediaRequest.streams[idInstance]) {\n            streaming(currentUserMediaRequest.streams[idInstance].stream, true);\n        } else {\n            if (isPluginRTC && window.PluginRTC) {\n                var mediaElement = document.createElement('video');\n                window.PluginRTC.getUserMedia({\n                    audio: true,\n                    video: true\n                }, function(stream) {\n                    stream.streamid = stream.id || getRandomString();\n                    streaming(stream);\n                }, function(error) {});\n\n                return;\n            }\n\n            var isBlackBerry = !!(/BB10|BlackBerry/i.test(navigator.userAgent || ''));\n            if (isBlackBerry || typeof navigator.mediaDevices === 'undefined' || typeof navigator.mediaDevices.getUserMedia !== 'function') {\n                navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;\n                navigator.getUserMedia(options.localMediaConstraints, function(stream) {\n                    stream.streamid = stream.streamid || stream.id || getRandomString();\n                    stream.idInstance = idInstance;\n                    streaming(stream);\n                }, function(error) {\n                    options.onLocalMediaError(error, options.localMediaConstraints);\n                });\n                return;\n            }\n\n            navigator.mediaDevices.getUserMedia(options.localMediaConstraints).then(function(stream) {\n                stream.streamid = stream.streamid || stream.id || getRandomString();\n                stream.idInstance = idInstance;\n                streaming(stream);\n            }).catch(function(error) {\n                options.onLocalMediaError(error, options.localMediaConstraints);\n            });\n        }\n    }\n\n    // StreamsHandler.js\n\n    var StreamsHandler = (function() {\n        function handleType(type) {\n            if (!type) {\n                return;\n            }\n\n            if (typeof type === 'string' || typeof type === 'undefined') {\n                return type;\n            }\n\n            if (type.audio && type.video) {\n                return null;\n            }\n\n            if (type.audio) {\n                return 'audio';\n            }\n\n            if (type.video) {\n                return 'video';\n            }\n\n            return;\n        }\n\n        function setHandlers(stream, syncAction, connection) {\n            if (!stream || !stream.addEventListener) return;\n\n            if (typeof syncAction == 'undefined' || syncAction == true) {\n                var streamEndedEvent = 'ended';\n\n                if ('oninactive' in stream) {\n                    streamEndedEvent = 'inactive';\n                }\n\n                stream.addEventListener(streamEndedEvent, function() {\n                    StreamsHandler.onSyncNeeded(this.streamid, streamEndedEvent);\n                }, false);\n            }\n\n            stream.mute = function(type, isSyncAction) {\n                type = handleType(type);\n\n                if (typeof isSyncAction !== 'undefined') {\n                    syncAction = isSyncAction;\n                }\n\n                if (typeof type == 'undefined' || type == 'audio') {\n                    stream.getAudioTracks().forEach(function(track) {\n                        track.enabled = false;\n                        connection.streamEvents[stream.streamid].isAudioMuted = true;\n                    });\n                }\n\n                if (typeof type == 'undefined' || type == 'video') {\n                    stream.getVideoTracks().forEach(function(track) {\n                        track.enabled = false;\n                    });\n                }\n\n                if (typeof syncAction == 'undefined' || syncAction == true) {\n                    StreamsHandler.onSyncNeeded(stream.streamid, 'mute', type);\n                }\n\n                connection.streamEvents[stream.streamid].muteType = type || 'both';\n\n                fireEvent(stream, 'mute', type);\n            };\n\n            stream.unmute = function(type, isSyncAction) {\n                type = handleType(type);\n\n                if (typeof isSyncAction !== 'undefined') {\n                    syncAction = isSyncAction;\n                }\n\n                graduallyIncreaseVolume();\n\n                if (typeof type == 'undefined' || type == 'audio') {\n                    stream.getAudioTracks().forEach(function(track) {\n                        track.enabled = true;\n                        connection.streamEvents[stream.streamid].isAudioMuted = false;\n                    });\n                }\n\n                if (typeof type == 'undefined' || type == 'video') {\n                    stream.getVideoTracks().forEach(function(track) {\n                        track.enabled = true;\n                    });\n\n                    // make sure that video unmute doesn't affects audio\n                    if (typeof type !== 'undefined' && type == 'video' && connection.streamEvents[stream.streamid].isAudioMuted) {\n                        (function looper(times) {\n                            if (!times) {\n                                times = 0;\n                            }\n\n                            times++;\n\n                            // check until five-seconds\n                            if (times < 100 && connection.streamEvents[stream.streamid].isAudioMuted) {\n                                stream.mute('audio');\n\n                                setTimeout(function() {\n                                    looper(times);\n                                }, 50);\n                            }\n                        })();\n                    }\n                }\n\n                if (typeof syncAction == 'undefined' || syncAction == true) {\n                    StreamsHandler.onSyncNeeded(stream.streamid, 'unmute', type);\n                }\n\n                connection.streamEvents[stream.streamid].unmuteType = type || 'both';\n\n                fireEvent(stream, 'unmute', type);\n            };\n\n            function graduallyIncreaseVolume() {\n                if (!connection.streamEvents[stream.streamid].mediaElement) {\n                    return;\n                }\n\n                var mediaElement = connection.streamEvents[stream.streamid].mediaElement;\n                mediaElement.volume = 0;\n                afterEach(200, 5, function() {\n                    try {\n                        mediaElement.volume += .20;\n                    } catch (e) {\n                        mediaElement.volume = 1;\n                    }\n                });\n            }\n        }\n\n        function afterEach(setTimeoutInteval, numberOfTimes, callback, startedTimes) {\n            startedTimes = (startedTimes || 0) + 1;\n            if (startedTimes >= numberOfTimes) return;\n\n            setTimeout(function() {\n                callback();\n                afterEach(setTimeoutInteval, numberOfTimes, callback, startedTimes);\n            }, setTimeoutInteval);\n        }\n\n        return {\n            setHandlers: setHandlers,\n            onSyncNeeded: function(streamid, action, type) {}\n        };\n    })();\n\n    // Last time updated at Nov 07, 2016, 08:32:23\n\n    // Latest file can be found here: https://cdn.webrtc-experiment.com/Screen-Capturing.js\n\n    // Muaz Khan     - www.MuazKhan.com\n    // MIT License   - www.WebRTC-Experiment.com/licence\n    // Documentation - https://github.com/muaz-khan/Chrome-Extensions/tree/master/Screen-Capturing.js\n    // Demo          - https://www.webrtc-experiment.com/Screen-Capturing/\n\n    // ___________________\n    // Screen-Capturing.js\n\n    // Listen for postMessage handler\n    // postMessage is used to exchange \"sourceId\" between chrome extension and you webpage.\n    // though, there are tons other options as well, e.g. XHR-signaling, websockets, etc.\n    window.addEventListener('message', function(event) {\n        if (event.origin != window.location.origin) {\n            return;\n        }\n\n        onMessageCallback(event.data);\n    });\n\n    // via: https://bugs.chromium.org/p/chromium/issues/detail?id=487935#c17\n    // you can capture screen on Android Chrome >= 55 with flag: \"Experimental ScreenCapture android\"\n    window.IsAndroidChrome = false;\n    try {\n        if (navigator.userAgent.toLowerCase().indexOf(\"android\") > -1 && /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor)) {\n            window.IsAndroidChrome = true;\n        }\n    } catch (e) {}\n\n    // and the function that handles received messages\n\n    function onMessageCallback(data) {\n        // \"cancel\" button is clicked\n        if (data == 'PermissionDeniedError') {\n            chromeMediaSource = 'PermissionDeniedError';\n            if (screenCallback) {\n                return screenCallback('PermissionDeniedError');\n            } else {\n                throw new Error('PermissionDeniedError: User rejected to share his screen.');\n            }\n        }\n\n        // extension notified his presence\n        if (data == 'rtcmulticonnection-extension-loaded') {\n            chromeMediaSource = 'desktop';\n        }\n\n        // extension shared temp sourceId\n        if (data.sourceId && screenCallback) {\n            sourceId = data.sourceId;\n            screenCallback(sourceId);\n        }\n    }\n\n    // global variables\n    var chromeMediaSource = 'screen';\n    var sourceId;\n    var screenCallback;\n\n    // this method can be used to check if chrome extension is installed & enabled.\n    function isChromeExtensionAvailable(callback) {\n        if (!callback) return;\n\n        if (isFirefox) return isFirefoxExtensionAvailable(callback);\n\n        if (window.IsAndroidChrome) {\n            chromeMediaSource = 'screen';\n            callback(true);\n            return;\n        }\n\n        if (chromeMediaSource == 'desktop') {\n            callback(true);\n            return;\n        }\n\n        // ask extension if it is available\n        window.postMessage('are-you-there', '*');\n\n        setTimeout(function() {\n            if (chromeMediaSource == 'screen') {\n                callback(false);\n            } else callback(true);\n        }, 2000);\n    }\n\n    function isFirefoxExtensionAvailable(callback) {\n        if (!callback) return;\n\n        if (!isFirefox) return isChromeExtensionAvailable(callback);\n\n        var isFirefoxAddonResponded = false;\n\n        function messageCallback(event) {\n            var addonMessage = event.data;\n\n            if (!addonMessage || typeof addonMessage.isScreenCapturingEnabled === 'undefined') return;\n\n            isFirefoxAddonResponded = true;\n\n            if (addonMessage.isScreenCapturingEnabled === true) {\n                callback(true);\n            } else {\n                callback(false);\n            }\n\n            window.removeEventListener(\"message\", messageCallback, false);\n        }\n\n        window.addEventListener(\"message\", messageCallback, false);\n\n        window.postMessage({\n            checkIfScreenCapturingEnabled: true,\n            domains: [document.domain]\n        }, \"*\");\n\n        setTimeout(function() {\n            if (!isFirefoxAddonResponded) {\n                callback(true); // can be old firefox extension\n            }\n        }, 2000); // wait 2-seconds-- todo: is this enough limit?\n    }\n\n    // this function can be used to get \"source-id\" from the extension\n    function getSourceId(callback, audioPlusTab) {\n        if (!callback) throw '\"callback\" parameter is mandatory.';\n        if (sourceId) {\n            callback(sourceId);\n            sourceId = null;\n            return;\n        }\n\n        screenCallback = callback;\n\n        if (!!audioPlusTab) {\n            window.postMessage('audio-plus-tab', '*');\n            return;\n        }\n        window.postMessage('get-sourceId', '*');\n    }\n\n    function getChromeExtensionStatus(extensionid, callback) {\n        if (window.IsAndroidChrome) {\n            chromeMediaSource = 'screen';\n            callback('installed-enabled');\n            return;\n        }\n\n        if (arguments.length != 2) {\n            callback = extensionid;\n            extensionid = window.RMCExtensionID || 'ajhifddimkapgcifgcodmmfdlknahffk'; // default extension-id\n        }\n\n        if (isFirefox) return callback('not-chrome');\n\n        var image = document.createElement('img');\n        image.src = 'chrome-extension://' + extensionid + '/icon.png';\n        image.onload = function() {\n            sourceId = null;\n            chromeMediaSource = 'screen';\n            window.postMessage('are-you-there', '*');\n            setTimeout(function() {\n                if (chromeMediaSource == 'screen') {\n                    callback(extensionid == extensionid ? 'installed-enabled' : 'installed-disabled');\n                } else callback('installed-enabled');\n            }, 2000);\n        };\n        image.onerror = function() {\n            callback('not-installed');\n        };\n    }\n\n    // this function explains how to use above methods/objects\n    function getScreenConstraints(callback, audioPlusTab) {\n        var firefoxScreenConstraints = {\n            mozMediaSource: 'window',\n            mediaSource: 'window',\n            width: 29999,\n            height: 8640\n        };\n\n        if (isFirefox) return callback(null, firefoxScreenConstraints);\n\n        // support recapture again & again\n        sourceId = null;\n\n        isChromeExtensionAvailable(function(isAvailable) {\n            // this statement defines getUserMedia constraints\n            // that will be used to capture content of screen\n            var screen_constraints = {\n                mandatory: {\n                    chromeMediaSource: chromeMediaSource,\n                    maxWidth: 29999,\n                    maxHeight: 8640,\n                    minFrameRate: 30,\n                    maxFrameRate: 128,\n                    minAspectRatio: 1.77 // 2.39\n                },\n                optional: []\n            };\n\n            if (window.IsAndroidChrome) {\n                // now invoking native getUserMedia API\n                callback(null, screen_constraints);\n                return;\n            }\n\n            // this statement verifies chrome extension availability\n            // if installed and available then it will invoke extension API\n            // otherwise it will fallback to command-line based screen capturing API\n            if (chromeMediaSource == 'desktop' && !sourceId) {\n                getSourceId(function() {\n                    screen_constraints.mandatory.chromeMediaSourceId = sourceId;\n                    callback(sourceId == 'PermissionDeniedError' ? sourceId : null, screen_constraints);\n                    sourceId = null;\n                }, audioPlusTab);\n                return;\n            }\n\n            // this statement sets gets 'sourceId\" and sets \"chromeMediaSourceId\"\n            if (chromeMediaSource == 'desktop') {\n                screen_constraints.mandatory.chromeMediaSourceId = sourceId;\n            }\n\n            sourceId = null;\n            chromeMediaSource = 'screen'; // maybe this line is redundant?\n            screenCallback = null;\n\n            // now invoking native getUserMedia API\n            callback(null, screen_constraints);\n        });\n    }\n\n    // TextReceiver.js & TextSender.js\n\n    function TextReceiver(connection) {\n        var content = {};\n\n        function receive(data, userid, extra) {\n            // uuid is used to uniquely identify sending instance\n            var uuid = data.uuid;\n            if (!content[uuid]) {\n                content[uuid] = [];\n            }\n\n            content[uuid].push(data.message);\n\n            if (data.last) {\n                var message = content[uuid].join('');\n                if (data.isobject) {\n                    message = JSON.parse(message);\n                }\n\n                // latency detection\n                var receivingTime = new Date().getTime();\n                var latency = receivingTime - data.sendingTime;\n\n                var e = {\n                    data: message,\n                    userid: userid,\n                    extra: extra,\n                    latency: latency\n                };\n\n                if (connection.autoTranslateText) {\n                    e.original = e.data;\n                    connection.Translator.TranslateText(e.data, function(translatedText) {\n                        e.data = translatedText;\n                        connection.onmessage(e);\n                    });\n                } else {\n                    connection.onmessage(e);\n                }\n\n                delete content[uuid];\n            }\n        }\n\n        return {\n            receive: receive\n        };\n    }\n\n    // TextSender.js\n    var TextSender = {\n        send: function(config) {\n            var connection = config.connection;\n\n            var channel = config.channel,\n                remoteUserId = config.remoteUserId,\n                initialText = config.text,\n                packetSize = connection.chunkSize || 1000,\n                textToTransfer = '',\n                isobject = false;\n\n            if (!isString(initialText)) {\n                isobject = true;\n                initialText = JSON.stringify(initialText);\n            }\n\n            // uuid is used to uniquely identify sending instance\n            var uuid = getRandomString();\n            var sendingTime = new Date().getTime();\n\n            sendText(initialText);\n\n            function sendText(textMessage, text) {\n                var data = {\n                    type: 'text',\n                    uuid: uuid,\n                    sendingTime: sendingTime\n                };\n\n                if (textMessage) {\n                    text = textMessage;\n                    data.packets = parseInt(text.length / packetSize);\n                }\n\n                if (text.length > packetSize) {\n                    data.message = text.slice(0, packetSize);\n                } else {\n                    data.message = text;\n                    data.last = true;\n                    data.isobject = isobject;\n                }\n\n                channel.send(data, remoteUserId);\n\n                textToTransfer = text.slice(data.message.length);\n\n                if (textToTransfer.length) {\n                    setTimeout(function() {\n                        sendText(null, textToTransfer);\n                    }, connection.chunkInterval || 100);\n                }\n            }\n        }\n    };\n\n    // FileProgressBarHandler.js\n\n    var FileProgressBarHandler = (function() {\n        function handle(connection) {\n            var progressHelper = {};\n\n            // www.RTCMultiConnection.org/docs/onFileStart/\n            connection.onFileStart = function(file) {\n                var div = document.createElement('div');\n                div.title = file.name;\n                div.innerHTML = '<label>0%</label> <progress></progress>';\n\n                if (file.remoteUserId) {\n                    div.innerHTML += ' (Sharing with:' + file.remoteUserId + ')';\n                }\n\n                if (!connection.filesContainer) {\n                    connection.filesContainer = document.body || document.documentElement;\n                }\n\n                connection.filesContainer.insertBefore(div, connection.filesContainer.firstChild);\n\n                if (!file.remoteUserId) {\n                    progressHelper[file.uuid] = {\n                        div: div,\n                        progress: div.querySelector('progress'),\n                        label: div.querySelector('label')\n                    };\n                    progressHelper[file.uuid].progress.max = file.maxChunks;\n                    return;\n                }\n\n                if (!progressHelper[file.uuid]) {\n                    progressHelper[file.uuid] = {};\n                }\n\n                progressHelper[file.uuid][file.remoteUserId] = {\n                    div: div,\n                    progress: div.querySelector('progress'),\n                    label: div.querySelector('label')\n                };\n                progressHelper[file.uuid][file.remoteUserId].progress.max = file.maxChunks;\n            };\n\n            // www.RTCMultiConnection.org/docs/onFileProgress/\n            connection.onFileProgress = function(chunk) {\n                var helper = progressHelper[chunk.uuid];\n                if (!helper) {\n                    return;\n                }\n                if (chunk.remoteUserId) {\n                    helper = progressHelper[chunk.uuid][chunk.remoteUserId];\n                    if (!helper) {\n                        return;\n                    }\n                }\n\n                helper.progress.value = chunk.currentPosition || chunk.maxChunks || helper.progress.max;\n                updateLabel(helper.progress, helper.label);\n            };\n\n            // www.RTCMultiConnection.org/docs/onFileEnd/\n            connection.onFileEnd = function(file) {\n                var helper = progressHelper[file.uuid];\n                if (!helper) {\n                    console.error('No such progress-helper element exist.', file);\n                    return;\n                }\n\n                if (file.remoteUserId) {\n                    helper = progressHelper[file.uuid][file.remoteUserId];\n                    if (!helper) {\n                        return;\n                    }\n                }\n\n                var div = helper.div;\n                if (file.type.indexOf('image') != -1) {\n                    div.innerHTML = '<a href=\"' + file.url + '\" download=\"' + file.name + '\">Download <strong style=\"color:red;\">' + file.name + '</strong> </a><br /><img src=\"' + file.url + '\" title=\"' + file.name + '\" style=\"max-width: 80%;\">';\n                } else {\n                    div.innerHTML = '<a href=\"' + file.url + '\" download=\"' + file.name + '\">Download <strong style=\"color:red;\">' + file.name + '</strong> </a><br /><iframe src=\"' + file.url + '\" title=\"' + file.name + '\" style=\"width: 80%;border: 0;height: inherit;margin-top:1em;\"></iframe>';\n                }\n            };\n\n            function updateLabel(progress, label) {\n                if (progress.position === -1) {\n                    return;\n                }\n\n                var position = +progress.position.toFixed(2).split('.')[1] || 100;\n                label.innerHTML = position + '%';\n            }\n        }\n\n        return {\n            handle: handle\n        };\n    })();\n\n    // TranslationHandler.js\n\n    var TranslationHandler = (function() {\n        function handle(connection) {\n            connection.autoTranslateText = false;\n            connection.language = 'en';\n            connection.googKey = 'AIzaSyCgB5hmFY74WYB-EoWkhr9cAGr6TiTHrEE';\n\n            // www.RTCMultiConnection.org/docs/Translator/\n            connection.Translator = {\n                TranslateText: function(text, callback) {\n                    // if(location.protocol === 'https:') return callback(text);\n\n                    var newScript = document.createElement('script');\n                    newScript.type = 'text/javascript';\n\n                    var sourceText = encodeURIComponent(text); // escape\n\n                    var randomNumber = 'method' + connection.token();\n                    window[randomNumber] = function(response) {\n                        if (response.data && response.data.translations[0] && callback) {\n                            callback(response.data.translations[0].translatedText);\n                            return;\n                        }\n\n                        if (response.error && response.error.message === 'Daily Limit Exceeded') {\n                            console.error('Text translation failed. Error message: \"Daily Limit Exceeded.\"');\n                            return;\n                        }\n\n                        if (response.error) {\n                            console.error(response.error.message);\n                            return;\n                        }\n\n                        console.error(response);\n                    };\n\n                    var source = 'https://www.googleapis.com/language/translate/v2?key=' + connection.googKey + '&target=' + (connection.language || 'en-US') + '&callback=window.' + randomNumber + '&q=' + sourceText;\n                    newScript.src = source;\n                    document.getElementsByTagName('head')[0].appendChild(newScript);\n                },\n                getListOfLanguages: function(callback) {\n                    var xhr = new XMLHttpRequest();\n                    xhr.onreadystatechange = function() {\n                        if (xhr.readyState == XMLHttpRequest.DONE) {\n                            var response = JSON.parse(xhr.responseText);\n\n                            if (response && response.data && response.data.languages) {\n                                callback(response.data.languages);\n                                return;\n                            }\n\n                            if (response.error && response.error.message === 'Daily Limit Exceeded') {\n                                console.error('Text translation failed. Error message: \"Daily Limit Exceeded.\"');\n                                return;\n                            }\n\n                            if (response.error) {\n                                console.error(response.error.message);\n                                return;\n                            }\n\n                            console.error(response);\n                        }\n                    }\n                    var url = 'https://www.googleapis.com/language/translate/v2/languages?key=' + connection.googKey + '&target=en';\n                    xhr.open('GET', url, true);\n                    xhr.send(null);\n                }\n            };\n        }\n\n        return {\n            handle: handle\n        };\n    })();\n\n    (function(connection) {\n        forceOptions = forceOptions || {\n            useDefaultDevices: true\n        };\n\n        connection.channel = connection.sessionid = (roomid || location.href.replace(/\\/|:|#|\\?|\\$|\\^|%|\\.|`|~|!|\\+|@|\\[|\\||]|\\|*. /g, '').split('\\n').join('').split('\\r').join('')) + '';\n\n        var mPeer = new MultiPeers(connection);\n\n        var preventDuplicateOnStreamEvents = {};\n        mPeer.onGettingLocalMedia = function(stream) {\n            if (preventDuplicateOnStreamEvents[stream.streamid]) {\n                return;\n            }\n            preventDuplicateOnStreamEvents[stream.streamid] = true;\n\n            try {\n                stream.type = 'local';\n            } catch (e) {}\n\n            connection.setStreamEndHandler(stream);\n\n            getRMCMediaElement(stream, function(mediaElement) {\n                mediaElement.id = stream.streamid;\n                mediaElement.muted = true;\n                mediaElement.volume = 0;\n\n                if (connection.attachStreams.indexOf(stream) === -1) {\n                    connection.attachStreams.push(stream);\n                }\n\n                if (typeof StreamsHandler !== 'undefined') {\n                    StreamsHandler.setHandlers(stream, true, connection);\n                }\n\n                connection.streamEvents[stream.streamid] = {\n                    stream: stream,\n                    type: 'local',\n                    mediaElement: mediaElement,\n                    userid: connection.userid,\n                    extra: connection.extra,\n                    streamid: stream.streamid,\n                    blobURL: mediaElement.src || URL.createObjectURL(stream),\n                    isAudioMuted: true\n                };\n\n                setHarkEvents(connection, connection.streamEvents[stream.streamid]);\n                setMuteHandlers(connection, connection.streamEvents[stream.streamid]);\n\n                connection.onstream(connection.streamEvents[stream.streamid]);\n            }, connection);\n        };\n\n        mPeer.onGettingRemoteMedia = function(stream, remoteUserId) {\n            try {\n                stream.type = 'remote';\n            } catch (e) {}\n\n            connection.setStreamEndHandler(stream, 'remote-stream');\n\n            getRMCMediaElement(stream, function(mediaElement) {\n                mediaElement.id = stream.streamid;\n\n                if (typeof StreamsHandler !== 'undefined') {\n                    StreamsHandler.setHandlers(stream, false, connection);\n                }\n\n                connection.streamEvents[stream.streamid] = {\n                    stream: stream,\n                    type: 'remote',\n                    userid: remoteUserId,\n                    extra: connection.peers[remoteUserId] ? connection.peers[remoteUserId].extra : {},\n                    mediaElement: mediaElement,\n                    streamid: stream.streamid,\n                    blobURL: mediaElement.src || URL.createObjectURL(stream)\n                };\n\n                setMuteHandlers(connection, connection.streamEvents[stream.streamid]);\n\n                connection.onstream(connection.streamEvents[stream.streamid]);\n            }, connection);\n        };\n\n        mPeer.onRemovingRemoteMedia = function(stream, remoteUserId) {\n            var streamEvent = connection.streamEvents[stream.streamid];\n            if (!streamEvent) {\n                streamEvent = {\n                    stream: stream,\n                    type: 'remote',\n                    userid: remoteUserId,\n                    extra: connection.peers[remoteUserId] ? connection.peers[remoteUserId].extra : {},\n                    streamid: stream.streamid,\n                    mediaElement: connection.streamEvents[stream.streamid] ? connection.streamEvents[stream.streamid].mediaElement : null\n                };\n            }\n\n            if (connection.peersBackup[streamEvent.userid]) {\n                streamEvent.extra = connection.peersBackup[streamEvent.userid].extra;\n            }\n\n            connection.onstreamended(streamEvent);\n\n            delete connection.streamEvents[stream.streamid];\n        };\n\n        mPeer.onNegotiationNeeded = function(message, remoteUserId, callback) {\n            connectSocket(function() {\n                connection.socket.emit(connection.socketMessageEvent, 'password' in message ? message : {\n                    remoteUserId: message.remoteUserId || remoteUserId,\n                    message: message,\n                    sender: connection.userid\n                }, callback || function() {});\n            });\n        };\n\n        function onUserLeft(remoteUserId) {\n            connection.deletePeer(remoteUserId);\n        }\n\n        mPeer.onUserLeft = onUserLeft;\n        mPeer.disconnectWith = function(remoteUserId, callback) {\n            if (connection.socket) {\n                connection.socket.emit('disconnect-with', remoteUserId, callback || function() {});\n            }\n\n            connection.deletePeer(remoteUserId);\n        };\n\n        connection.broadcasters = [];\n\n        connection.socketOptions = {\n            // 'force new connection': true, // For SocketIO version < 1.0\n            // 'forceNew': true, // For SocketIO version >= 1.0\n            'transport': 'polling' // fixing transport:unknown issues\n        };\n\n        function connectSocket(connectCallback) {\n            connection.socketAutoReConnect = true;\n\n            if (connection.socket) { // todo: check here readySate/etc. to make sure socket is still opened\n                if (connectCallback) {\n                    connectCallback(connection.socket);\n                }\n                return;\n            }\n\n            if (typeof SocketConnection === 'undefined') {\n                if (typeof FirebaseConnection !== 'undefined') {\n                    window.SocketConnection = FirebaseConnection;\n                } else if (typeof PubNubConnection !== 'undefined') {\n                    window.SocketConnection = PubNubConnection;\n                } else {\n                    throw 'SocketConnection.js seems missed.';\n                }\n            }\n\n            new SocketConnection(connection, function(s) {\n                if (connectCallback) {\n                    connectCallback(connection.socket);\n                }\n            });\n        }\n\n        connection.openOrJoin = function(localUserid, password) {\n            connection.checkPresence(localUserid, function(isRoomExists, roomid) {\n                if (typeof password === 'function') {\n                    password(isRoomExists, roomid);\n                    password = null;\n                }\n\n                if (isRoomExists) {\n                    connection.sessionid = roomid;\n\n                    var localPeerSdpConstraints = false;\n                    var remotePeerSdpConstraints = false;\n                    var isOneWay = !!connection.session.oneway;\n                    var isDataOnly = isData(connection.session);\n\n                    remotePeerSdpConstraints = {\n                        OfferToReceiveAudio: connection.sdpConstraints.mandatory.OfferToReceiveAudio,\n                        OfferToReceiveVideo: connection.sdpConstraints.mandatory.OfferToReceiveVideo\n                    }\n\n                    localPeerSdpConstraints = {\n                        OfferToReceiveAudio: isOneWay ? !!connection.session.audio : connection.sdpConstraints.mandatory.OfferToReceiveAudio,\n                        OfferToReceiveVideo: isOneWay ? !!connection.session.video || !!connection.session.screen : connection.sdpConstraints.mandatory.OfferToReceiveVideo\n                    }\n\n                    var connectionDescription = {\n                        remoteUserId: connection.sessionid,\n                        message: {\n                            newParticipationRequest: true,\n                            isOneWay: isOneWay,\n                            isDataOnly: isDataOnly,\n                            localPeerSdpConstraints: localPeerSdpConstraints,\n                            remotePeerSdpConstraints: remotePeerSdpConstraints\n                        },\n                        sender: connection.userid,\n                        password: password || false\n                    };\n\n                    beforeJoin(connectionDescription.message, function() {\n                        mPeer.onNegotiationNeeded(connectionDescription);\n                    });\n                    return;\n                }\n\n                var oldUserId = connection.userid;\n                connection.userid = connection.sessionid = localUserid || connection.sessionid;\n                connection.userid += '';\n\n                connection.socket.emit('changed-uuid', connection.userid);\n\n                if (password) {\n                    connection.socket.emit('set-password', password);\n                }\n\n                connection.isInitiator = true;\n\n                if (isData(connection.session)) {\n                    return;\n                }\n\n                connection.captureUserMedia();\n            });\n        };\n\n        connection.open = function(localUserid, isPublicModerator) {\n            var oldUserId = connection.userid;\n            connection.userid = connection.sessionid = localUserid || connection.sessionid;\n            connection.userid += '';\n\n            connection.isInitiator = true;\n\n            connectSocket(function() {\n                connection.socket.emit('changed-uuid', connection.userid);\n\n                if (isPublicModerator == true) {\n                    connection.becomePublicModerator();\n                }\n            });\n\n            if (isData(connection.session)) {\n                if (typeof isPublicModerator === 'function') {\n                    isPublicModerator();\n                }\n                return;\n            }\n\n            connection.captureUserMedia(typeof isPublicModerator === 'function' ? isPublicModerator : null);\n        };\n\n        connection.becomePublicModerator = function() {\n            if (!connection.isInitiator) return;\n            connection.socket.emit('become-a-public-moderator');\n        };\n\n        connection.dontMakeMeModerator = function() {\n            connection.socket.emit('dont-make-me-moderator');\n        };\n\n        connection.deletePeer = function(remoteUserId) {\n            if (!remoteUserId) {\n                return;\n            }\n\n            var eventObject = {\n                userid: remoteUserId,\n                extra: connection.peers[remoteUserId] ? connection.peers[remoteUserId].extra : {}\n            };\n\n            if (connection.peersBackup[eventObject.userid]) {\n                eventObject.extra = connection.peersBackup[eventObject.userid].extra;\n            }\n\n            connection.onleave(eventObject);\n\n            if (!!connection.peers[remoteUserId]) {\n                connection.peers[remoteUserId].streams.forEach(function(stream) {\n                    stream.stop();\n                });\n\n                var peer = connection.peers[remoteUserId].peer;\n                if (peer && peer.iceConnectionState !== 'closed') {\n                    try {\n                        peer.close();\n                    } catch (e) {}\n                }\n\n                if (connection.peers[remoteUserId]) {\n                    connection.peers[remoteUserId].peer = null;\n                    delete connection.peers[remoteUserId];\n                }\n            }\n\n            if (connection.broadcasters.indexOf(remoteUserId) !== -1) {\n                var newArray = [];\n                connection.broadcasters.forEach(function(broadcaster) {\n                    if (broadcaster !== remoteUserId) {\n                        newArray.push(broadcaster);\n                    }\n                });\n                connection.broadcasters = newArray;\n                keepNextBroadcasterOnServer();\n            }\n        }\n\n        connection.rejoin = function(connectionDescription) {\n            if (connection.isInitiator || !connectionDescription || !Object.keys(connectionDescription).length) {\n                return;\n            }\n\n            var extra = {};\n\n            if (connection.peers[connectionDescription.remoteUserId]) {\n                extra = connection.peers[connectionDescription.remoteUserId].extra;\n                connection.deletePeer(connectionDescription.remoteUserId);\n            }\n\n            if (connectionDescription && connectionDescription.remoteUserId) {\n                connection.join(connectionDescription.remoteUserId);\n\n                connection.onReConnecting({\n                    userid: connectionDescription.remoteUserId,\n                    extra: extra\n                });\n            }\n        };\n\n        connection.join = connection.connect = function(remoteUserId, options) {\n            connection.sessionid = (remoteUserId ? remoteUserId.sessionid || remoteUserId.remoteUserId || remoteUserId : false) || connection.sessionid;\n            connection.sessionid += '';\n\n            var localPeerSdpConstraints = false;\n            var remotePeerSdpConstraints = false;\n            var isOneWay = false;\n            var isDataOnly = false;\n\n            if ((remoteUserId && remoteUserId.session) || !remoteUserId || typeof remoteUserId === 'string') {\n                var session = remoteUserId ? remoteUserId.session || connection.session : connection.session;\n\n                isOneWay = !!session.oneway;\n                isDataOnly = isData(session);\n\n                remotePeerSdpConstraints = {\n                    OfferToReceiveAudio: connection.sdpConstraints.mandatory.OfferToReceiveAudio,\n                    OfferToReceiveVideo: connection.sdpConstraints.mandatory.OfferToReceiveVideo\n                };\n\n                localPeerSdpConstraints = {\n                    OfferToReceiveAudio: isOneWay ? !!connection.session.audio : connection.sdpConstraints.mandatory.OfferToReceiveAudio,\n                    OfferToReceiveVideo: isOneWay ? !!connection.session.video || !!connection.session.screen : connection.sdpConstraints.mandatory.OfferToReceiveVideo\n                };\n            }\n\n            options = options || {};\n\n            var cb = function() {};\n            if (typeof options === 'function') {\n                cb = options;\n                options = {};\n            }\n\n            if (typeof options.localPeerSdpConstraints !== 'undefined') {\n                localPeerSdpConstraints = options.localPeerSdpConstraints;\n            }\n\n            if (typeof options.remotePeerSdpConstraints !== 'undefined') {\n                remotePeerSdpConstraints = options.remotePeerSdpConstraints;\n            }\n\n            if (typeof options.isOneWay !== 'undefined') {\n                isOneWay = options.isOneWay;\n            }\n\n            if (typeof options.isDataOnly !== 'undefined') {\n                isDataOnly = options.isDataOnly;\n            }\n\n            var connectionDescription = {\n                remoteUserId: connection.sessionid,\n                message: {\n                    newParticipationRequest: true,\n                    isOneWay: isOneWay,\n                    isDataOnly: isDataOnly,\n                    localPeerSdpConstraints: localPeerSdpConstraints,\n                    remotePeerSdpConstraints: remotePeerSdpConstraints\n                },\n                sender: connection.userid,\n                password: false\n            };\n\n            beforeJoin(connectionDescription.message, function() {\n                connectSocket(function() {\n                    if (!!connection.peers[connection.sessionid]) {\n                        // on socket disconnect & reconnect\n                        return;\n                    }\n\n                    mPeer.onNegotiationNeeded(connectionDescription);\n                    cb();\n                });\n            });\n            return connectionDescription;\n        };\n\n        function beforeJoin(userPreferences, callback) {\n            if (connection.dontCaptureUserMedia || userPreferences.isDataOnly) {\n                callback();\n                return;\n            }\n\n            var localMediaConstraints = {};\n\n            if (userPreferences.localPeerSdpConstraints.OfferToReceiveAudio) {\n                localMediaConstraints.audio = connection.mediaConstraints.audio;\n            }\n\n            if (userPreferences.localPeerSdpConstraints.OfferToReceiveVideo) {\n                localMediaConstraints.video = connection.mediaConstraints.video;\n            }\n\n            var session = userPreferences.session || connection.session;\n\n            if (session.oneway && session.audio !== 'two-way' && session.video !== 'two-way' && session.screen !== 'two-way') {\n                callback();\n                return;\n            }\n\n            if (session.oneway && session.audio && session.audio === 'two-way') {\n                session = {\n                    audio: true\n                };\n            }\n\n            if (session.audio || session.video || session.screen) {\n                if (session.screen) {\n                    connection.getScreenConstraints(function(error, screen_constraints) {\n                        connection.invokeGetUserMedia({\n                            audio: isAudioPlusTab(connection) ? getAudioScreenConstraints(screen_constraints) : false,\n                            video: screen_constraints,\n                            isScreen: true\n                        }, (session.audio || session.video) && !isAudioPlusTab(connection) ? connection.invokeGetUserMedia(null, callback) : callback);\n                    });\n                } else if (session.audio || session.video) {\n                    connection.invokeGetUserMedia(null, callback, session);\n                }\n            }\n        }\n\n        connection.connectWithAllParticipants = function(remoteUserId) {\n            mPeer.onNegotiationNeeded('connectWithAllParticipants', remoteUserId || connection.sessionid);\n        };\n\n        connection.removeFromBroadcastersList = function(remoteUserId) {\n            mPeer.onNegotiationNeeded('removeFromBroadcastersList', remoteUserId || connection.sessionid);\n\n            connection.peers.getAllParticipants(remoteUserId || connection.sessionid).forEach(function(participant) {\n                mPeer.onNegotiationNeeded('dropPeerConnection', participant);\n                connection.deletePeer(participant);\n            });\n\n            connection.attachStreams.forEach(function(stream) {\n                stream.stop();\n            });\n        };\n\n        connection.getUserMedia = connection.captureUserMedia = function(callback, sessionForced) {\n            callback = callback || function() {};\n            var session = sessionForced || connection.session;\n\n            if (connection.dontCaptureUserMedia || isData(session)) {\n                callback();\n                return;\n            }\n\n            if (session.audio || session.video || session.screen) {\n                if (session.screen) {\n                    connection.getScreenConstraints(function(error, screen_constraints) {\n                        if (error) {\n                            throw error;\n                        }\n\n                        connection.invokeGetUserMedia({\n                            audio: isAudioPlusTab(connection) ? getAudioScreenConstraints(screen_constraints) : false,\n                            video: screen_constraints,\n                            isScreen: true\n                        }, function(stream) {\n                            if ((session.audio || session.video) && !isAudioPlusTab(connection)) {\n                                var nonScreenSession = {};\n                                for (var s in session) {\n                                    if (s !== 'screen') {\n                                        nonScreenSession[s] = session[s];\n                                    }\n                                }\n                                connection.invokeGetUserMedia(sessionForced, callback, nonScreenSession);\n                                return;\n                            }\n                            callback(stream);\n                        });\n                    });\n                } else if (session.audio || session.video) {\n                    connection.invokeGetUserMedia(sessionForced, callback, session);\n                }\n            }\n        };\n\n        function beforeUnload(shiftModerationControlOnLeave, dontCloseSocket) {\n            if (!connection.closeBeforeUnload) {\n                return;\n            }\n\n            if (connection.isInitiator === true) {\n                connection.dontMakeMeModerator();\n            }\n\n            connection.peers.getAllParticipants().forEach(function(participant) {\n                mPeer.onNegotiationNeeded({\n                    userLeft: true\n                }, participant);\n\n                if (connection.peers[participant] && connection.peers[participant].peer) {\n                    connection.peers[participant].peer.close();\n                }\n\n                delete connection.peers[participant];\n            });\n\n            if (!dontCloseSocket) {\n                connection.closeSocket();\n            }\n\n            connection.broadcasters = [];\n            connection.isInitiator = false;\n        }\n\n        connection.closeBeforeUnload = true;\n        window.addEventListener('beforeunload', beforeUnload, false);\n\n        connection.userid = getRandomString();\n        connection.changeUserId = function(newUserId, callback) {\n            callback = callback || function() {};\n            connection.userid = newUserId || getRandomString();\n            connection.socket.emit('changed-uuid', connection.userid, callback);\n        };\n\n        connection.extra = {};\n        connection.attachStreams = [];\n\n        connection.session = {\n            audio: true,\n            video: true\n        };\n\n        connection.enableFileSharing = false;\n\n        // all values in kbps\n        connection.bandwidth = {\n            screen: 512,\n            audio: 128,\n            video: 512\n        };\n\n        connection.codecs = {\n            audio: 'opus',\n            video: 'VP9'\n        };\n\n        connection.processSdp = function(sdp) {\n            if (isMobileDevice || isFirefox) {\n                return sdp;\n            }\n\n            sdp = CodecsHandler.setApplicationSpecificBandwidth(sdp, connection.bandwidth, !!connection.session.screen);\n            sdp = CodecsHandler.setVideoBitrates(sdp, {\n                min: connection.bandwidth.video * 8 * 1024,\n                max: connection.bandwidth.video * 8 * 1024\n            });\n            sdp = CodecsHandler.setOpusAttributes(sdp, {\n                maxaveragebitrate: connection.bandwidth.audio * 8 * 1024,\n                maxplaybackrate: connection.bandwidth.audio * 8 * 1024,\n                stereo: 1,\n                maxptime: 3\n            });\n\n            if (connection.codecs.video === 'VP9') {\n                sdp = CodecsHandler.preferVP9(sdp);\n            }\n\n            if (connection.codecs.video === 'H264') {\n                sdp = CodecsHandler.removeVPX(sdp);\n            }\n\n            if (connection.codecs.audio === 'G722') {\n                sdp = CodecsHandler.removeNonG722(sdp);\n            }\n\n            return sdp;\n        };\n\n        if (typeof CodecsHandler !== 'undefined') {\n            connection.BandwidthHandler = connection.CodecsHandler = CodecsHandler;\n        }\n\n        connection.mediaConstraints = {\n            audio: {\n                mandatory: {},\n                optional: [{\n                    bandwidth: connection.bandwidth.audio * 8 * 1024 || 128 * 8 * 1024\n                }]\n            },\n            video: {\n                mandatory: {},\n                optional: [{\n                    bandwidth: connection.bandwidth.video * 8 * 1024 || 128 * 8 * 1024\n                }, {\n                    facingMode: 'user'\n                }]\n            }\n        };\n\n        if (isFirefox) {\n            connection.mediaConstraints = {\n                audio: true,\n                video: true\n            };\n        }\n\n        if (!forceOptions.useDefaultDevices && !isMobileDevice) {\n            DetectRTC.load(function() {\n                var lastAudioDevice, lastVideoDevice;\n                // it will force RTCMultiConnection to capture last-devices\n                // i.e. if external microphone is attached to system, we should prefer it over built-in devices.\n                DetectRTC.MediaDevices.forEach(function(device) {\n                    if (device.kind === 'audioinput' && connection.mediaConstraints.audio !== false) {\n                        lastAudioDevice = device;\n                    }\n\n                    if (device.kind === 'videoinput' && connection.mediaConstraints.video !== false) {\n                        lastVideoDevice = device;\n                    }\n                });\n\n                if (lastAudioDevice) {\n                    if (isFirefox) {\n                        if (connection.mediaConstraints.audio !== true) {\n                            connection.mediaConstraints.audio.deviceId = lastAudioDevice.id;\n                        } else {\n                            connection.mediaConstraints.audio = {\n                                deviceId: lastAudioDevice.id\n                            }\n                        }\n                        return;\n                    }\n\n                    if (connection.mediaConstraints.audio == true) {\n                        connection.mediaConstraints.audio = {\n                            mandatory: {},\n                            optional: []\n                        }\n                    }\n\n                    if (!connection.mediaConstraints.audio.optional) {\n                        connection.mediaConstraints.audio.optional = [];\n                    }\n\n                    var optional = [{\n                        sourceId: lastAudioDevice.id\n                    }];\n\n                    connection.mediaConstraints.audio.optional = optional.concat(connection.mediaConstraints.audio.optional);\n                }\n\n                if (lastVideoDevice) {\n                    if (isFirefox) {\n                        if (connection.mediaConstraints.video !== true) {\n                            connection.mediaConstraints.video.deviceId = lastVideoDevice.id;\n                        } else {\n                            connection.mediaConstraints.video = {\n                                deviceId: lastVideoDevice.id\n                            }\n                        }\n                        return;\n                    }\n\n                    if (connection.mediaConstraints.video == true) {\n                        connection.mediaConstraints.video = {\n                            mandatory: {},\n                            optional: []\n                        }\n                    }\n\n                    if (!connection.mediaConstraints.video.optional) {\n                        connection.mediaConstraints.video.optional = [];\n                    }\n\n                    var optional = [{\n                        sourceId: lastVideoDevice.id\n                    }];\n\n                    connection.mediaConstraints.video.optional = optional.concat(connection.mediaConstraints.video.optional);\n                }\n            });\n        }\n\n        connection.sdpConstraints = {\n            mandatory: {\n                OfferToReceiveAudio: true,\n                OfferToReceiveVideo: true\n            },\n            optional: [{\n                VoiceActivityDetection: false\n            }]\n        };\n\n        connection.rtcpMuxPolicy = 'negotiate'; // or \"required\"\n        connection.iceTransportPolicy = null; // \"relay\" or \"all\"\n        connection.optionalArgument = {\n            optional: [{\n                DtlsSrtpKeyAgreement: true\n            }, {\n                googImprovedWifiBwe: true\n            }, {\n                googScreencastMinBitrate: 300\n            }, {\n                googIPv6: true\n            }, {\n                googDscp: true\n            }, {\n                googCpuUnderuseThreshold: 55\n            }, {\n                googCpuOveruseThreshold: 85\n            }, {\n                googSuspendBelowMinBitrate: true\n            }, {\n                googCpuOveruseDetection: true\n            }],\n            mandatory: {}\n        };\n\n        connection.iceServers = IceServersHandler.getIceServers(connection);\n\n        connection.candidates = {\n            host: true,\n            stun: true,\n            turn: true\n        };\n\n        connection.iceProtocols = {\n            tcp: true,\n            udp: true\n        };\n\n        // EVENTs\n        connection.onopen = function(event) {\n            if (!!connection.enableLogs) {\n                console.info('Data connection has been opened between you & ', event.userid);\n            }\n        };\n\n        connection.onclose = function(event) {\n            if (!!connection.enableLogs) {\n                console.warn('Data connection has been closed between you & ', event.userid);\n            }\n        };\n\n        connection.onerror = function(error) {\n            if (!!connection.enableLogs) {\n                console.error(error.userid, 'data-error', error);\n            }\n        };\n\n        connection.onmessage = function(event) {\n            if (!!connection.enableLogs) {\n                console.debug('data-message', event.userid, event.data);\n            }\n        };\n\n        connection.send = function(data, remoteUserId) {\n            connection.peers.send(data, remoteUserId);\n        };\n\n        connection.close = connection.disconnect = connection.leave = function() {\n            beforeUnload(false, true);\n        };\n\n        connection.closeEntireSession = function(callback) {\n            callback = callback || function() {};\n            connection.socket.emit('close-entire-session', function looper() {\n                if (connection.getAllParticipants().length) {\n                    setTimeout(looper, 100);\n                    return;\n                }\n\n                connection.onEntireSessionClosed({\n                    sessionid: connection.sessionid,\n                    userid: connection.userid,\n                    extra: connection.extra\n                });\n\n                connection.changeUserId(null, function() {\n                    connection.close();\n                    callback();\n                });\n            });\n        };\n\n        connection.onEntireSessionClosed = function(event) {\n            if (!connection.enableLogs) return;\n            console.info('Entire session is closed: ', event.sessionid, event.extra);\n        };\n\n        connection.onstream = function(e) {\n            var parentNode = connection.videosContainer;\n            parentNode.insertBefore(e.mediaElement, parentNode.firstChild);\n            e.mediaElement.play();\n            setTimeout(function() {\n                e.mediaElement.play();\n            }, 5000);\n        };\n\n        connection.onstreamended = function(e) {\n            if (!e.mediaElement) {\n                e.mediaElement = document.getElementById(e.streamid);\n            }\n\n            if (!e.mediaElement || !e.mediaElement.parentNode) {\n                return;\n            }\n\n            e.mediaElement.parentNode.removeChild(e.mediaElement);\n        };\n\n        connection.direction = 'many-to-many';\n\n        connection.removeStream = function(streamid, remoteUserId) {\n            var stream;\n            connection.attachStreams.forEach(function(localStream) {\n                if (localStream.id === streamid) {\n                    stream = localStream;\n                }\n            });\n\n            if (!stream) {\n                console.warn('No such stream exist.', streamid);\n                return;\n            }\n\n            connection.peers.getAllParticipants().forEach(function(participant) {\n                if (remoteUserId && participant !== remoteUserId) {\n                    return;\n                }\n\n                var user = connection.peers[participant];\n                try {\n                    user.peer.removeStream(stream);\n                } catch (e) {}\n            });\n\n            connection.renegotiate();\n        };\n\n        connection.addStream = function(session, remoteUserId) {\n            if (!!session.getAudioTracks) {\n                if (connection.attachStreams.indexOf(session) === -1) {\n                    if (!session.streamid) {\n                        session.streamid = session.id;\n                    }\n\n                    connection.attachStreams.push(session);\n                }\n                connection.renegotiate(remoteUserId);\n                return;\n            }\n\n            if (isData(session)) {\n                connection.renegotiate(remoteUserId);\n                return;\n            }\n\n            if (session.audio || session.video || session.screen) {\n                if (session.screen) {\n                    connection.getScreenConstraints(function(error, screen_constraints) {\n                        if (error) {\n                            if (error === 'PermissionDeniedError') {\n                                if (session.streamCallback) {\n                                    session.streamCallback(null);\n                                }\n                                if (connection.enableLogs) {\n                                    console.error('User rejected to share his screen.');\n                                }\n                                return;\n                            }\n                            return alert(error);\n                        }\n\n                        connection.invokeGetUserMedia({\n                            audio: isAudioPlusTab(connection) ? getAudioScreenConstraints(screen_constraints) : false,\n                            video: screen_constraints,\n                            isScreen: true\n                        }, (session.audio || session.video) && !isAudioPlusTab(connection) ? connection.invokeGetUserMedia(null, gumCallback) : gumCallback);\n                    });\n                } else if (session.audio || session.video) {\n                    connection.invokeGetUserMedia(null, gumCallback);\n                }\n            }\n\n            function gumCallback(stream) {\n                if (session.streamCallback) {\n                    session.streamCallback(stream);\n                }\n\n                connection.renegotiate(remoteUserId);\n            }\n        };\n\n        connection.invokeGetUserMedia = function(localMediaConstraints, callback, session) {\n            if (!session) {\n                session = connection.session;\n            }\n\n            if (!localMediaConstraints) {\n                localMediaConstraints = connection.mediaConstraints;\n            }\n\n            getUserMediaHandler({\n                onGettingLocalMedia: function(stream) {\n                    var videoConstraints = localMediaConstraints.video;\n                    if (videoConstraints) {\n                        if (videoConstraints.mediaSource || videoConstraints.mozMediaSource) {\n                            stream.isScreen = true;\n                        } else if (videoConstraints.mandatory && videoConstraints.mandatory.chromeMediaSource) {\n                            stream.isScreen = true;\n                        }\n                    }\n\n                    if (!stream.isScreen) {\n                        stream.isVideo = stream.getVideoTracks().length;\n                        stream.isAudio = !stream.isVideo && stream.getAudioTracks().length;\n                    }\n\n                    mPeer.onGettingLocalMedia(stream);\n\n                    if (callback) {\n                        callback(stream);\n                    }\n                },\n                onLocalMediaError: function(error, constraints) {\n                    mPeer.onLocalMediaError(error, constraints);\n                },\n                localMediaConstraints: localMediaConstraints || {\n                    audio: session.audio ? localMediaConstraints.audio : false,\n                    video: session.video ? localMediaConstraints.video : false\n                }\n            });\n        };\n\n        function applyConstraints(stream, mediaConstraints) {\n            if (!stream) {\n                if (!!connection.enableLogs) {\n                    console.error('No stream to applyConstraints.');\n                }\n                return;\n            }\n\n            if (mediaConstraints.audio) {\n                stream.getAudioTracks().forEach(function(track) {\n                    track.applyConstraints(mediaConstraints.audio);\n                });\n            }\n\n            if (mediaConstraints.video) {\n                stream.getVideoTracks().forEach(function(track) {\n                    track.applyConstraints(mediaConstraints.video);\n                });\n            }\n        }\n\n        connection.applyConstraints = function(mediaConstraints, streamid) {\n            if (!MediaStreamTrack || !MediaStreamTrack.prototype.applyConstraints) {\n                alert('track.applyConstraints is NOT supported in your browser.');\n                return;\n            }\n\n            if (streamid) {\n                var stream;\n                if (connection.streamEvents[streamid]) {\n                    stream = connection.streamEvents[streamid].stream;\n                }\n                applyConstraints(stream, mediaConstraints);\n                return;\n            }\n\n            connection.attachStreams.forEach(function(stream) {\n                applyConstraints(stream, mediaConstraints);\n            });\n        };\n\n        function replaceTrack(track, remoteUserId, isVideoTrack) {\n            if (remoteUserId) {\n                mPeer.replaceTrack(track, remoteUserId, isVideoTrack);\n                return;\n            }\n\n            connection.peers.getAllParticipants().forEach(function(participant) {\n                mPeer.replaceTrack(track, participant, isVideoTrack);\n            });\n        }\n\n        connection.replaceTrack = function(session, remoteUserId, isVideoTrack) {\n            session = session || {};\n\n            if (!RTCPeerConnection.prototype.getSenders) {\n                connection.addStream(session);\n                return;\n            }\n\n            if (session instanceof MediaStreamTrack) {\n                replaceTrack(session, remoteUserId, isVideoTrack);\n                return;\n            }\n\n            if (session instanceof MediaStream) {\n                if (session.getVideoTracks().length) {\n                    replaceTrack(session.getVideoTracks()[0], remoteUserId, true);\n                }\n\n                if (session.getAudioTracks().length) {\n                    replaceTrack(session.getAudioTracks()[0], remoteUserId, false);\n                }\n                return;\n            }\n\n            if (isData(session)) {\n                throw 'connection.replaceTrack requires audio and/or video and/or screen.';\n                return;\n            }\n\n            if (session.audio || session.video || session.screen) {\n                if (session.screen) {\n                    connection.getScreenConstraints(function(error, screen_constraints) {\n                        if (error) {\n                            return alert(error);\n                        }\n\n                        connection.invokeGetUserMedia({\n                            audio: isAudioPlusTab(connection) ? getAudioScreenConstraints(screen_constraints) : false,\n                            video: screen_constraints,\n                            isScreen: true\n                        }, (session.audio || session.video) && !isAudioPlusTab(connection) ? connection.invokeGetUserMedia(null, gumCallback) : gumCallback);\n                    });\n                } else if (session.audio || session.video) {\n                    connection.invokeGetUserMedia(null, gumCallback);\n                }\n            }\n\n            function gumCallback(stream) {\n                connection.replaceTrack(stream, remoteUserId, isVideoTrack || session.video || session.screen);\n            }\n        };\n\n        connection.resetTrack = function(remoteUsersIds, isVideoTrack) {\n            if (!remoteUsersIds) {\n                remoteUsersIds = connection.getAllParticipants();\n            }\n\n            if (typeof remoteUsersIds == 'string') {\n                remoteUsersIds = [remoteUsersIds];\n            }\n\n            remoteUsersIds.forEach(function(participant) {\n                var peer = connection.peers[participant].peer;\n\n                if ((typeof isVideoTrack === 'undefined' || isVideoTrack === true) && peer.lastVideoTrack) {\n                    connection.replaceTrack(peer.lastVideoTrack, participant, true);\n                }\n\n                if ((typeof isVideoTrack === 'undefined' || isVideoTrack === false) && peer.lastAudioTrack) {\n                    connection.replaceTrack(peer.lastAudioTrack, participant, false);\n                }\n            });\n        };\n\n        connection.renegotiate = function(remoteUserId) {\n            if (remoteUserId) {\n                mPeer.renegotiatePeer(remoteUserId);\n                return;\n            }\n\n            connection.peers.getAllParticipants().forEach(function(participant) {\n                mPeer.renegotiatePeer(participant);\n            });\n        };\n\n        connection.setStreamEndHandler = function(stream, isRemote) {\n            if (!stream || !stream.addEventListener) return;\n\n            isRemote = !!isRemote;\n\n            if (stream.alreadySetEndHandler) {\n                return;\n            }\n            stream.alreadySetEndHandler = true;\n\n            var streamEndedEvent = 'ended';\n\n            if ('oninactive' in stream) {\n                streamEndedEvent = 'inactive';\n            }\n\n            stream.addEventListener(streamEndedEvent, function() {\n                if (stream.idInstance) {\n                    currentUserMediaRequest.remove(stream.idInstance);\n                }\n\n                if (!isRemote) {\n                    // reset attachStreams\n                    var streams = [];\n                    connection.attachStreams.forEach(function(s) {\n                        if (s.id != stream.id) {\n                            streams.push(s);\n                        }\n                    });\n                    connection.attachStreams = streams;\n                }\n\n                // connection.renegotiate();\n\n                var streamEvent = connection.streamEvents[stream.streamid];\n                if (!streamEvent) {\n                    streamEvent = {\n                        stream: stream,\n                        streamid: stream.streamid,\n                        type: isRemote ? 'remote' : 'local',\n                        userid: connection.userid,\n                        extra: connection.extra,\n                        mediaElement: connection.streamEvents[stream.streamid] ? connection.streamEvents[stream.streamid].mediaElement : null\n                    };\n                }\n\n                if (isRemote && connection.peers[streamEvent.userid]) {\n                    // reset remote \"streams\"\n                    var peer = connection.peers[streamEvent.userid].peer;\n                    var streams = [];\n                    peer.getRemoteStreams().forEach(function(s) {\n                        if (s.id != stream.id) {\n                            streams.push(s);\n                        }\n                    });\n                    connection.peers[streamEvent.userid].streams = streams;\n                }\n\n                if (streamEvent.userid === connection.userid && streamEvent.type === 'remote') {\n                    return;\n                }\n\n                if (connection.peersBackup[streamEvent.userid]) {\n                    streamEvent.extra = connection.peersBackup[streamEvent.userid].extra;\n                }\n\n                connection.onstreamended(streamEvent);\n\n                delete connection.streamEvents[stream.streamid];\n            }, false);\n        };\n\n        connection.onMediaError = function(error, constraints) {\n            if (!!connection.enableLogs) {\n                console.error(error, constraints);\n            }\n        };\n\n        connection.addNewBroadcaster = function(broadcasterId, userPreferences) {\n            if (connection.socket.isIO) {\n                return;\n            }\n\n            if (connection.broadcasters.length) {\n                setTimeout(function() {\n                    mPeer.connectNewParticipantWithAllBroadcasters(broadcasterId, userPreferences, connection.broadcasters.join('|-,-|'));\n                }, 10 * 1000);\n            }\n\n            if (!connection.session.oneway && !connection.session.broadcast && connection.direction === 'many-to-many' && connection.broadcasters.indexOf(broadcasterId) === -1) {\n                connection.broadcasters.push(broadcasterId);\n                keepNextBroadcasterOnServer();\n            }\n        };\n\n        connection.autoCloseEntireSession = false;\n\n        function keepNextBroadcasterOnServer() {\n            if (!connection.isInitiator) return;\n\n            if (connection.session.oneway || connection.session.broadcast || connection.direction !== 'many-to-many') {\n                return;\n            }\n\n            var firstBroadcaster = connection.broadcasters[0];\n            var otherBroadcasters = [];\n            connection.broadcasters.forEach(function(broadcaster) {\n                if (broadcaster !== firstBroadcaster) {\n                    otherBroadcasters.push(broadcaster);\n                }\n            });\n\n            if (connection.autoCloseEntireSession) return;\n            connection.shiftModerationControl(firstBroadcaster, otherBroadcasters, true);\n        };\n\n        connection.filesContainer = connection.videosContainer = document.body || document.documentElement;\n        connection.isInitiator = false;\n\n        connection.shareFile = mPeer.shareFile;\n        if (typeof FileProgressBarHandler !== 'undefined') {\n            FileProgressBarHandler.handle(connection);\n        }\n\n        if (typeof TranslationHandler !== 'undefined') {\n            TranslationHandler.handle(connection);\n        }\n\n        connection.token = getRandomString;\n\n        connection.onNewParticipant = function(participantId, userPreferences) {\n            connection.acceptParticipationRequest(participantId, userPreferences);\n        };\n\n        connection.acceptParticipationRequest = function(participantId, userPreferences) {\n            if (userPreferences.successCallback) {\n                userPreferences.successCallback();\n                delete userPreferences.successCallback;\n            }\n\n            mPeer.createNewPeer(participantId, userPreferences);\n        };\n\n        connection.onShiftedModerationControl = function(sender, existingBroadcasters) {\n            connection.acceptModerationControl(sender, existingBroadcasters);\n        };\n\n        connection.acceptModerationControl = function(sender, existingBroadcasters) {\n            connection.isInitiator = true; // NEW initiator!\n\n            connection.broadcasters = existingBroadcasters;\n            connection.peers.getAllParticipants().forEach(function(participant) {\n                mPeer.onNegotiationNeeded({\n                    changedUUID: sender,\n                    oldUUID: connection.userid,\n                    newUUID: sender\n                }, participant);\n            });\n            connection.userid = sender;\n            connection.changeUserId(connection.userid);\n        };\n\n        connection.shiftModerationControl = function(remoteUserId, existingBroadcasters, firedOnLeave) {\n            mPeer.onNegotiationNeeded({\n                shiftedModerationControl: true,\n                broadcasters: existingBroadcasters,\n                firedOnLeave: !!firedOnLeave\n            }, remoteUserId);\n        };\n\n        if (typeof StreamsHandler !== 'undefined') {\n            connection.StreamsHandler = StreamsHandler;\n        }\n\n        connection.onleave = function(userid) {};\n\n        connection.invokeSelectFileDialog = function(callback) {\n            var selector = new FileSelector();\n            selector.accept = '*.*';\n            selector.selectSingleFile(callback);\n        };\n\n        connection.getPublicModerators = function(userIdStartsWith, callback) {\n            if (typeof userIdStartsWith === 'function') {\n                callback = userIdStartsWith;\n            }\n\n            connectSocket(function() {\n                connection.socket.emit(\n                    'get-public-moderators',\n                    typeof userIdStartsWith === 'string' ? userIdStartsWith : '',\n                    callback\n                );\n            });\n        };\n\n        connection.onmute = function(e) {\n            if (!e || !e.mediaElement) {\n                return;\n            }\n\n            if (e.muteType === 'both' || e.muteType === 'video') {\n                e.mediaElement.src = null;\n                e.mediaElement.pause();\n                e.mediaElement.poster = e.snapshot || 'https://cdn.webrtc-experiment.com/images/muted.png';\n            } else if (e.muteType === 'audio') {\n                e.mediaElement.muted = true;\n            }\n        };\n\n        connection.onunmute = function(e) {\n            if (!e || !e.mediaElement || !e.stream) {\n                return;\n            }\n\n            if (e.unmuteType === 'both' || e.unmuteType === 'video') {\n                e.mediaElement.poster = null;\n                e.mediaElement.src = URL.createObjectURL(e.stream);\n                e.mediaElement.play();\n            } else if (e.unmuteType === 'audio') {\n                e.mediaElement.muted = false;\n            }\n        };\n\n        connection.onExtraDataUpdated = function(event) {\n            event.status = 'online';\n            connection.onUserStatusChanged(event, true);\n        };\n\n        connection.onJoinWithPassword = function(remoteUserId) {\n            console.warn(remoteUserId, 'is password protected. Please join with password.');\n        };\n\n        connection.onInvalidPassword = function(remoteUserId, oldPassword) {\n            console.warn(remoteUserId, 'is password protected. Please join with valid password. Your old password', oldPassword, 'is wrong.');\n        };\n\n        connection.onPasswordMaxTriesOver = function(remoteUserId) {\n            console.warn(remoteUserId, 'is password protected. Your max password tries exceeded the limit.');\n        };\n\n        connection.getAllParticipants = function(sender) {\n            return connection.peers.getAllParticipants(sender);\n        };\n\n        if (typeof StreamsHandler !== 'undefined') {\n            StreamsHandler.onSyncNeeded = function(streamid, action, type) {\n                connection.peers.getAllParticipants().forEach(function(participant) {\n                    mPeer.onNegotiationNeeded({\n                        streamid: streamid,\n                        action: action,\n                        streamSyncNeeded: true,\n                        type: type || 'both'\n                    }, participant);\n                });\n            };\n        }\n\n        connection.connectSocket = function(callback) {\n            connectSocket(callback);\n        };\n\n        connection.closeSocket = function() {\n            try {\n                io.sockets = {};\n            } catch (e) {};\n\n            if (!connection.socket) return;\n\n            if (typeof connection.socket.disconnect === 'function') {\n                connection.socket.disconnect();\n            }\n\n            if (typeof connection.socket.resetProps === 'function') {\n                connection.socket.resetProps();\n            }\n\n            connection.socket = null;\n        };\n\n        connection.getSocket = function(callback) {\n            if (!connection.socket) {\n                connectSocket(callback);\n            } else if (callback) {\n                callback(connection.socket);\n            }\n\n            return connection.socket;\n        };\n\n        connection.getRemoteStreams = mPeer.getRemoteStreams;\n\n        var skipStreams = ['selectFirst', 'selectAll', 'forEach'];\n\n        connection.streamEvents = {\n            selectFirst: function(options) {\n                if (!options) {\n                    // in normal conferencing, it will always be \"local-stream\"\n                    var firstStream;\n                    for (var str in connection.streamEvents) {\n                        if (skipStreams.indexOf(str) === -1 && !firstStream) {\n                            firstStream = connection.streamEvents[str];\n                            continue;\n                        }\n                    }\n                    return firstStream;\n                }\n            },\n            selectAll: function() {}\n        };\n\n        connection.socketURL = '/'; // generated via config.json\n        connection.socketMessageEvent = 'RTCMultiConnection-Message'; // generated via config.json\n        connection.socketCustomEvent = 'RTCMultiConnection-Custom-Message'; // generated via config.json\n        connection.DetectRTC = DetectRTC;\n\n        connection.setCustomSocketEvent = function(customEvent) {\n            if (customEvent) {\n                connection.socketCustomEvent = customEvent;\n            }\n\n            if (!connection.socket) {\n                return;\n            }\n\n            connection.socket.emit('set-custom-socket-event-listener', connection.socketCustomEvent);\n        };\n\n        connection.getNumberOfBroadcastViewers = function(broadcastId, callback) {\n            if (!connection.socket || !broadcastId || !callback) return;\n\n            connection.socket.emit('get-number-of-users-in-specific-broadcast', broadcastId, callback);\n        };\n\n        connection.onNumberOfBroadcastViewersUpdated = function(event) {\n            if (!connection.enableLogs || !connection.isInitiator) return;\n            console.info('Number of broadcast (', event.broadcastId, ') viewers', event.numberOfBroadcastViewers);\n        };\n\n        connection.onUserStatusChanged = function(event, dontWriteLogs) {\n            if (!!connection.enableLogs && !dontWriteLogs) {\n                console.info(event.userid, event.status);\n            }\n        };\n\n        connection.getUserMediaHandler = getUserMediaHandler;\n        connection.multiPeersHandler = mPeer;\n        connection.enableLogs = true;\n        connection.setCustomSocketHandler = function(customSocketHandler) {\n            if (typeof SocketConnection !== 'undefined') {\n                SocketConnection = customSocketHandler;\n            }\n        };\n\n        // default value is 15k because Firefox's receiving limit is 16k!\n        // however 64k works chrome-to-chrome\n        connection.chunkSize = 65 * 1000;\n\n        connection.maxParticipantsAllowed = 1000;\n\n        // eject or leave single user\n        connection.disconnectWith = mPeer.disconnectWith;\n\n        connection.checkPresence = function(remoteUserId, callback) {\n            if (!connection.socket) {\n                connection.connectSocket(function() {\n                    connection.checkPresence(remoteUserId, callback);\n                });\n                return;\n            }\n            connection.socket.emit('check-presence', (remoteUserId || connection.sessionid) + '', callback);\n        };\n\n        connection.onReadyForOffer = function(remoteUserId, userPreferences) {\n            connection.multiPeersHandler.createNewPeer(remoteUserId, userPreferences);\n        };\n\n        connection.setUserPreferences = function(userPreferences) {\n            if (connection.dontAttachStream) {\n                userPreferences.dontAttachLocalStream = true;\n            }\n\n            if (connection.dontGetRemoteStream) {\n                userPreferences.dontGetRemoteStream = true;\n            }\n\n            return userPreferences;\n        };\n\n        connection.updateExtraData = function() {\n            connection.socket.emit('extra-data-updated', connection.extra);\n        };\n\n        connection.enableScalableBroadcast = false;\n        connection.maxRelayLimitPerUser = 3; // each broadcast should serve only 3 users\n\n        connection.dontCaptureUserMedia = false;\n        connection.dontAttachStream = false;\n        connection.dontGetRemoteStream = false;\n\n        connection.onReConnecting = function(event) {\n            if (connection.enableLogs) {\n                console.info('ReConnecting with', event.userid, '...');\n            }\n        };\n\n        connection.beforeAddingStream = function(stream) {\n            return stream;\n        };\n\n        connection.beforeRemovingStream = function(stream) {\n            return stream;\n        };\n\n        if (typeof isChromeExtensionAvailable !== 'undefined') {\n            connection.checkIfChromeExtensionAvailable = isChromeExtensionAvailable;\n        }\n\n        if (typeof isFirefoxExtensionAvailable !== 'undefined') {\n            connection.checkIfChromeExtensionAvailable = isFirefoxExtensionAvailable;\n        }\n\n        if (typeof getChromeExtensionStatus !== 'undefined') {\n            connection.getChromeExtensionStatus = getChromeExtensionStatus;\n        }\n\n        connection.getScreenConstraints = function(callback, audioPlusTab) {\n            if (isAudioPlusTab(connection, audioPlusTab)) {\n                audioPlusTab = true;\n            }\n\n            getScreenConstraints(function(error, screen_constraints) {\n                if (!error) {\n                    screen_constraints = connection.modifyScreenConstraints(screen_constraints);\n                    callback(error, screen_constraints);\n                }\n            }, audioPlusTab);\n        };\n\n        connection.modifyScreenConstraints = function(screen_constraints) {\n            return screen_constraints;\n        };\n\n        connection.onPeerStateChanged = function(state) {\n            if (connection.enableLogs) {\n                if (state.iceConnectionState.search(/closed|failed/gi) !== -1) {\n                    console.error('Peer connection is closed between you & ', state.userid, state.extra, 'state:', state.iceConnectionState);\n                }\n            }\n        };\n\n        connection.isOnline = true;\n\n        listenEventHandler('online', function() {\n            connection.isOnline = true;\n        });\n\n        listenEventHandler('offline', function() {\n            connection.isOnline = false;\n        });\n\n        connection.isLowBandwidth = false;\n        if (navigator && navigator.connection && navigator.connection.type) {\n            connection.isLowBandwidth = navigator.connection.type.toString().toLowerCase().search(/wifi|cell/g) !== -1;\n            if (connection.isLowBandwidth) {\n                connection.bandwidth = {\n                    audio: 30,\n                    video: 30,\n                    screen: 30\n                };\n\n                if (connection.mediaConstraints.audio && connection.mediaConstraints.audio.optional && connection.mediaConstraints.audio.optional.length) {\n                    var newArray = [];\n                    connection.mediaConstraints.audio.optional.forEach(function(opt) {\n                        if (typeof opt.bandwidth === 'undefined') {\n                            newArray.push(opt);\n                        }\n                    });\n                    connection.mediaConstraints.audio.optional = newArray;\n                }\n\n                if (connection.mediaConstraints.video && connection.mediaConstraints.video.optional && connection.mediaConstraints.video.optional.length) {\n                    var newArray = [];\n                    connection.mediaConstraints.video.optional.forEach(function(opt) {\n                        if (typeof opt.bandwidth === 'undefined') {\n                            newArray.push(opt);\n                        }\n                    });\n                    connection.mediaConstraints.video.optional = newArray;\n                }\n            }\n        }\n\n        connection.getExtraData = function(remoteUserId) {\n            if (!remoteUserId) throw 'remoteUserId is required.';\n            if (!connection.peers[remoteUserId]) return {};\n            return connection.peers[remoteUserId].extra;\n        };\n\n        if (!!forceOptions.autoOpenOrJoin) {\n            connection.openOrJoin(connection.sessionid);\n        }\n\n        connection.onUserIdAlreadyTaken = function(useridAlreadyTaken, yourNewUserId) {\n            if (connection.enableLogs) {\n                console.warn('Userid already taken.', useridAlreadyTaken, 'Your new userid:', yourNewUserId);\n            }\n\n            connection.join(useridAlreadyTaken);\n        };\n\n        connection.onRoomFull = function(roomid) {\n            if (connection.enableLogs) {\n                console.warn(roomid, 'is full.');\n            }\n        };\n\n        connection.trickleIce = true;\n        connection.version = '3.4.4';\n\n        connection.onSettingLocalDescription = function(event) {\n            if (connection.enableLogs) {\n                console.info('Set local description for remote user', event.userid);\n            }\n        };\n\n        connection.oneRoomAlreadyExist = function(roomid) {\n            if (connection.enableLogs) {\n                console.info('Server says \"Room ', roomid, 'already exist. Joining instead.');\n            }\n            connection.join(roomid);\n        };\n    })(this);\n\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/student/rtcMultiConnection.js\n// module id = 133\n// module chunks = 1","// Last time updated at August 19, 2014, 14:46:23\n\n// Muaz Khan     - www.MuazKhan.com\n// MIT License   - www.WebRTC-Experiment.com/licence\n// Documentation - github.com/muaz-khan/WebRTC-Experiment/tree/master/getMediaElement\n\n// Demo          - www.WebRTC-Experiment.com/getMediaElement\n\ndocument.write('<link rel=\"stylesheet\" href=\"https://cdn.WebRTC-Experiment.com/getMediaElement.css\">');\n\n// __________________\n// getMediaElement.js\n\nwindow.getMediaElement = function(mediaElement, config) {\n    config = config || {};\n\n    if (!mediaElement.nodeName || (mediaElement.nodeName.toLowerCase() != 'audio' && mediaElement.nodeName.toLowerCase() != 'video')) {\n        if (!mediaElement.getVideoTracks().length) {\n            return getAudioElement(mediaElement, config);\n        }\n\n        var mediaStream = mediaElement;\n        mediaElement = document.createElement(mediaStream.getVideoTracks().length ? 'video' : 'audio');\n        mediaElement[!!navigator.mozGetUserMedia ? 'mozSrcObject' : 'src'] = !!navigator.mozGetUserMedia ? mediaStream : window.webkitURL.createObjectURL(mediaStream);\n    }\n\n    if (mediaElement.nodeName && mediaElement.nodeName.toLowerCase() == 'audio') {\n        return getAudioElement(mediaElement, config);\n    }\n\n    mediaElement.controls = false;\n\n    var buttons = config.buttons || ['mute-audio', 'mute-video', 'full-screen', 'volume-slider', 'stop'];\n    buttons.has = function(element) {\n        return buttons.indexOf(element) !== -1;\n    };\n\n    config.toggle = config.toggle || [];\n    config.toggle.has = function(element) {\n        return config.toggle.indexOf(element) !== -1;\n    };\n\n    var mediaElementContainer = document.createElement('div');\n    mediaElementContainer.className = 'media-container';\n\n    var mediaControls = document.createElement('div');\n    mediaControls.className = 'media-controls';\n    mediaElementContainer.appendChild(mediaControls);\n\n    if (buttons.has('mute-audio')) {\n        var muteAudio = document.createElement('div');\n        muteAudio.className = 'control ' + (config.toggle.has('mute-audio') ? 'unmute-audio selected' : 'mute-audio');\n        mediaControls.appendChild(muteAudio);\n\n        muteAudio.onclick = function() {\n            if (muteAudio.className.indexOf('unmute-audio') != -1) {\n                muteAudio.className = muteAudio.className.replace('unmute-audio selected', 'mute-audio');\n                mediaElement.muted = false;\n                mediaElement.volume = 1;\n                if (config.onUnMuted) config.onUnMuted('audio');\n            } else {\n                muteAudio.className = muteAudio.className.replace('mute-audio', 'unmute-audio selected');\n                mediaElement.muted = true;\n                mediaElement.volume = 0;\n                if (config.onMuted) config.onMuted('audio');\n            }\n        };\n    }\n\n    if (buttons.has('mute-video')) {\n        var muteVideo = document.createElement('div');\n        muteVideo.className = 'control ' + (config.toggle.has('mute-video') ? 'unmute-video selected' : 'mute-video');\n        mediaControls.appendChild(muteVideo);\n\n        muteVideo.onclick = function() {\n            if (muteVideo.className.indexOf('unmute-video') != -1) {\n                muteVideo.className = muteVideo.className.replace('unmute-video selected', 'mute-video');\n                mediaElement.muted = false;\n                mediaElement.volume = 1;\n                mediaElement.play();\n                if (config.onUnMuted) config.onUnMuted('video');\n            } else {\n                muteVideo.className = muteVideo.className.replace('mute-video', 'unmute-video selected');\n                mediaElement.muted = true;\n                mediaElement.volume = 0;\n                mediaElement.pause();\n                if (config.onMuted) config.onMuted('video');\n            }\n        };\n    }\n\n    if (buttons.has('take-snapshot')) {\n        var takeSnapshot = document.createElement('div');\n        takeSnapshot.className = 'control take-snapshot';\n        mediaControls.appendChild(takeSnapshot);\n\n        takeSnapshot.onclick = function() {\n            if (config.onTakeSnapshot) config.onTakeSnapshot();\n        };\n    }\n\n    if (buttons.has('stop')) {\n        var stop = document.createElement('div');\n        stop.className = 'control stop';\n        mediaControls.appendChild(stop);\n\n        stop.onclick = function() {\n            mediaElementContainer.style.opacity = 0;\n            setTimeout(function() {\n                if (mediaElementContainer.parentNode) {\n                    mediaElementContainer.parentNode.removeChild(mediaElementContainer);\n                }\n            }, 800);\n            if (config.onStopped) config.onStopped();\n        };\n    }\n\n    var volumeControl = document.createElement('div');\n    volumeControl.className = 'volume-control';\n\n    if (buttons.has('record-audio')) {\n        var recordAudio = document.createElement('div');\n        recordAudio.className = 'control ' + (config.toggle.has('record-audio') ? 'stop-recording-audio selected' : 'record-audio');\n        volumeControl.appendChild(recordAudio);\n\n        recordAudio.onclick = function() {\n            if (recordAudio.className.indexOf('stop-recording-audio') != -1) {\n                recordAudio.className = recordAudio.className.replace('stop-recording-audio selected', 'record-audio');\n                if (config.onRecordingStopped) config.onRecordingStopped('audio');\n            } else {\n                recordAudio.className = recordAudio.className.replace('record-audio', 'stop-recording-audio selected');\n                if (config.onRecordingStarted) config.onRecordingStarted('audio');\n            }\n        };\n    }\n\n    if (buttons.has('record-video')) {\n        var recordVideo = document.createElement('div');\n        recordVideo.className = 'control ' + (config.toggle.has('record-video') ? 'stop-recording-video selected' : 'record-video');\n        volumeControl.appendChild(recordVideo);\n\n        recordVideo.onclick = function() {\n            if (recordVideo.className.indexOf('stop-recording-video') != -1) {\n                recordVideo.className = recordVideo.className.replace('stop-recording-video selected', 'record-video');\n                if (config.onRecordingStopped) config.onRecordingStopped('video');\n            } else {\n                recordVideo.className = recordVideo.className.replace('record-video', 'stop-recording-video selected');\n                if (config.onRecordingStarted) config.onRecordingStarted('video');\n            }\n        };\n    }\n\n    if (buttons.has('volume-slider')) {\n        var volumeSlider = document.createElement('div');\n        volumeSlider.className = 'control volume-slider';\n        volumeControl.appendChild(volumeSlider);\n\n        var slider = document.createElement('input');\n        slider.type = 'range';\n        slider.min = 0;\n        slider.max = 100;\n        slider.value = 100;\n        slider.onchange = function() {\n            mediaElement.volume = '.' + slider.value.toString().substr(0, 1);\n        };\n        volumeSlider.appendChild(slider);\n    }\n\n    if (buttons.has('full-screen')) {\n        var zoom = document.createElement('div');\n        zoom.className = 'control ' + (config.toggle.has('zoom-in') ? 'zoom-out selected' : 'zoom-in');\n\n        if (!slider && !recordAudio && !recordVideo && zoom) {\n            mediaControls.insertBefore(zoom, mediaControls.firstChild);\n        } else volumeControl.appendChild(zoom);\n\n        zoom.onclick = function() {\n            if (zoom.className.indexOf('zoom-out') != -1) {\n                zoom.className = zoom.className.replace('zoom-out selected', 'zoom-in');\n                exitFullScreen();\n            } else {\n                zoom.className = zoom.className.replace('zoom-in', 'zoom-out selected');\n                launchFullscreen(mediaElementContainer);\n            }\n        };\n\n        function launchFullscreen(element) {\n            if (element.requestFullscreen) {\n                element.requestFullscreen();\n            } else if (element.mozRequestFullScreen) {\n                element.mozRequestFullScreen();\n            } else if (element.webkitRequestFullscreen) {\n                element.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);\n            }\n        }\n\n        function exitFullScreen() {\n            if (document.fullscreen) {\n                document.cancelFullScreen();\n            }\n\n            if (document.mozFullScreen) {\n                document.mozCancelFullScreen();\n            }\n\n            if (document.webkitIsFullScreen) {\n                document.webkitCancelFullScreen();\n            }\n        }\n\n        function screenStateChange(e) {\n            if (e.srcElement != mediaElementContainer) return;\n\n            var isFullScreeMode = document.webkitIsFullScreen || document.mozFullScreen || document.fullscreen;\n\n            mediaElementContainer.style.width = (isFullScreeMode ? (window.innerWidth - 20) : config.width) + 'px';\n            mediaElementContainer.style.display = isFullScreeMode ? 'block' : 'inline-block';\n\n            if (config.height) {\n                mediaBox.style.height = (isFullScreeMode ? (window.innerHeight - 20) : config.height) + 'px';\n            }\n\n            if (!isFullScreeMode && config.onZoomout) config.onZoomout();\n            if (isFullScreeMode && config.onZoomin) config.onZoomin();\n\n            if (!isFullScreeMode && zoom.className.indexOf('zoom-out') != -1) {\n                zoom.className = zoom.className.replace('zoom-out selected', 'zoom-in');\n                if (config.onZoomout) config.onZoomout();\n            }\n            setTimeout(adjustControls, 1000);\n        }\n\n        document.addEventListener('fullscreenchange', screenStateChange, false);\n        document.addEventListener('mozfullscreenchange', screenStateChange, false);\n        document.addEventListener('webkitfullscreenchange', screenStateChange, false);\n    }\n\n    if (buttons.has('volume-slider') || buttons.has('full-screen') || buttons.has('record-audio') || buttons.has('record-video')) {\n        mediaElementContainer.appendChild(volumeControl);\n    }\n\n    var mediaBox = document.createElement('div');\n    mediaBox.className = 'media-box';\n    mediaElementContainer.appendChild(mediaBox);\n\n    mediaBox.appendChild(mediaElement);\n\n    if (!config.width) config.width = (innerWidth / 2) - 50;\n\n    mediaElementContainer.style.width = config.width + 'px';\n\n    if (config.height) {\n        mediaBox.style.height = config.height + 'px';\n    }\n\n    mediaBox.querySelector('video').style.maxHeight = innerHeight + 'px';\n\n    var times = 0;\n\n    function adjustControls() {\n        mediaControls.style.marginLeft = (mediaElementContainer.clientWidth - mediaControls.clientWidth - 2) + 'px';\n\n        if (slider) {\n            slider.style.width = (mediaElementContainer.clientWidth / 3) + 'px';\n            volumeControl.style.marginLeft = (mediaElementContainer.clientWidth / 3 - 30) + 'px';\n\n            if (zoom) zoom.style['border-top-right-radius'] = '5px';\n        } else {\n            volumeControl.style.marginLeft = (mediaElementContainer.clientWidth - volumeControl.clientWidth - 2) + 'px';\n        }\n\n        volumeControl.style.marginTop = (mediaElementContainer.clientHeight - volumeControl.clientHeight - 2) + 'px';\n\n        if (times < 10) {\n            times++;\n            setTimeout(adjustControls, 1000);\n        } else times = 0;\n    }\n\n    if (config.showOnMouseEnter || typeof config.showOnMouseEnter === 'undefined') {\n        mediaElementContainer.onmouseenter = mediaElementContainer.onmousedown = function() {\n            adjustControls();\n            mediaControls.style.opacity = 1;\n            volumeControl.style.opacity = 1;\n        };\n\n        mediaElementContainer.onmouseleave = function() {\n            mediaControls.style.opacity = 0;\n            volumeControl.style.opacity = 0;\n        };\n    } else {\n        setTimeout(function() {\n            adjustControls();\n            setTimeout(function() {\n                mediaControls.style.opacity = 1;\n                volumeControl.style.opacity = 1;\n            }, 300);\n        }, 700);\n    }\n\n    adjustControls();\n\n    mediaElementContainer.toggle = function(clasName) {\n        if (typeof clasName != 'string') {\n            for (var i = 0; i < clasName.length; i++) {\n                mediaElementContainer.toggle(clasName[i]);\n            }\n            return;\n        }\n\n        if (clasName == 'mute-audio' && muteAudio) muteAudio.onclick();\n        if (clasName == 'mute-video' && muteVideo) muteVideo.onclick();\n\n        if (clasName == 'record-audio' && recordAudio) recordAudio.onclick();\n        if (clasName == 'record-video' && recordVideo) recordVideo.onclick();\n\n        if (clasName == 'stop' && stop) stop.onclick();\n\n        return this;\n    };\n\n    mediaElementContainer.media = mediaElement;\n\n    return mediaElementContainer;\n}\n\n// __________________\n// getAudioElement.js\n\nfunction getAudioElement(mediaElement, config) {\n    config = config || {};\n\n    if (!mediaElement.nodeName || (mediaElement.nodeName.toLowerCase() != 'audio' && mediaElement.nodeName.toLowerCase() != 'video')) {\n        var mediaStream = mediaElement;\n        mediaElement = document.createElement('audio');\n        mediaElement[!!navigator.mozGetUserMedia ? 'mozSrcObject' : 'src'] = !!navigator.mozGetUserMedia ? mediaStream : window.webkitURL.createObjectURL(mediaStream);\n    }\n\n    config.toggle = config.toggle || [];\n    config.toggle.has = function(element) {\n        return config.toggle.indexOf(element) !== -1;\n    };\n\n    mediaElement.controls = false;\n    mediaElement.play();\n\n    var mediaElementContainer = document.createElement('div');\n    mediaElementContainer.className = 'media-container';\n\n    var mediaControls = document.createElement('div');\n    mediaControls.className = 'media-controls';\n    mediaElementContainer.appendChild(mediaControls);\n\n    var muteAudio = document.createElement('div');\n    muteAudio.className = 'control ' + (config.toggle.has('mute-audio') ? 'unmute-audio selected' : 'mute-audio');\n    mediaControls.appendChild(muteAudio);\n\n    muteAudio.style['border-top-left-radius'] = '5px';\n\n    muteAudio.onclick = function() {\n        if (muteAudio.className.indexOf('unmute-audio') != -1) {\n            muteAudio.className = muteAudio.className.replace('unmute-audio selected', 'mute-audio');\n            mediaElement.muted = false;\n            if (config.onUnMuted) config.onUnMuted('audio');\n        } else {\n            muteAudio.className = muteAudio.className.replace('mute-audio', 'unmute-audio selected');\n            mediaElement.muted = true;\n            if (config.onMuted) config.onMuted('audio');\n        }\n    };\n\n    if (!config.buttons || (config.buttons && config.buttons.indexOf('record-audio') != -1)) {\n        var recordAudio = document.createElement('div');\n        recordAudio.className = 'control ' + (config.toggle.has('record-audio') ? 'stop-recording-audio selected' : 'record-audio');\n        mediaControls.appendChild(recordAudio);\n\n        recordAudio.onclick = function() {\n            if (recordAudio.className.indexOf('stop-recording-audio') != -1) {\n                recordAudio.className = recordAudio.className.replace('stop-recording-audio selected', 'record-audio');\n                if (config.onRecordingStopped) config.onRecordingStopped('audio');\n            } else {\n                recordAudio.className = recordAudio.className.replace('record-audio', 'stop-recording-audio selected');\n                if (config.onRecordingStarted) config.onRecordingStarted('audio');\n            }\n        };\n    }\n\n    var volumeSlider = document.createElement('div');\n    volumeSlider.className = 'control volume-slider';\n    volumeSlider.style.width = 'auto';\n    mediaControls.appendChild(volumeSlider);\n\n    var slider = document.createElement('input');\n    slider.style.marginTop = '11px';\n    slider.style.width = ' 200px';\n\n    if (config.buttons && config.buttons.indexOf('record-audio') == -1) {\n        slider.style.width = ' 241px';\n    }\n\n    slider.type = 'range';\n    slider.min = 0;\n    slider.max = 100;\n    slider.value = 100;\n    slider.onchange = function() {\n        mediaElement.volume = '.' + slider.value.toString().substr(0, 1);\n    };\n    volumeSlider.appendChild(slider);\n\n    var stop = document.createElement('div');\n    stop.className = 'control stop';\n    mediaControls.appendChild(stop);\n\n    stop.onclick = function() {\n        mediaElementContainer.style.opacity = 0;\n        setTimeout(function() {\n            if (mediaElementContainer.parentNode) {\n                mediaElementContainer.parentNode.removeChild(mediaElementContainer);\n            }\n        }, 800);\n        if (config.onStopped) config.onStopped();\n    };\n\n    stop.style['border-top-right-radius'] = '5px';\n    stop.style['border-bottom-right-radius'] = '5px';\n\n    var mediaBox = document.createElement('div');\n    mediaBox.className = 'media-box';\n    mediaElementContainer.appendChild(mediaBox);\n\n    var h2 = document.createElement('h2');\n    h2.innerHTML = config.title || 'Audio Element';\n    h2.setAttribute('style', 'position: absolute;color: rgb(160, 160, 160);font-size: 20px;text-shadow: 1px 1px rgb(255, 255, 255);padding:0;margin:0;');\n    mediaBox.appendChild(h2);\n\n    mediaBox.appendChild(mediaElement);\n\n    mediaElementContainer.style.width = '329px';\n    mediaBox.style.height = '90px';\n\n    h2.style.width = mediaElementContainer.style.width;\n    h2.style.height = '50px';\n    h2.style.overflow = 'hidden';\n\n    var times = 0;\n\n    function adjustControls() {\n        mediaControls.style.marginLeft = (mediaElementContainer.clientWidth - mediaControls.clientWidth - 7) + 'px';\n        mediaControls.style.marginTop = (mediaElementContainer.clientHeight - mediaControls.clientHeight - 6) + 'px';\n        if (times < 10) {\n            times++;\n            setTimeout(adjustControls, 1000);\n        } else times = 0;\n    }\n\n    if (config.showOnMouseEnter || typeof config.showOnMouseEnter === 'undefined') {\n        mediaElementContainer.onmouseenter = mediaElementContainer.onmousedown = function() {\n            adjustControls();\n            mediaControls.style.opacity = 1;\n        };\n\n        mediaElementContainer.onmouseleave = function() {\n            mediaControls.style.opacity = 0;\n        };\n    } else {\n        setTimeout(function() {\n            adjustControls();\n            setTimeout(function() {\n                mediaControls.style.opacity = 1;\n            }, 300);\n        }, 700);\n    }\n\n    adjustControls();\n\n    mediaElementContainer.toggle = function(clasName) {\n        if (typeof clasName != 'string') {\n            for (var i = 0; i < clasName.length; i++) {\n                mediaElementContainer.toggle(clasName[i]);\n            }\n            return;\n        }\n\n        if (clasName == 'mute-audio' && muteAudio) muteAudio.onclick();\n        if (clasName == 'record-audio' && recordAudio) recordAudio.onclick();\n        if (clasName == 'stop' && stop) stop.onclick();\n\n        return this;\n    };\n\n    mediaElementContainer.media = mediaElement;\n\n    return mediaElementContainer;\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/teacher/mediaElements.js\n// module id = 134\n// module chunks = 1","'use strict';\n\n// Last time updated: 2017-03-11 7:14:04 AM UTC\n\n// _________________________\n// RTCMultiConnection v3.4.4\n\n// Open-Sourced: https://github.com/muaz-khan/RTCMultiConnection\n\n// --------------------------------------------------\n// Muaz Khan     - www.MuazKhan.com\n// MIT License   - www.WebRTC-Experiment.com/licence\n// --------------------------------------------------\n\nwindow.RTCMultiConnection = function(roomid, forceOptions, io) {\n    var io = io;\n\n    function SocketConnection(connection, connectCallback) {\n        var parameters = '';\n\n        parameters += '?userid=' + connection.userid;\n        parameters += '&sessionid=' + connection.sessionid;\n        parameters += '&msgEvent=' + connection.socketMessageEvent;\n        parameters += '&socketCustomEvent=' + connection.socketCustomEvent;\n        parameters += '&autoCloseEntireSession=' + !!connection.autoCloseEntireSession;\n\n        parameters += '&maxParticipantsAllowed=' + connection.maxParticipantsAllowed;\n\n        if (connection.enableScalableBroadcast) {\n            parameters += '&enableScalableBroadcast=true';\n            parameters += '&maxRelayLimitPerUser=' + (connection.maxRelayLimitPerUser || 2);\n        }\n\n        if (connection.socketCustomParameters) {\n            parameters += connection.socketCustomParameters;\n        }\n\n        try {\n            io.sockets = {};\n        } catch (e) {};\n\n        if (!connection.socketURL) {\n            connection.socketURL = '/';\n        }\n\n        if (connection.socketURL.substr(connection.socketURL.length - 1, 1) != '/') {\n            // connection.socketURL = 'https://domain.com:9001/';\n            throw '\"socketURL\" MUST end with a slash.';\n        }\n\n        if (connection.enableLogs) {\n            if (connection.socketURL == '/') {\n                console.info('socket.io is connected at: ', location.origin + '/');\n            } else {\n                console.info('socket.io is connected at: ', connection.socketURL);\n            }\n        }\n\n        try {\n            connection.socket = io(connection.socketURL + parameters);\n        } catch (e) {\n            connection.socket = io.connect(connection.socketURL + parameters, connection.socketOptions);\n        }\n\n        // detect signaling medium\n        connection.socket.isIO = true;\n\n        var mPeer = connection.multiPeersHandler;\n\n        connection.socket.on('extra-data-updated', function(remoteUserId, extra) {\n            if (!connection.peers[remoteUserId]) return;\n            connection.peers[remoteUserId].extra = extra;\n\n            connection.onExtraDataUpdated({\n                userid: remoteUserId,\n                extra: extra\n            });\n\n            if (!connection.peersBackup[remoteUserId]) {\n                connection.peersBackup[remoteUserId] = {\n                    userid: remoteUserId,\n                    extra: {}\n                };\n            }\n\n            connection.peersBackup[remoteUserId].extra = extra;\n        });\n\n        connection.socket.on(connection.socketMessageEvent, function(message) {\n            if (message.remoteUserId != connection.userid) return;\n\n            if (connection.peers[message.sender] && connection.peers[message.sender].extra != message.message.extra) {\n                connection.peers[message.sender].extra = message.extra;\n                connection.onExtraDataUpdated({\n                    userid: message.sender,\n                    extra: message.extra\n                });\n            }\n\n            if (message.message.streamSyncNeeded && connection.peers[message.sender]) {\n                var stream = connection.streamEvents[message.message.streamid];\n                if (!stream || !stream.stream) {\n                    return;\n                }\n\n                var action = message.message.action;\n\n                if (action === 'ended' || action === 'inactive' || action === 'stream-removed') {\n                    if (connection.peersBackup[stream.userid]) {\n                        stream.extra = connection.peersBackup[stream.userid].extra;\n                    }\n                    connection.onstreamended(stream);\n                    return;\n                }\n\n                var type = message.message.type != 'both' ? message.message.type : null;\n\n                if (typeof stream.stream[action] == 'function') {\n                    stream.stream[action](type);\n                }\n                return;\n            }\n\n            if (message.message === 'connectWithAllParticipants') {\n                if (connection.broadcasters.indexOf(message.sender) === -1) {\n                    connection.broadcasters.push(message.sender);\n                }\n\n                mPeer.onNegotiationNeeded({\n                    allParticipants: connection.getAllParticipants(message.sender)\n                }, message.sender);\n                return;\n            }\n\n            if (message.message === 'removeFromBroadcastersList') {\n                if (connection.broadcasters.indexOf(message.sender) !== -1) {\n                    delete connection.broadcasters[connection.broadcasters.indexOf(message.sender)];\n                    connection.broadcasters = removeNullEntries(connection.broadcasters);\n                }\n                return;\n            }\n\n            if (message.message === 'dropPeerConnection') {\n                connection.deletePeer(message.sender);\n                return;\n            }\n\n            if (message.message.allParticipants) {\n                if (message.message.allParticipants.indexOf(message.sender) === -1) {\n                    message.message.allParticipants.push(message.sender);\n                }\n\n                message.message.allParticipants.forEach(function(participant) {\n                    mPeer[!connection.peers[participant] ? 'createNewPeer' : 'renegotiatePeer'](participant, {\n                        localPeerSdpConstraints: {\n                            OfferToReceiveAudio: connection.sdpConstraints.mandatory.OfferToReceiveAudio,\n                            OfferToReceiveVideo: connection.sdpConstraints.mandatory.OfferToReceiveVideo\n                        },\n                        remotePeerSdpConstraints: {\n                            OfferToReceiveAudio: connection.session.oneway ? !!connection.session.audio : connection.sdpConstraints.mandatory.OfferToReceiveAudio,\n                            OfferToReceiveVideo: connection.session.oneway ? !!connection.session.video || !!connection.session.screen : connection.sdpConstraints.mandatory.OfferToReceiveVideo\n                        },\n                        isOneWay: !!connection.session.oneway || connection.direction === 'one-way',\n                        isDataOnly: isData(connection.session)\n                    });\n                });\n                return;\n            }\n\n            if (message.message.newParticipant) {\n                if (message.message.newParticipant == connection.userid) return;\n                if (!!connection.peers[message.message.newParticipant]) return;\n\n                mPeer.createNewPeer(message.message.newParticipant, message.message.userPreferences || {\n                    localPeerSdpConstraints: {\n                        OfferToReceiveAudio: connection.sdpConstraints.mandatory.OfferToReceiveAudio,\n                        OfferToReceiveVideo: connection.sdpConstraints.mandatory.OfferToReceiveVideo\n                    },\n                    remotePeerSdpConstraints: {\n                        OfferToReceiveAudio: connection.session.oneway ? !!connection.session.audio : connection.sdpConstraints.mandatory.OfferToReceiveAudio,\n                        OfferToReceiveVideo: connection.session.oneway ? !!connection.session.video || !!connection.session.screen : connection.sdpConstraints.mandatory.OfferToReceiveVideo\n                    },\n                    isOneWay: !!connection.session.oneway || connection.direction === 'one-way',\n                    isDataOnly: isData(connection.session)\n                });\n                return;\n            }\n\n            if (message.message.readyForOffer || message.message.addMeAsBroadcaster) {\n                connection.addNewBroadcaster(message.sender);\n            }\n\n            if (message.message.newParticipationRequest && message.sender !== connection.userid) {\n                if (connection.peers[message.sender]) {\n                    connection.deletePeer(message.sender);\n                }\n\n                var userPreferences = {\n                    extra: message.extra || {},\n                    localPeerSdpConstraints: message.message.remotePeerSdpConstraints || {\n                        OfferToReceiveAudio: connection.sdpConstraints.mandatory.OfferToReceiveAudio,\n                        OfferToReceiveVideo: connection.sdpConstraints.mandatory.OfferToReceiveVideo\n                    },\n                    remotePeerSdpConstraints: message.message.localPeerSdpConstraints || {\n                        OfferToReceiveAudio: connection.session.oneway ? !!connection.session.audio : connection.sdpConstraints.mandatory.OfferToReceiveAudio,\n                        OfferToReceiveVideo: connection.session.oneway ? !!connection.session.video || !!connection.session.screen : connection.sdpConstraints.mandatory.OfferToReceiveVideo\n                    },\n                    isOneWay: typeof message.message.isOneWay !== 'undefined' ? message.message.isOneWay : !!connection.session.oneway || connection.direction === 'one-way',\n                    isDataOnly: typeof message.message.isDataOnly !== 'undefined' ? message.message.isDataOnly : isData(connection.session),\n                    dontGetRemoteStream: typeof message.message.isOneWay !== 'undefined' ? message.message.isOneWay : !!connection.session.oneway || connection.direction === 'one-way',\n                    dontAttachLocalStream: !!message.message.dontGetRemoteStream,\n                    connectionDescription: message,\n                    successCallback: function() {\n                        // if its oneway----- todo: THIS SEEMS NOT IMPORTANT.\n                        if (typeof message.message.isOneWay !== 'undefined' ? message.message.isOneWay : !!connection.session.oneway || connection.direction === 'one-way') {\n                            connection.addNewBroadcaster(message.sender, userPreferences);\n                        }\n\n                        if (!!connection.session.oneway || connection.direction === 'one-way' || isData(connection.session)) {\n                            connection.addNewBroadcaster(message.sender, userPreferences);\n                        }\n                    }\n                };\n\n                connection.onNewParticipant(message.sender, userPreferences);\n                return;\n            }\n\n            if (message.message.shiftedModerationControl) {\n                connection.onShiftedModerationControl(message.sender, message.message.broadcasters);\n                return;\n            }\n\n            if (message.message.changedUUID) {\n                if (connection.peers[message.message.oldUUID]) {\n                    connection.peers[message.message.newUUID] = connection.peers[message.message.oldUUID];\n                    delete connection.peers[message.message.oldUUID];\n                }\n            }\n\n            if (message.message.userLeft) {\n                mPeer.onUserLeft(message.sender);\n\n                if (!!message.message.autoCloseEntireSession) {\n                    connection.leave();\n                }\n\n                return;\n            }\n\n            mPeer.addNegotiatedMessage(message.message, message.sender);\n        });\n\n        connection.socket.on('user-left', function(userid) {\n            onUserLeft(userid);\n\n            connection.onUserStatusChanged({\n                userid: userid,\n                status: 'offline',\n                extra: connection.peers[userid] ? connection.peers[userid].extra || {} : {}\n            });\n\n            var eventObject = {\n                userid: userid,\n                extra: {}\n            };\n\n            if (connection.peersBackup[eventObject.userid]) {\n                eventObject.extra = connection.peersBackup[eventObject.userid].extra;\n            }\n\n            connection.onleave(eventObject);\n        });\n\n        var alreadyConnected = false;\n\n        connection.socket.resetProps = function() {\n            alreadyConnected = false;\n        };\n\n        connection.socket.on('connect', function() {\n            if (alreadyConnected) {\n                return;\n            }\n            alreadyConnected = true;\n\n            if (connection.enableLogs) {\n                console.info('socket.io connection is opened.');\n            }\n\n            setTimeout(function() {\n                connection.socket.emit('extra-data-updated', connection.extra);\n\n                if (connectCallback) {\n                    connectCallback(connection.socket);\n                }\n            }, 1000);\n        });\n\n        connection.socket.on('disconnect', function() {\n            if (connection.enableLogs) {\n                console.warn('socket.io connection is closed');\n            }\n        });\n\n        connection.socket.on('join-with-password', function(remoteUserId) {\n            connection.onJoinWithPassword(remoteUserId);\n        });\n\n        connection.socket.on('invalid-password', function(remoteUserId, oldPassword) {\n            connection.onInvalidPassword(remoteUserId, oldPassword);\n        });\n\n        connection.socket.on('password-max-tries-over', function(remoteUserId) {\n            connection.onPasswordMaxTriesOver(remoteUserId);\n        });\n\n        connection.socket.on('user-disconnected', function(remoteUserId) {\n            if (remoteUserId === connection.userid) {\n                return;\n            }\n\n            connection.onUserStatusChanged({\n                userid: remoteUserId,\n                status: 'offline',\n                extra: connection.peers[remoteUserId] ? connection.peers[remoteUserId].extra || {} : {}\n            });\n\n            connection.deletePeer(remoteUserId);\n        });\n\n        connection.socket.on('user-connected', function(userid) {\n            if (userid === connection.userid) {\n                return;\n            }\n\n            connection.onUserStatusChanged({\n                userid: userid,\n                status: 'online',\n                extra: connection.peers[userid] ? connection.peers[userid].extra || {} : {}\n            });\n        });\n\n        connection.socket.on('closed-entire-session', function(sessionid, extra) {\n            connection.leave();\n            connection.onEntireSessionClosed({\n                sessionid: sessionid,\n                userid: sessionid,\n                extra: extra\n            });\n        });\n\n        connection.socket.on('userid-already-taken', function(useridAlreadyTaken, yourNewUserId) {\n            connection.isInitiator = false;\n            connection.userid = yourNewUserId;\n\n            connection.onUserIdAlreadyTaken(useridAlreadyTaken, yourNewUserId);\n        })\n\n        connection.socket.on('logs', function(log) {\n            if (!connection.enableLogs) return;\n            console.debug('server-logs', log);\n        });\n\n        connection.socket.on('number-of-broadcast-viewers-updated', function(data) {\n            connection.onNumberOfBroadcastViewersUpdated(data);\n        });\n\n        connection.socket.on('room-full', function(roomid) {\n            connection.onRoomFull(roomid);\n        });\n\n        connection.socket.on('become-next-modrator', function(sessionid) {\n            if (sessionid != connection.sessionid) return;\n            setTimeout(function() {\n                connection.open(sessionid);\n                connection.socket.emit('shift-moderator-control-on-disconnect');\n            }, 1000);\n        });\n    }\n\n    function MultiPeers(connection) {\n        var self = this;\n\n        var skipPeers = ['getAllParticipants', 'getLength', 'selectFirst', 'streams', 'send', 'forEach'];\n        connection.peersBackup = {};\n        connection.peers = {\n            getLength: function() {\n                var numberOfPeers = 0;\n                for (var peer in this) {\n                    if (skipPeers.indexOf(peer) == -1) {\n                        numberOfPeers++;\n                    }\n                }\n                return numberOfPeers;\n            },\n            selectFirst: function() {\n                var firstPeer;\n                for (var peer in this) {\n                    if (skipPeers.indexOf(peer) == -1) {\n                        firstPeer = this[peer];\n                    }\n                }\n                return firstPeer;\n            },\n            getAllParticipants: function(sender) {\n                var allPeers = [];\n                for (var peer in this) {\n                    if (skipPeers.indexOf(peer) == -1 && peer != sender) {\n                        allPeers.push(peer);\n                    }\n                }\n                return allPeers;\n            },\n            forEach: function(callbcak) {\n                this.getAllParticipants().forEach(function(participant) {\n                    callbcak(connection.peers[participant]);\n                });\n            },\n            send: function(data, remoteUserId) {\n                var that = this;\n\n                if (!isNull(data.size) && !isNull(data.type)) {\n                    self.shareFile(data, remoteUserId);\n                    return;\n                }\n\n                if (data.type !== 'text' && !(data instanceof ArrayBuffer) && !(data instanceof DataView)) {\n                    TextSender.send({\n                        text: data,\n                        channel: this,\n                        connection: connection,\n                        remoteUserId: remoteUserId\n                    });\n                    return;\n                }\n\n                if (data.type === 'text') {\n                    data = JSON.stringify(data);\n                }\n\n                if (remoteUserId) {\n                    var remoteUser = connection.peers[remoteUserId];\n                    if (remoteUser) {\n                        if (!remoteUser.channels.length) {\n                            connection.peers[remoteUserId].createDataChannel();\n                            connection.renegotiate(remoteUserId);\n                            setTimeout(function() {\n                                that.send(data, remoteUserId);\n                            }, 3000);\n                            return;\n                        }\n\n                        remoteUser.channels.forEach(function(channel) {\n                            channel.send(data);\n                        });\n                        return;\n                    }\n                }\n\n                this.getAllParticipants().forEach(function(participant) {\n                    if (!that[participant].channels.length) {\n                        connection.peers[participant].createDataChannel();\n                        connection.renegotiate(participant);\n                        setTimeout(function() {\n                            that[participant].channels.forEach(function(channel) {\n                                channel.send(data);\n                            });\n                        }, 3000);\n                        return;\n                    }\n\n                    that[participant].channels.forEach(function(channel) {\n                        channel.send(data);\n                    });\n                });\n            }\n        };\n\n        this.uuid = connection.userid;\n\n        this.getLocalConfig = function(remoteSdp, remoteUserId, userPreferences) {\n            if (!userPreferences) {\n                userPreferences = {};\n            }\n\n            return {\n                streamsToShare: userPreferences.streamsToShare || {},\n                rtcMultiConnection: connection,\n                connectionDescription: userPreferences.connectionDescription,\n                userid: remoteUserId,\n                localPeerSdpConstraints: userPreferences.localPeerSdpConstraints,\n                remotePeerSdpConstraints: userPreferences.remotePeerSdpConstraints,\n                dontGetRemoteStream: !!userPreferences.dontGetRemoteStream,\n                dontAttachLocalStream: !!userPreferences.dontAttachLocalStream,\n                renegotiatingPeer: !!userPreferences.renegotiatingPeer,\n                peerRef: userPreferences.peerRef,\n                channels: userPreferences.channels || [],\n                onLocalSdp: function(localSdp) {\n                    self.onNegotiationNeeded(localSdp, remoteUserId);\n                },\n                onLocalCandidate: function(localCandidate) {\n                    localCandidate = OnIceCandidateHandler.processCandidates(connection, localCandidate)\n                    if (localCandidate) {\n                        self.onNegotiationNeeded(localCandidate, remoteUserId);\n                    }\n                },\n                remoteSdp: remoteSdp,\n                onDataChannelMessage: function(message) {\n                    if (!connection.fbr && connection.enableFileSharing) initFileBufferReader();\n\n                    if (typeof message == 'string' || !connection.enableFileSharing) {\n                        self.onDataChannelMessage(message, remoteUserId);\n                        return;\n                    }\n\n                    var that = this;\n\n                    if (message instanceof ArrayBuffer || message instanceof DataView) {\n                        connection.fbr.convertToObject(message, function(object) {\n                            that.onDataChannelMessage(object);\n                        });\n                        return;\n                    }\n\n                    if (message.readyForNextChunk) {\n                        connection.fbr.getNextChunk(message, function(nextChunk, isLastChunk) {\n                            connection.peers[remoteUserId].channels.forEach(function(channel) {\n                                channel.send(nextChunk);\n                            });\n                        }, remoteUserId);\n                        return;\n                    }\n\n                    if (message.chunkMissing) {\n                        connection.fbr.chunkMissing(message);\n                        return;\n                    }\n\n                    connection.fbr.addChunk(message, function(promptNextChunk) {\n                        connection.peers[remoteUserId].peer.channel.send(promptNextChunk);\n                    });\n                },\n                onDataChannelError: function(error) {\n                    self.onDataChannelError(error, remoteUserId);\n                },\n                onDataChannelOpened: function(channel) {\n                    self.onDataChannelOpened(channel, remoteUserId);\n                },\n                onDataChannelClosed: function(event) {\n                    self.onDataChannelClosed(event, remoteUserId);\n                },\n                onRemoteStream: function(stream) {\n                    if (connection.peers[remoteUserId]) {\n                        connection.peers[remoteUserId].streams.push(stream);\n                    }\n\n                    if (isPluginRTC && window.PluginRTC) {\n                        var mediaElement = document.createElement('video');\n                        var body = connection.videosContainer;\n                        body.insertBefore(mediaElement, body.firstChild);\n                        setTimeout(function() {\n                            window.PluginRTC.attachMediaStream(mediaElement, stream);\n                        }, 3000);\n                        return;\n                    }\n\n                    self.onGettingRemoteMedia(stream, remoteUserId);\n                },\n                onRemoteStreamRemoved: function(stream) {\n                    self.onRemovingRemoteMedia(stream, remoteUserId);\n                },\n                onPeerStateChanged: function(states) {\n                    self.onPeerStateChanged(states);\n\n                    if (states.iceConnectionState === 'new') {\n                        self.onNegotiationStarted(remoteUserId, states);\n                    }\n\n                    if (states.iceConnectionState === 'connected') {\n                        self.onNegotiationCompleted(remoteUserId, states);\n                    }\n\n                    if (states.iceConnectionState.search(/closed|failed/gi) !== -1) {\n                        self.onUserLeft(remoteUserId);\n                        self.disconnectWith(remoteUserId);\n                    }\n                }\n            };\n        };\n\n        this.createNewPeer = function(remoteUserId, userPreferences) {\n            if (connection.maxParticipantsAllowed <= connection.getAllParticipants().length) {\n                return;\n            }\n\n            userPreferences = userPreferences || {};\n\n            if (connection.isInitiator && !!connection.session.audio && connection.session.audio === 'two-way' && !userPreferences.streamsToShare) {\n                userPreferences.isOneWay = false;\n                userPreferences.isDataOnly = false;\n                userPreferences.session = connection.session;\n            }\n\n            if (!userPreferences.isOneWay && !userPreferences.isDataOnly) {\n                userPreferences.isOneWay = true;\n                this.onNegotiationNeeded({\n                    enableMedia: true,\n                    userPreferences: userPreferences\n                }, remoteUserId);\n                return;\n            }\n\n            userPreferences = connection.setUserPreferences(userPreferences, remoteUserId);\n            var localConfig = this.getLocalConfig(null, remoteUserId, userPreferences);\n            connection.peers[remoteUserId] = new PeerInitiator(localConfig);\n        };\n\n        this.createAnsweringPeer = function(remoteSdp, remoteUserId, userPreferences) {\n            userPreferences = connection.setUserPreferences(userPreferences || {}, remoteUserId);\n\n            var localConfig = this.getLocalConfig(remoteSdp, remoteUserId, userPreferences);\n            connection.peers[remoteUserId] = new PeerInitiator(localConfig);\n        };\n\n        this.renegotiatePeer = function(remoteUserId, userPreferences, remoteSdp) {\n            if (!connection.peers[remoteUserId]) {\n                if (connection.enableLogs) {\n                    console.error('This peer (' + remoteUserId + ') does not exist. Renegotiation skipped.');\n                }\n                return;\n            }\n\n            if (!userPreferences) {\n                userPreferences = {};\n            }\n\n            userPreferences.renegotiatingPeer = true;\n            userPreferences.peerRef = connection.peers[remoteUserId].peer;\n            userPreferences.channels = connection.peers[remoteUserId].channels;\n\n            var localConfig = this.getLocalConfig(remoteSdp, remoteUserId, userPreferences);\n\n            connection.peers[remoteUserId] = new PeerInitiator(localConfig);\n        };\n\n        this.replaceTrack = function(track, remoteUserId, isVideoTrack) {\n            if (!connection.peers[remoteUserId]) {\n                throw 'This peer (' + remoteUserId + ') does not exist.';\n            }\n\n            var peer = connection.peers[remoteUserId].peer;\n\n            if (!!peer.getSenders && typeof peer.getSenders === 'function' && peer.getSenders().length) {\n                peer.getSenders().forEach(function(rtpSender) {\n                    if (isVideoTrack && rtpSender.track instanceof VideoStreamTrack) {\n                        connection.peers[remoteUserId].peer.lastVideoTrack = rtpSender.track;\n                        rtpSender.replaceTrack(track);\n                    }\n\n                    if (!isVideoTrack && rtpSender.track instanceof AudioStreamTrack) {\n                        connection.peers[remoteUserId].peer.lastAudioTrack = rtpSender.track;\n                        rtpSender.replaceTrack(track);\n                    }\n                });\n                return;\n            }\n\n            console.warn('RTPSender.replaceTrack is NOT supported.');\n            this.renegotiatePeer(remoteUserId);\n        };\n\n        this.onNegotiationNeeded = function(message, remoteUserId) {};\n        this.addNegotiatedMessage = function(message, remoteUserId) {\n            if (message.type && message.sdp) {\n                if (message.type == 'answer') {\n                    if (connection.peers[remoteUserId]) {\n                        connection.peers[remoteUserId].addRemoteSdp(message);\n                    }\n                }\n\n                if (message.type == 'offer') {\n                    if (message.renegotiatingPeer) {\n                        this.renegotiatePeer(remoteUserId, null, message);\n                    } else {\n                        this.createAnsweringPeer(message, remoteUserId);\n                    }\n                }\n\n                if (connection.enableLogs) {\n                    console.log('Remote peer\\'s sdp:', message.sdp);\n                }\n                return;\n            }\n\n            if (message.candidate) {\n                if (connection.peers[remoteUserId]) {\n                    connection.peers[remoteUserId].addRemoteCandidate(message);\n                }\n\n                if (connection.enableLogs) {\n                    console.log('Remote peer\\'s candidate pairs:', message.candidate);\n                }\n                return;\n            }\n\n            if (message.enableMedia) {\n                connection.session = message.userPreferences.session || connection.session;\n\n                if (connection.session.oneway && connection.attachStreams.length) {\n                    connection.attachStreams = [];\n                }\n\n                if (message.userPreferences.isDataOnly && connection.attachStreams.length) {\n                    connection.attachStreams.length = [];\n                }\n\n                var streamsToShare = {};\n                connection.attachStreams.forEach(function(stream) {\n                    streamsToShare[stream.streamid] = {\n                        isAudio: !!stream.isAudio,\n                        isVideo: !!stream.isVideo,\n                        isScreen: !!stream.isScreen\n                    };\n                });\n                message.userPreferences.streamsToShare = streamsToShare;\n\n                self.onNegotiationNeeded({\n                    readyForOffer: true,\n                    userPreferences: message.userPreferences\n                }, remoteUserId);\n            }\n\n            if (message.readyForOffer) {\n                connection.onReadyForOffer(remoteUserId, message.userPreferences);\n            }\n\n            function cb(stream) {\n                gumCallback(stream, message, remoteUserId);\n            }\n        };\n\n        function gumCallback(stream, message, remoteUserId) {\n            var streamsToShare = {};\n            connection.attachStreams.forEach(function(stream) {\n                streamsToShare[stream.streamid] = {\n                    isAudio: !!stream.isAudio,\n                    isVideo: !!stream.isVideo,\n                    isScreen: !!stream.isScreen\n                };\n            });\n            message.userPreferences.streamsToShare = streamsToShare;\n\n            self.onNegotiationNeeded({\n                readyForOffer: true,\n                userPreferences: message.userPreferences\n            }, remoteUserId);\n        }\n\n        this.connectNewParticipantWithAllBroadcasters = function(newParticipantId, userPreferences, broadcastersList) {\n            if (connection.socket.isIO) {\n                return;\n            }\n\n            broadcastersList = (broadcastersList || '').split('|-,-|');\n\n            if (!broadcastersList.length) {\n                return;\n            }\n\n            var firstBroadcaster;\n\n            var remainingBroadcasters = [];\n            broadcastersList.forEach(function(list) {\n                list = (list || '').replace(/ /g, '');\n                if (list.length) {\n                    if (!firstBroadcaster) {\n                        firstBroadcaster = list;\n                    } else {\n                        remainingBroadcasters.push(list);\n                    }\n                }\n            });\n\n            if (!firstBroadcaster) {\n                return;\n            }\n\n            self.onNegotiationNeeded({\n                newParticipant: newParticipantId,\n                userPreferences: userPreferences || false\n            }, firstBroadcaster);\n\n            if (!remainingBroadcasters.length) {\n                return;\n            }\n\n            setTimeout(function() {\n                self.connectNewParticipantWithAllBroadcasters(newParticipantId, userPreferences, remainingBroadcasters.join('|-,-|'));\n            }, 3 * 1000);\n        };\n\n        this.onGettingRemoteMedia = function(stream, remoteUserId) {};\n        this.onRemovingRemoteMedia = function(stream, remoteUserId) {};\n        this.onGettingLocalMedia = function(localStream) {};\n        this.onLocalMediaError = function(error, constraints) {\n            connection.onMediaError(error, constraints);\n        };\n\n        function initFileBufferReader() {\n            connection.fbr = new FileBufferReader();\n            connection.fbr.onProgress = function(chunk) {\n                connection.onFileProgress(chunk);\n            };\n            connection.fbr.onBegin = function(file) {\n                connection.onFileStart(file);\n            };\n            connection.fbr.onEnd = function(file) {\n                connection.onFileEnd(file);\n            };\n        }\n\n        this.shareFile = function(file, remoteUserId) {\n            if (!connection.enableFileSharing) {\n                throw '\"connection.enableFileSharing\" is false.';\n            }\n\n            initFileBufferReader();\n\n            connection.fbr.readAsArrayBuffer(file, function(uuid) {\n                var arrayOfUsers = connection.getAllParticipants();\n\n                if (remoteUserId) {\n                    arrayOfUsers = [remoteUserId];\n                }\n\n                arrayOfUsers.forEach(function(participant) {\n                    connection.fbr.getNextChunk(uuid, function(nextChunk) {\n                        connection.peers[participant].channels.forEach(function(channel) {\n                            channel.send(nextChunk);\n                        });\n                    }, participant);\n                });\n            }, {\n                userid: connection.userid,\n                // extra: connection.extra,\n                chunkSize: isFirefox ? 15 * 1000 : connection.chunkSize || 0\n            });\n        };\n\n        if (typeof 'TextReceiver' !== 'undefined') {\n            var textReceiver = new TextReceiver(connection);\n        }\n\n        this.onDataChannelMessage = function(message, remoteUserId) {\n            textReceiver.receive(JSON.parse(message), remoteUserId, connection.peers[remoteUserId] ? connection.peers[remoteUserId].extra : {});\n        };\n\n        this.onDataChannelClosed = function(event, remoteUserId) {\n            event.userid = remoteUserId;\n            event.extra = connection.peers[remoteUserId] ? connection.peers[remoteUserId].extra : {};\n            connection.onclose(event);\n        };\n\n        this.onDataChannelError = function(error, remoteUserId) {\n            error.userid = remoteUserId;\n            event.extra = connection.peers[remoteUserId] ? connection.peers[remoteUserId].extra : {};\n            connection.onerror(error);\n        };\n\n        this.onDataChannelOpened = function(channel, remoteUserId) {\n            // keep last channel only; we are not expecting parallel/channels channels\n            if (connection.peers[remoteUserId].channels.length) {\n                connection.peers[remoteUserId].channels = [channel];\n                return;\n            }\n\n            connection.peers[remoteUserId].channels.push(channel);\n            connection.onopen({\n                userid: remoteUserId,\n                extra: connection.peers[remoteUserId] ? connection.peers[remoteUserId].extra : {},\n                channel: channel\n            });\n        };\n\n        this.onPeerStateChanged = function(state) {\n            connection.onPeerStateChanged(state);\n        };\n\n        this.onNegotiationStarted = function(remoteUserId, states) {};\n        this.onNegotiationCompleted = function(remoteUserId, states) {};\n\n        this.getRemoteStreams = function(remoteUserId) {\n            remoteUserId = remoteUserId || connection.peers.getAllParticipants()[0];\n            return connection.peers[remoteUserId] ? connection.peers[remoteUserId].streams : [];\n        };\n\n        this.isPluginRTC = connection.isPluginRTC = isPluginRTC;\n    }\n\n    // globals.js\n\n    var isOpera = !!window.opera || navigator.userAgent.indexOf(' OPR/') >= 0;\n    var isFirefox = typeof window.InstallTrigger !== 'undefined';\n    var isSafari = Object.prototype.toString.call(window.HTMLElement).indexOf('Constructor') > 0;\n    var isChrome = !!window.chrome && !isOpera;\n    var isIE = !!document.documentMode;\n\n    var isMobileDevice = !!navigator.userAgent.match(/Android|iPhone|iPad|iPod|BlackBerry|IEMobile/i);\n\n    if (typeof cordova !== 'undefined') {\n        isMobileDevice = true;\n        isChrome = true;\n    }\n\n    if (navigator && navigator.userAgent && navigator.userAgent.indexOf('Crosswalk') !== -1) {\n        isMobileDevice = true;\n        isChrome = true;\n    }\n\n    var isPluginRTC = !isMobileDevice && (isSafari || isIE);\n\n    if (isPluginRTC && typeof URL !== 'undefined') {\n        URL.createObjectURL = function() {};\n    }\n\n    // detect node-webkit\n    var isNodeWebkit = !!(window.process && (typeof window.process === 'object') && window.process.versions && window.process.versions['node-webkit']);\n\n    var chromeVersion = 50;\n    var matchArray = navigator.userAgent.match(/Chrom(e|ium)\\/([0-9]+)\\./);\n    if (isChrome && matchArray && matchArray[2]) {\n        chromeVersion = parseInt(matchArray[2], 10);\n    }\n\n    var firefoxVersion = 50;\n    matchArray = navigator.userAgent.match(/Firefox\\/(.*)/);\n    if (isFirefox && matchArray && matchArray[1]) {\n        firefoxVersion = parseInt(matchArray[1], 10);\n    }\n\n    function fireEvent(obj, eventName, args) {\n        if (typeof CustomEvent === 'undefined') {\n            return;\n        }\n\n        var eventDetail = {\n            arguments: args,\n            __exposedProps__: args\n        };\n\n        var event = new CustomEvent(eventName, eventDetail);\n        obj.dispatchEvent(event);\n    }\n\n    function setHarkEvents(connection, streamEvent) {\n        if (!connection || !streamEvent) {\n            throw 'Both arguments are required.';\n        }\n\n        if (!connection.onspeaking || !connection.onsilence) {\n            return;\n        }\n\n        if (typeof hark === 'undefined') {\n            throw 'hark.js not found.';\n        }\n\n        hark(streamEvent.stream, {\n            onspeaking: function() {\n                connection.onspeaking(streamEvent);\n            },\n            onsilence: function() {\n                connection.onsilence(streamEvent);\n            },\n            onvolumechange: function(volume, threshold) {\n                if (!connection.onvolumechange) {\n                    return;\n                }\n                connection.onvolumechange(merge({\n                    volume: volume,\n                    threshold: threshold\n                }, streamEvent));\n            }\n        });\n    }\n\n    function setMuteHandlers(connection, streamEvent) {\n        if (!streamEvent.stream || !streamEvent.stream || !streamEvent.stream.addEventListener) return;\n\n        streamEvent.stream.addEventListener('mute', function(event) {\n            event = connection.streamEvents[streamEvent.streamid];\n\n            event.session = {\n                audio: event.muteType === 'audio',\n                video: event.muteType === 'video'\n            };\n\n            connection.onmute(event);\n        }, false);\n\n        streamEvent.stream.addEventListener('unmute', function(event) {\n            event = connection.streamEvents[streamEvent.streamid];\n\n            event.session = {\n                audio: event.unmuteType === 'audio',\n                video: event.unmuteType === 'video'\n            };\n\n            connection.onunmute(event);\n        }, false);\n    }\n\n    function getRandomString() {\n        if (window.crypto && window.crypto.getRandomValues && navigator.userAgent.indexOf('Safari') === -1) {\n            var a = window.crypto.getRandomValues(new Uint32Array(3)),\n                token = '';\n            for (var i = 0, l = a.length; i < l; i++) {\n                token += a[i].toString(36);\n            }\n            return token;\n        } else {\n            return (Math.random() * new Date().getTime()).toString(36).replace(/\\./g, '');\n        }\n    }\n\n    // Get HTMLAudioElement/HTMLVideoElement accordingly\n\n    function getRMCMediaElement(stream, callback, connection) {\n        var isAudioOnly = false;\n        if (!!stream.getVideoTracks && !stream.getVideoTracks().length) {\n            isAudioOnly = true;\n        }\n\n        var mediaElement = document.createElement(isAudioOnly ? 'audio' : 'video');\n\n        if (isPluginRTC && window.PluginRTC) {\n            connection.videosContainer.insertBefore(mediaElement, connection.videosContainer.firstChild);\n\n            setTimeout(function() {\n                window.PluginRTC.attachMediaStream(mediaElement, stream);\n                callback(mediaElement);\n            }, 1000);\n\n            return;\n        }\n\n        // \"mozSrcObject\" is always preferred over \"src\"!!\n        mediaElement[isFirefox ? 'mozSrcObject' : 'src'] = isFirefox ? stream : window.URL.createObjectURL(stream);\n        mediaElement.controls = true;\n\n        // http://goo.gl/WZ5nFl\n        // Firefox don't yet support onended for any stream (remote/local)\n        if (isFirefox) {\n            var streamEndedEvent = 'ended';\n\n            if ('oninactive' in mediaElement) {\n                streamEndedEvent = 'inactive';\n            }\n\n            mediaElement.addEventListener(streamEndedEvent, function() {\n                // fireEvent(stream, streamEndedEvent, stream);\n                currentUserMediaRequest.remove(stream.idInstance);\n\n                if (stream.type === 'local') {\n                    streamEndedEvent = 'ended';\n\n                    if ('oninactive' in stream) {\n                        streamEndedEvent = 'inactive';\n                    }\n\n                    StreamsHandler.onSyncNeeded(stream.streamid, streamEndedEvent);\n\n                    connection.attachStreams.forEach(function(aStream, idx) {\n                        if (stream.streamid === aStream.streamid) {\n                            delete connection.attachStreams[idx];\n                        }\n                    });\n\n                    var newStreamsArray = [];\n                    connection.attachStreams.forEach(function(aStream) {\n                        if (aStream) {\n                            newStreamsArray.push(aStream);\n                        }\n                    });\n                    connection.attachStreams = newStreamsArray;\n\n                    var streamEvent = connection.streamEvents[stream.streamid];\n\n                    if (streamEvent) {\n                        connection.onstreamended(streamEvent);\n                        return;\n                    }\n                    if (this.parentNode) {\n                        this.parentNode.removeChild(this);\n                    }\n                }\n            }, false);\n        }\n\n        mediaElement.play();\n        callback(mediaElement);\n    }\n\n    // if IE\n    if (!window.addEventListener) {\n        window.addEventListener = function(el, eventName, eventHandler) {\n            if (!el.attachEvent) {\n                return;\n            }\n            el.attachEvent('on' + eventName, eventHandler);\n        };\n    }\n\n    function listenEventHandler(eventName, eventHandler) {\n        window.removeEventListener(eventName, eventHandler);\n        window.addEventListener(eventName, eventHandler, false);\n    }\n\n    window.attachEventListener = function(video, type, listener, useCapture) {\n        video.addEventListener(type, listener, useCapture);\n    };\n\n    function removeNullEntries(array) {\n        var newArray = [];\n        array.forEach(function(item) {\n            if (item) {\n                newArray.push(item);\n            }\n        });\n        return newArray;\n    }\n\n\n    function isData(session) {\n        return !session.audio && !session.video && !session.screen && session.data;\n    }\n\n    function isNull(obj) {\n        return typeof obj === 'undefined';\n    }\n\n    function isString(obj) {\n        return typeof obj === 'string';\n    }\n\n    var MediaStream = window.MediaStream;\n\n    if (typeof MediaStream === 'undefined' && typeof webkitMediaStream !== 'undefined') {\n        MediaStream = webkitMediaStream;\n    }\n\n    /*global MediaStream:true */\n    if (typeof MediaStream !== 'undefined') {\n        if (!('getVideoTracks' in MediaStream.prototype)) {\n            MediaStream.prototype.getVideoTracks = function() {\n                if (!this.getTracks) {\n                    return [];\n                }\n\n                var tracks = [];\n                this.getTracks.forEach(function(track) {\n                    if (track.kind.toString().indexOf('video') !== -1) {\n                        tracks.push(track);\n                    }\n                });\n                return tracks;\n            };\n\n            MediaStream.prototype.getAudioTracks = function() {\n                if (!this.getTracks) {\n                    return [];\n                }\n\n                var tracks = [];\n                this.getTracks.forEach(function(track) {\n                    if (track.kind.toString().indexOf('audio') !== -1) {\n                        tracks.push(track);\n                    }\n                });\n                return tracks;\n            };\n        }\n\n        if (!('stop' in MediaStream.prototype)) {\n            MediaStream.prototype.stop = function() {\n                this.getAudioTracks().forEach(function(track) {\n                    if (!!track.stop) {\n                        track.stop();\n                    }\n                });\n\n                this.getVideoTracks().forEach(function(track) {\n                    if (!!track.stop) {\n                        track.stop();\n                    }\n                });\n            };\n        }\n    }\n\n    function isAudioPlusTab(connection, audioPlusTab) {\n        if (connection.session.audio && connection.session.audio === 'two-way') {\n            return false;\n        }\n\n        if (isFirefox && audioPlusTab !== false) {\n            return true;\n        }\n\n        if (!isChrome || chromeVersion < 50) return false;\n\n        if (typeof audioPlusTab === true) {\n            return true;\n        }\n\n        if (typeof audioPlusTab === 'undefined' && connection.session.audio && connection.session.screen && !connection.session.video) {\n            audioPlusTab = true;\n            return true;\n        }\n\n        return false;\n    }\n\n    function getAudioScreenConstraints(screen_constraints) {\n        if (isFirefox) {\n            return true;\n        }\n\n        if (!isChrome) return false;\n\n        return {\n            mandatory: {\n                chromeMediaSource: screen_constraints.mandatory.chromeMediaSource,\n                chromeMediaSourceId: screen_constraints.mandatory.chromeMediaSourceId\n            }\n        };\n    }\n\n    window.iOSDefaultAudioOutputDevice = window.iOSDefaultAudioOutputDevice || 'speaker'; // earpiece or speaker\n\n    // Last time updated: 2017-03-11 6:31:40 AM UTC\n\n    // Latest file can be found here: https://cdn.webrtc-experiment.com/DetectRTC.js\n\n    // Muaz Khan     - www.MuazKhan.com\n    // MIT License   - www.WebRTC-Experiment.com/licence\n    // Documentation - github.com/muaz-khan/DetectRTC\n    // ____________\n    // DetectRTC.js\n\n    // DetectRTC.hasWebcam (has webcam device!)\n    // DetectRTC.hasMicrophone (has microphone device!)\n    // DetectRTC.hasSpeakers (has speakers!)\n\n    (function() {\n\n        'use strict';\n\n        var browserFakeUserAgent = 'Fake/5.0 (FakeOS) AppleWebKit/123 (KHTML, like Gecko) Fake/12.3.4567.89 Fake/123.45';\n\n        var isNodejs = typeof process === 'object' && typeof process.versions === 'object' && process.versions.node;\n        if (isNodejs) {\n            var version = process.versions.node.toString().replace('v', '');\n            browserFakeUserAgent = 'Nodejs/' + version + ' (NodeOS) AppleWebKit/' + version + ' (KHTML, like Gecko) Nodejs/' + version + ' Nodejs/' + version\n        }\n\n        (function(that) {\n            if (typeof window !== 'undefined') {\n                return;\n            }\n\n            if (typeof window === 'undefined' && typeof global !== 'undefined') {\n                global.navigator = {\n                    userAgent: browserFakeUserAgent,\n                    getUserMedia: function() {}\n                };\n\n                /*global window:true */\n                that.window = global;\n            } else if (typeof window === 'undefined') {\n                // window = this;\n            }\n\n            if (typeof document === 'undefined') {\n                /*global document:true */\n                that.document = {};\n\n                document.createElement = document.captureStream = document.mozCaptureStream = function() {\n                    return {};\n                };\n            }\n\n            if (typeof location === 'undefined') {\n                /*global location:true */\n                that.location = {\n                    protocol: 'file:',\n                    href: '',\n                    hash: ''\n                };\n            }\n\n            if (typeof screen === 'undefined') {\n                /*global screen:true */\n                that.screen = {\n                    width: 0,\n                    height: 0\n                };\n            }\n        })(typeof global !== 'undefined' ? global : window);\n\n        /*global navigator:true */\n        var navigator = window.navigator;\n\n        if (typeof navigator !== 'undefined') {\n            if (typeof navigator.webkitGetUserMedia !== 'undefined') {\n                navigator.getUserMedia = navigator.webkitGetUserMedia;\n            }\n\n            if (typeof navigator.mozGetUserMedia !== 'undefined') {\n                navigator.getUserMedia = navigator.mozGetUserMedia;\n            }\n        } else {\n            navigator = {\n                getUserMedia: function() {},\n                userAgent: browserFakeUserAgent\n            };\n        }\n\n        var isMobileDevice = !!(/Android|webOS|iPhone|iPad|iPod|BB10|BlackBerry|IEMobile|Opera Mini|Mobile|mobile/i.test(navigator.userAgent || ''));\n\n        var isEdge = navigator.userAgent.indexOf('Edge') !== -1 && (!!navigator.msSaveOrOpenBlob || !!navigator.msSaveBlob);\n\n        var isOpera = !!window.opera || navigator.userAgent.indexOf(' OPR/') >= 0;\n        var isFirefox = typeof window.InstallTrigger !== 'undefined';\n        var isSafari = Object.prototype.toString.call(window.HTMLElement).indexOf('Constructor') > 0;\n        var isChrome = !!window.chrome && !isOpera;\n        var isIE = !!document.documentMode && !isEdge;\n\n        // this one can also be used:\n        // https://www.websocket.org/js/stuff.js (DetectBrowser.js)\n\n        function getBrowserInfo() {\n            var nVer = navigator.appVersion;\n            var nAgt = navigator.userAgent;\n            var browserName = navigator.appName;\n            var fullVersion = '' + parseFloat(navigator.appVersion);\n            var majorVersion = parseInt(navigator.appVersion, 10);\n            var nameOffset, verOffset, ix;\n\n            // In Opera, the true version is after 'Opera' or after 'Version'\n            if (isOpera) {\n                browserName = 'Opera';\n                try {\n                    fullVersion = navigator.userAgent.split('OPR/')[1].split(' ')[0];\n                    majorVersion = fullVersion.split('.')[0];\n                } catch (e) {\n                    fullVersion = '0.0.0.0';\n                    majorVersion = 0;\n                }\n            }\n            // In MSIE, the true version is after 'MSIE' in userAgent\n            else if (isIE) {\n                verOffset = nAgt.indexOf('MSIE');\n                browserName = 'IE';\n                fullVersion = nAgt.substring(verOffset + 5);\n            }\n            // In Chrome, the true version is after 'Chrome' \n            else if (isChrome) {\n                verOffset = nAgt.indexOf('Chrome');\n                browserName = 'Chrome';\n                fullVersion = nAgt.substring(verOffset + 7);\n            }\n            // In Safari, the true version is after 'Safari' or after 'Version' \n            else if (isSafari) {\n                verOffset = nAgt.indexOf('Safari');\n                browserName = 'Safari';\n                fullVersion = nAgt.substring(verOffset + 7);\n\n                if ((verOffset = nAgt.indexOf('Version')) !== -1) {\n                    fullVersion = nAgt.substring(verOffset + 8);\n                }\n            }\n            // In Firefox, the true version is after 'Firefox' \n            else if (isFirefox) {\n                verOffset = nAgt.indexOf('Firefox');\n                browserName = 'Firefox';\n                fullVersion = nAgt.substring(verOffset + 8);\n            }\n\n            // In most other browsers, 'name/version' is at the end of userAgent \n            else if ((nameOffset = nAgt.lastIndexOf(' ') + 1) < (verOffset = nAgt.lastIndexOf('/'))) {\n                browserName = nAgt.substring(nameOffset, verOffset);\n                fullVersion = nAgt.substring(verOffset + 1);\n\n                if (browserName.toLowerCase() === browserName.toUpperCase()) {\n                    browserName = navigator.appName;\n                }\n            }\n\n            if (isEdge) {\n                browserName = 'Edge';\n                // fullVersion = navigator.userAgent.split('Edge/')[1];\n                fullVersion = parseInt(navigator.userAgent.match(/Edge\\/(\\d+).(\\d+)$/)[2], 10).toString();\n            }\n\n            // trim the fullVersion string at semicolon/space if present\n            if ((ix = fullVersion.indexOf(';')) !== -1) {\n                fullVersion = fullVersion.substring(0, ix);\n            }\n\n            if ((ix = fullVersion.indexOf(' ')) !== -1) {\n                fullVersion = fullVersion.substring(0, ix);\n            }\n\n            majorVersion = parseInt('' + fullVersion, 10);\n\n            if (isNaN(majorVersion)) {\n                fullVersion = '' + parseFloat(navigator.appVersion);\n                majorVersion = parseInt(navigator.appVersion, 10);\n            }\n\n            return {\n                fullVersion: fullVersion,\n                version: majorVersion,\n                name: browserName,\n                isPrivateBrowsing: false\n            };\n        }\n\n        // via: https://gist.github.com/cou929/7973956\n\n        function retry(isDone, next) {\n            var currentTrial = 0,\n                maxRetry = 50,\n                interval = 10,\n                isTimeout = false;\n            var id = window.setInterval(\n                function() {\n                    if (isDone()) {\n                        window.clearInterval(id);\n                        next(isTimeout);\n                    }\n                    if (currentTrial++ > maxRetry) {\n                        window.clearInterval(id);\n                        isTimeout = true;\n                        next(isTimeout);\n                    }\n                },\n                10\n            );\n        }\n\n        function isIE10OrLater(userAgent) {\n            var ua = userAgent.toLowerCase();\n            if (ua.indexOf('msie') === 0 && ua.indexOf('trident') === 0) {\n                return false;\n            }\n            var match = /(?:msie|rv:)\\s?([\\d\\.]+)/.exec(ua);\n            if (match && parseInt(match[1], 10) >= 10) {\n                return true;\n            }\n            return false;\n        }\n\n        function detectPrivateMode(callback) {\n            var isPrivate;\n\n            try {\n\n                if (window.webkitRequestFileSystem) {\n                    window.webkitRequestFileSystem(\n                        window.TEMPORARY, 1,\n                        function() {\n                            isPrivate = false;\n                        },\n                        function(e) {\n                            isPrivate = true;\n                        }\n                    );\n                } else if (window.indexedDB && /Firefox/.test(window.navigator.userAgent)) {\n                    var db;\n                    try {\n                        db = window.indexedDB.open('test');\n                        db.onerror = function() {\n                            return true;\n                        };\n                    } catch (e) {\n                        isPrivate = true;\n                    }\n\n                    if (typeof isPrivate === 'undefined') {\n                        retry(\n                            function isDone() {\n                                return db.readyState === 'done' ? true : false;\n                            },\n                            function next(isTimeout) {\n                                if (!isTimeout) {\n                                    isPrivate = db.result ? false : true;\n                                }\n                            }\n                        );\n                    }\n                } else if (isIE10OrLater(window.navigator.userAgent)) {\n                    isPrivate = false;\n                    try {\n                        if (!window.indexedDB) {\n                            isPrivate = true;\n                        }\n                    } catch (e) {\n                        isPrivate = true;\n                    }\n                } else if (window.localStorage && /Safari/.test(window.navigator.userAgent)) {\n                    try {\n                        window.localStorage.setItem('test', 1);\n                    } catch (e) {\n                        isPrivate = true;\n                    }\n\n                    if (typeof isPrivate === 'undefined') {\n                        isPrivate = false;\n                        window.localStorage.removeItem('test');\n                    }\n                }\n\n            } catch (e) {\n                isPrivate = false;\n            }\n\n            retry(\n                function isDone() {\n                    return typeof isPrivate !== 'undefined' ? true : false;\n                },\n                function next(isTimeout) {\n                    callback(isPrivate);\n                }\n            );\n        }\n\n        var isMobile = {\n            Android: function() {\n                return navigator.userAgent.match(/Android/i);\n            },\n            BlackBerry: function() {\n                return navigator.userAgent.match(/BlackBerry|BB10/i);\n            },\n            iOS: function() {\n                return navigator.userAgent.match(/iPhone|iPad|iPod/i);\n            },\n            Opera: function() {\n                return navigator.userAgent.match(/Opera Mini/i);\n            },\n            Windows: function() {\n                return navigator.userAgent.match(/IEMobile/i);\n            },\n            any: function() {\n                return (isMobile.Android() || isMobile.BlackBerry() || isMobile.iOS() || isMobile.Opera() || isMobile.Windows());\n            },\n            getOsName: function() {\n                var osName = 'Unknown OS';\n                if (isMobile.Android()) {\n                    osName = 'Android';\n                }\n\n                if (isMobile.BlackBerry()) {\n                    osName = 'BlackBerry';\n                }\n\n                if (isMobile.iOS()) {\n                    osName = 'iOS';\n                }\n\n                if (isMobile.Opera()) {\n                    osName = 'Opera Mini';\n                }\n\n                if (isMobile.Windows()) {\n                    osName = 'Windows';\n                }\n\n                return osName;\n            }\n        };\n\n        // via: http://jsfiddle.net/ChristianL/AVyND/\n        function detectDesktopOS() {\n            var unknown = '-';\n\n            var nVer = navigator.appVersion;\n            var nAgt = navigator.userAgent;\n\n            var os = unknown;\n            var clientStrings = [{\n                s: 'Windows 10',\n                r: /(Windows 10.0|Windows NT 10.0)/\n            }, {\n                s: 'Windows 8.1',\n                r: /(Windows 8.1|Windows NT 6.3)/\n            }, {\n                s: 'Windows 8',\n                r: /(Windows 8|Windows NT 6.2)/\n            }, {\n                s: 'Windows 7',\n                r: /(Windows 7|Windows NT 6.1)/\n            }, {\n                s: 'Windows Vista',\n                r: /Windows NT 6.0/\n            }, {\n                s: 'Windows Server 2003',\n                r: /Windows NT 5.2/\n            }, {\n                s: 'Windows XP',\n                r: /(Windows NT 5.1|Windows XP)/\n            }, {\n                s: 'Windows 2000',\n                r: /(Windows NT 5.0|Windows 2000)/\n            }, {\n                s: 'Windows ME',\n                r: /(Win 9x 4.90|Windows ME)/\n            }, {\n                s: 'Windows 98',\n                r: /(Windows 98|Win98)/\n            }, {\n                s: 'Windows 95',\n                r: /(Windows 95|Win95|Windows_95)/\n            }, {\n                s: 'Windows NT 4.0',\n                r: /(Windows NT 4.0|WinNT4.0|WinNT|Windows NT)/\n            }, {\n                s: 'Windows CE',\n                r: /Windows CE/\n            }, {\n                s: 'Windows 3.11',\n                r: /Win16/\n            }, {\n                s: 'Android',\n                r: /Android/\n            }, {\n                s: 'Open BSD',\n                r: /OpenBSD/\n            }, {\n                s: 'Sun OS',\n                r: /SunOS/\n            }, {\n                s: 'Linux',\n                r: /(Linux|X11)/\n            }, {\n                s: 'iOS',\n                r: /(iPhone|iPad|iPod)/\n            }, {\n                s: 'Mac OS X',\n                r: /Mac OS X/\n            }, {\n                s: 'Mac OS',\n                r: /(MacPPC|MacIntel|Mac_PowerPC|Macintosh)/\n            }, {\n                s: 'QNX',\n                r: /QNX/\n            }, {\n                s: 'UNIX',\n                r: /UNIX/\n            }, {\n                s: 'BeOS',\n                r: /BeOS/\n            }, {\n                s: 'OS/2',\n                r: /OS\\/2/\n            }, {\n                s: 'Search Bot',\n                r: /(nuhk|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask Jeeves\\/Teoma|ia_archiver)/\n            }];\n            for (var id in clientStrings) {\n                var cs = clientStrings[id];\n                if (cs.r.test(nAgt)) {\n                    os = cs.s;\n                    break;\n                }\n            }\n\n            var osVersion = unknown;\n\n            if (/Windows/.test(os)) {\n                if (/Windows (.*)/.test(os)) {\n                    osVersion = /Windows (.*)/.exec(os)[1];\n                }\n                os = 'Windows';\n            }\n\n            switch (os) {\n                case 'Mac OS X':\n                    if (/Mac OS X (10[\\.\\_\\d]+)/.test(nAgt)) {\n                        osVersion = /Mac OS X (10[\\.\\_\\d]+)/.exec(nAgt)[1];\n                    }\n                    break;\n                case 'Android':\n                    if (/Android ([\\.\\_\\d]+)/.test(nAgt)) {\n                        osVersion = /Android ([\\.\\_\\d]+)/.exec(nAgt)[1];\n                    }\n                    break;\n                case 'iOS':\n                    if (/OS (\\d+)_(\\d+)_?(\\d+)?/.test(nAgt)) {\n                        osVersion = /OS (\\d+)_(\\d+)_?(\\d+)?/.exec(nVer);\n                        osVersion = osVersion[1] + '.' + osVersion[2] + '.' + (osVersion[3] | 0);\n                    }\n                    break;\n            }\n\n            return {\n                osName: os,\n                osVersion: osVersion\n            };\n        }\n\n        var osName = 'Unknown OS';\n        var osVersion = 'Unknown OS Version';\n\n        function getAndroidVersion(ua) {\n            ua = (ua || navigator.userAgent).toLowerCase();\n            var match = ua.match(/android\\s([0-9\\.]*)/);\n            return match ? match[1] : false;\n        }\n\n        var osInfo = detectDesktopOS();\n\n        if (osInfo && osInfo.osName && osInfo.osName != '-') {\n            osName = osInfo.osName;\n            osVersion = osInfo.osVersion;\n        } else if (isMobile.any()) {\n            osName = isMobile.getOsName();\n\n            if (osName == 'Android') {\n                osVersion = getAndroidVersion();\n            }\n        }\n\n        var isNodejs = typeof process === 'object' && typeof process.versions === 'object' && process.versions.node;\n\n        if (osName === 'Unknown OS' && isNodejs) {\n            osName = 'Nodejs';\n            osVersion = process.versions.node.toString().replace('v', '');\n        }\n\n        var isCanvasSupportsStreamCapturing = false;\n        var isVideoSupportsStreamCapturing = false;\n        ['captureStream', 'mozCaptureStream', 'webkitCaptureStream'].forEach(function(item) {\n            if (!isCanvasSupportsStreamCapturing && item in document.createElement('canvas')) {\n                isCanvasSupportsStreamCapturing = true;\n            }\n\n            if (!isVideoSupportsStreamCapturing && item in document.createElement('video')) {\n                isVideoSupportsStreamCapturing = true;\n            }\n        });\n\n        // via: https://github.com/diafygi/webrtc-ips\n        function DetectLocalIPAddress(callback) {\n            if (!DetectRTC.isWebRTCSupported) {\n                return;\n            }\n\n            if (DetectRTC.isORTCSupported) {\n                return;\n            }\n\n            getIPs(function(ip) {\n                //local IPs\n                if (ip.match(/^(192\\.168\\.|169\\.254\\.|10\\.|172\\.(1[6-9]|2\\d|3[01]))/)) {\n                    callback('Local: ' + ip);\n                }\n\n                //assume the rest are public IPs\n                else {\n                    callback('Public: ' + ip);\n                }\n            });\n        }\n\n        //get the IP addresses associated with an account\n        function getIPs(callback) {\n            var ipDuplicates = {};\n\n            //compatibility for firefox and chrome\n            var RTCPeerConnection = window.RTCPeerConnection || window.mozRTCPeerConnection || window.webkitRTCPeerConnection;\n            var useWebKit = !!window.webkitRTCPeerConnection;\n\n            // bypass naive webrtc blocking using an iframe\n            if (!RTCPeerConnection) {\n                var iframe = document.getElementById('iframe');\n                if (!iframe) {\n                    //<iframe id=\"iframe\" sandbox=\"allow-same-origin\" style=\"display: none\"></iframe>\n                    throw 'NOTE: you need to have an iframe in the page right above the script tag.';\n                }\n                var win = iframe.contentWindow;\n                RTCPeerConnection = win.RTCPeerConnection || win.mozRTCPeerConnection || win.webkitRTCPeerConnection;\n                useWebKit = !!win.webkitRTCPeerConnection;\n            }\n\n            // if still no RTCPeerConnection then it is not supported by the browser so just return\n            if (!RTCPeerConnection) {\n                return;\n            }\n\n            //minimal requirements for data connection\n            var mediaConstraints = {\n                optional: [{\n                    RtpDataChannels: true\n                }]\n            };\n\n            //firefox already has a default stun server in about:config\n            //    media.peerconnection.default_iceservers =\n            //    [{\"url\": \"stun:stun.services.mozilla.com\"}]\n            var servers;\n\n            //add same stun server for chrome\n            if (useWebKit) {\n                servers = {\n                    iceServers: [{\n                        urls: 'stun:stun.services.mozilla.com'\n                    }]\n                };\n\n                if (typeof DetectRTC !== 'undefined' && DetectRTC.browser.isFirefox && DetectRTC.browser.version <= 38) {\n                    servers[0] = {\n                        url: servers[0].urls\n                    };\n                }\n            }\n\n            //construct a new RTCPeerConnection\n            var pc = new RTCPeerConnection(servers, mediaConstraints);\n\n            function handleCandidate(candidate) {\n                //match just the IP address\n                var ipRegex = /([0-9]{1,3}(\\.[0-9]{1,3}){3})/;\n                var match = ipRegex.exec(candidate);\n                if (!match) {\n                    console.warn('Could not match IP address in', candidate);\n                    return;\n                }\n                var ipAddress = match[1];\n\n                //remove duplicates\n                if (ipDuplicates[ipAddress] === undefined) {\n                    callback(ipAddress);\n                }\n\n                ipDuplicates[ipAddress] = true;\n            }\n\n            //listen for candidate events\n            pc.onicecandidate = function(ice) {\n                //skip non-candidate events\n                if (ice.candidate) {\n                    handleCandidate(ice.candidate.candidate);\n                }\n            };\n\n            //create a bogus data channel\n            pc.createDataChannel('');\n\n            //create an offer sdp\n            pc.createOffer(function(result) {\n\n                //trigger the stun server request\n                pc.setLocalDescription(result, function() {}, function() {});\n\n            }, function() {});\n\n            //wait for a while to let everything done\n            setTimeout(function() {\n                //read candidate info from local description\n                var lines = pc.localDescription.sdp.split('\\n');\n\n                lines.forEach(function(line) {\n                    if (line.indexOf('a=candidate:') === 0) {\n                        handleCandidate(line);\n                    }\n                });\n            }, 1000);\n        }\n\n        var MediaDevices = [];\n\n        var audioInputDevices = [];\n        var audioOutputDevices = [];\n        var videoInputDevices = [];\n\n        if (navigator.mediaDevices && navigator.mediaDevices.enumerateDevices) {\n            // Firefox 38+ seems having support of enumerateDevices\n            // Thanks @xdumaine/enumerateDevices\n            navigator.enumerateDevices = function(callback) {\n                navigator.mediaDevices.enumerateDevices().then(callback).catch(function() {\n                    callback([]);\n                });\n            };\n        }\n\n        // Media Devices detection\n        var canEnumerate = false;\n\n        /*global MediaStreamTrack:true */\n        if (typeof MediaStreamTrack !== 'undefined' && 'getSources' in MediaStreamTrack) {\n            canEnumerate = true;\n        } else if (navigator.mediaDevices && !!navigator.mediaDevices.enumerateDevices) {\n            canEnumerate = true;\n        }\n\n        var hasMicrophone = false;\n        var hasSpeakers = false;\n        var hasWebcam = false;\n\n        var isWebsiteHasMicrophonePermissions = false;\n        var isWebsiteHasWebcamPermissions = false;\n\n        // http://dev.w3.org/2011/webrtc/editor/getusermedia.html#mediadevices\n        function checkDeviceSupport(callback) {\n            if (!canEnumerate) {\n                if (callback) {\n                    callback();\n                }\n                return;\n            }\n\n            if (!navigator.enumerateDevices && window.MediaStreamTrack && window.MediaStreamTrack.getSources) {\n                navigator.enumerateDevices = window.MediaStreamTrack.getSources.bind(window.MediaStreamTrack);\n            }\n\n            if (!navigator.enumerateDevices && navigator.enumerateDevices) {\n                navigator.enumerateDevices = navigator.enumerateDevices.bind(navigator);\n            }\n\n            if (!navigator.enumerateDevices) {\n                if (callback) {\n                    callback();\n                }\n                return;\n            }\n\n            MediaDevices = [];\n\n            audioInputDevices = [];\n            audioOutputDevices = [];\n            videoInputDevices = [];\n\n            isWebsiteHasMicrophonePermissions = false;\n            isWebsiteHasWebcamPermissions = false;\n\n            // to prevent duplication\n            var alreadyUsedDevices = {};\n\n            navigator.enumerateDevices(function(devices) {\n                devices.forEach(function(_device) {\n                    var device = {};\n                    for (var d in _device) {\n                        try {\n                            if (typeof _device[d] !== 'function') {\n                                device[d] = _device[d];\n                            }\n                        } catch (e) {}\n                    }\n\n                    if (alreadyUsedDevices[device.deviceId + device.label]) {\n                        return;\n                    }\n\n                    // if it is MediaStreamTrack.getSources\n                    if (device.kind === 'audio') {\n                        device.kind = 'audioinput';\n                    }\n\n                    if (device.kind === 'video') {\n                        device.kind = 'videoinput';\n                    }\n\n                    if (!device.deviceId) {\n                        device.deviceId = device.id;\n                    }\n\n                    if (!device.id) {\n                        device.id = device.deviceId;\n                    }\n\n                    if (!device.label) {\n                        device.label = 'Please invoke getUserMedia once.';\n                        if (DetectRTC.browser.isChrome && DetectRTC.browser.version >= 46 && !/^(https:|chrome-extension:)$/g.test(location.protocol || '')) {\n                            if (document.domain.search && document.domain.search(/localhost|127.0./g) === -1) {\n                                device.label = 'HTTPs is required to get label of this ' + device.kind + ' device.';\n                            }\n                        }\n                    } else {\n                        if (device.kind === 'videoinput' && !isWebsiteHasWebcamPermissions) {\n                            isWebsiteHasWebcamPermissions = true;\n                        }\n\n                        if (device.kind === 'audioinput' && !isWebsiteHasMicrophonePermissions) {\n                            isWebsiteHasMicrophonePermissions = true;\n                        }\n                    }\n\n                    if (device.kind === 'audioinput') {\n                        hasMicrophone = true;\n\n                        if (audioInputDevices.indexOf(device) === -1) {\n                            audioInputDevices.push(device);\n                        }\n                    }\n\n                    if (device.kind === 'audiooutput') {\n                        hasSpeakers = true;\n\n                        if (audioOutputDevices.indexOf(device) === -1) {\n                            audioOutputDevices.push(device);\n                        }\n                    }\n\n                    if (device.kind === 'videoinput') {\n                        hasWebcam = true;\n\n                        if (videoInputDevices.indexOf(device) === -1) {\n                            videoInputDevices.push(device);\n                        }\n                    }\n\n                    // there is no 'videoouput' in the spec.\n                    MediaDevices.push(device);\n\n                    alreadyUsedDevices[device.deviceId + device.label] = device;\n                });\n\n                if (typeof DetectRTC !== 'undefined') {\n                    // to sync latest outputs\n                    DetectRTC.MediaDevices = MediaDevices;\n                    DetectRTC.hasMicrophone = hasMicrophone;\n                    DetectRTC.hasSpeakers = hasSpeakers;\n                    DetectRTC.hasWebcam = hasWebcam;\n\n                    DetectRTC.isWebsiteHasWebcamPermissions = isWebsiteHasWebcamPermissions;\n                    DetectRTC.isWebsiteHasMicrophonePermissions = isWebsiteHasMicrophonePermissions;\n\n                    DetectRTC.audioInputDevices = audioInputDevices;\n                    DetectRTC.audioOutputDevices = audioOutputDevices;\n                    DetectRTC.videoInputDevices = videoInputDevices;\n                }\n\n                if (callback) {\n                    callback();\n                }\n            });\n        }\n\n        // check for microphone/camera support!\n        checkDeviceSupport();\n\n        var DetectRTC = window.DetectRTC || {};\n\n        // ----------\n        // DetectRTC.browser.name || DetectRTC.browser.version || DetectRTC.browser.fullVersion\n        DetectRTC.browser = getBrowserInfo();\n\n        detectPrivateMode(function(isPrivateBrowsing) {\n            DetectRTC.browser.isPrivateBrowsing = !!isPrivateBrowsing;\n        });\n\n        // DetectRTC.isChrome || DetectRTC.isFirefox || DetectRTC.isEdge\n        DetectRTC.browser['is' + DetectRTC.browser.name] = true;\n\n        // -----------\n        DetectRTC.osName = osName;\n        DetectRTC.osVersion = osVersion;\n\n        var isNodeWebkit = typeof process === 'object' && typeof process.versions === 'object' && process.versions['node-webkit'];\n\n        // --------- Detect if system supports WebRTC 1.0 or WebRTC 1.1.\n        var isWebRTCSupported = false;\n        ['RTCPeerConnection', 'webkitRTCPeerConnection', 'mozRTCPeerConnection', 'RTCIceGatherer'].forEach(function(item) {\n            if (isWebRTCSupported) {\n                return;\n            }\n\n            if (item in window) {\n                isWebRTCSupported = true;\n            }\n        });\n        DetectRTC.isWebRTCSupported = isWebRTCSupported;\n\n        //-------\n        DetectRTC.isORTCSupported = typeof RTCIceGatherer !== 'undefined';\n\n        // --------- Detect if system supports screen capturing API\n        var isScreenCapturingSupported = false;\n        if (DetectRTC.browser.isChrome && DetectRTC.browser.version >= 35) {\n            isScreenCapturingSupported = true;\n        } else if (DetectRTC.browser.isFirefox && DetectRTC.browser.version >= 34) {\n            isScreenCapturingSupported = true;\n        }\n\n        if (!/^(https:|chrome-extension:)$/g.test(location.protocol || '')) {\n            if (document.domain.search && document.domain.search(/localhost|127.0./g) === -1) {\n                // DetectRTC.browser.isChrome\n                isScreenCapturingSupported = false;\n            }\n\n            if (DetectRTC.browser.isFirefox) {\n                isScreenCapturingSupported = false;\n            }\n        }\n        DetectRTC.isScreenCapturingSupported = isScreenCapturingSupported;\n\n        // --------- Detect if WebAudio API are supported\n        var webAudio = {\n            isSupported: false,\n            isCreateMediaStreamSourceSupported: false\n        };\n\n        ['AudioContext', 'webkitAudioContext', 'mozAudioContext', 'msAudioContext'].forEach(function(item) {\n            if (webAudio.isSupported) {\n                return;\n            }\n\n            if (item in window) {\n                webAudio.isSupported = true;\n\n                if (window[item] && 'createMediaStreamSource' in window[item].prototype) {\n                    webAudio.isCreateMediaStreamSourceSupported = true;\n                }\n            }\n        });\n        DetectRTC.isAudioContextSupported = webAudio.isSupported;\n        DetectRTC.isCreateMediaStreamSourceSupported = webAudio.isCreateMediaStreamSourceSupported;\n\n        // ---------- Detect if SCTP/RTP channels are supported.\n\n        var isRtpDataChannelsSupported = false;\n        if (DetectRTC.browser.isChrome && DetectRTC.browser.version > 31) {\n            isRtpDataChannelsSupported = true;\n        }\n        DetectRTC.isRtpDataChannelsSupported = isRtpDataChannelsSupported;\n\n        var isSCTPSupportd = false;\n        if (DetectRTC.browser.isFirefox && DetectRTC.browser.version > 28) {\n            isSCTPSupportd = true;\n        } else if (DetectRTC.browser.isChrome && DetectRTC.browser.version > 25) {\n            isSCTPSupportd = true;\n        } else if (DetectRTC.browser.isOpera && DetectRTC.browser.version >= 11) {\n            isSCTPSupportd = true;\n        }\n        DetectRTC.isSctpDataChannelsSupported = isSCTPSupportd;\n\n        // ---------\n\n        DetectRTC.isMobileDevice = isMobileDevice; // \"isMobileDevice\" boolean is defined in \"getBrowserInfo.js\"\n\n        // ------\n        var isGetUserMediaSupported = false;\n        if (navigator.getUserMedia) {\n            isGetUserMediaSupported = true;\n        } else if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n            isGetUserMediaSupported = true;\n        }\n\n        if (DetectRTC.browser.isChrome && DetectRTC.browser.version >= 46 && !/^(https:|chrome-extension:)$/g.test(location.protocol || '')) {\n            if (document.domain.search && document.domain.search(/localhost|127.0./g) === -1) {\n                isGetUserMediaSupported = 'Requires HTTPs';\n            }\n        }\n\n        if (DetectRTC.osName === 'Nodejs') {\n            isGetUserMediaSupported = false;\n        }\n        DetectRTC.isGetUserMediaSupported = isGetUserMediaSupported;\n\n        var displayResolution = '';\n        if (screen.width) {\n            var width = (screen.width) ? screen.width : '';\n            var height = (screen.height) ? screen.height : '';\n            displayResolution += '' + width + ' x ' + height;\n        }\n        DetectRTC.displayResolution = displayResolution;\n\n        // ----------\n        DetectRTC.isCanvasSupportsStreamCapturing = isCanvasSupportsStreamCapturing;\n        DetectRTC.isVideoSupportsStreamCapturing = isVideoSupportsStreamCapturing;\n\n        if (DetectRTC.browser.name == 'Chrome' && DetectRTC.browser.version >= 53) {\n            if (!DetectRTC.isCanvasSupportsStreamCapturing) {\n                DetectRTC.isCanvasSupportsStreamCapturing = 'Requires chrome flag: enable-experimental-web-platform-features';\n            }\n\n            if (!DetectRTC.isVideoSupportsStreamCapturing) {\n                DetectRTC.isVideoSupportsStreamCapturing = 'Requires chrome flag: enable-experimental-web-platform-features';\n            }\n        }\n\n        // ------\n        DetectRTC.DetectLocalIPAddress = DetectLocalIPAddress;\n\n        DetectRTC.isWebSocketsSupported = 'WebSocket' in window && 2 === window.WebSocket.CLOSING;\n        DetectRTC.isWebSocketsBlocked = !DetectRTC.isWebSocketsSupported;\n\n        if (DetectRTC.osName === 'Nodejs') {\n            DetectRTC.isWebSocketsSupported = true;\n            DetectRTC.isWebSocketsBlocked = false;\n        }\n\n        DetectRTC.checkWebSocketsSupport = function(callback) {\n            callback = callback || function() {};\n            try {\n                var websocket = new WebSocket('wss://echo.websocket.org:443/');\n                websocket.onopen = function() {\n                    DetectRTC.isWebSocketsBlocked = false;\n                    callback();\n                    websocket.close();\n                    websocket = null;\n                };\n                websocket.onerror = function() {\n                    DetectRTC.isWebSocketsBlocked = true;\n                    callback();\n                };\n            } catch (e) {\n                DetectRTC.isWebSocketsBlocked = true;\n                callback();\n            }\n        };\n\n        // -------\n        DetectRTC.load = function(callback) {\n            callback = callback || function() {};\n            checkDeviceSupport(callback);\n        };\n\n        DetectRTC.MediaDevices = MediaDevices;\n        DetectRTC.hasMicrophone = hasMicrophone;\n        DetectRTC.hasSpeakers = hasSpeakers;\n        DetectRTC.hasWebcam = hasWebcam;\n\n        DetectRTC.isWebsiteHasWebcamPermissions = isWebsiteHasWebcamPermissions;\n        DetectRTC.isWebsiteHasMicrophonePermissions = isWebsiteHasMicrophonePermissions;\n\n        DetectRTC.audioInputDevices = audioInputDevices;\n        DetectRTC.audioOutputDevices = audioOutputDevices;\n        DetectRTC.videoInputDevices = videoInputDevices;\n\n        // ------\n        var isSetSinkIdSupported = false;\n        if ('setSinkId' in document.createElement('video')) {\n            isSetSinkIdSupported = true;\n        }\n        DetectRTC.isSetSinkIdSupported = isSetSinkIdSupported;\n\n        // -----\n        var isRTPSenderReplaceTracksSupported = false;\n        if (DetectRTC.browser.isFirefox && typeof mozRTCPeerConnection !== 'undefined' /*&& DetectRTC.browser.version > 39*/ ) {\n            /*global mozRTCPeerConnection:true */\n            if ('getSenders' in mozRTCPeerConnection.prototype) {\n                isRTPSenderReplaceTracksSupported = true;\n            }\n        } else if (DetectRTC.browser.isChrome && typeof webkitRTCPeerConnection !== 'undefined') {\n            /*global webkitRTCPeerConnection:true */\n            if ('getSenders' in webkitRTCPeerConnection.prototype) {\n                isRTPSenderReplaceTracksSupported = true;\n            }\n        }\n        DetectRTC.isRTPSenderReplaceTracksSupported = isRTPSenderReplaceTracksSupported;\n\n        //------\n        var isRemoteStreamProcessingSupported = false;\n        if (DetectRTC.browser.isFirefox && DetectRTC.browser.version > 38) {\n            isRemoteStreamProcessingSupported = true;\n        }\n        DetectRTC.isRemoteStreamProcessingSupported = isRemoteStreamProcessingSupported;\n\n        //-------\n        var isApplyConstraintsSupported = false;\n\n        /*global MediaStreamTrack:true */\n        if (typeof MediaStreamTrack !== 'undefined' && 'applyConstraints' in MediaStreamTrack.prototype) {\n            isApplyConstraintsSupported = true;\n        }\n        DetectRTC.isApplyConstraintsSupported = isApplyConstraintsSupported;\n\n        //-------\n        var isMultiMonitorScreenCapturingSupported = false;\n        if (DetectRTC.browser.isFirefox && DetectRTC.browser.version >= 43) {\n            // version 43 merely supports platforms for multi-monitors\n            // version 44 will support exact multi-monitor selection i.e. you can select any monitor for screen capturing.\n            isMultiMonitorScreenCapturingSupported = true;\n        }\n        DetectRTC.isMultiMonitorScreenCapturingSupported = isMultiMonitorScreenCapturingSupported;\n\n        DetectRTC.isPromisesSupported = !!('Promise' in window);\n\n        if (typeof DetectRTC === 'undefined') {\n            window.DetectRTC = {};\n        }\n\n        var MediaStream = window.MediaStream;\n\n        if (typeof MediaStream === 'undefined' && typeof webkitMediaStream !== 'undefined') {\n            MediaStream = webkitMediaStream;\n        }\n\n        if (typeof MediaStream !== 'undefined') {\n            DetectRTC.MediaStream = Object.keys(MediaStream.prototype);\n        } else DetectRTC.MediaStream = false;\n\n        if (typeof MediaStreamTrack !== 'undefined') {\n            DetectRTC.MediaStreamTrack = Object.keys(MediaStreamTrack.prototype);\n        } else DetectRTC.MediaStreamTrack = false;\n\n        var RTCPeerConnection = window.RTCPeerConnection || window.mozRTCPeerConnection || window.webkitRTCPeerConnection;\n\n        if (typeof RTCPeerConnection !== 'undefined') {\n            DetectRTC.RTCPeerConnection = Object.keys(RTCPeerConnection.prototype);\n        } else DetectRTC.RTCPeerConnection = false;\n\n        window.DetectRTC = DetectRTC;\n\n        if (typeof module !== 'undefined' /* && !!module.exports*/ ) {\n            module.exports = DetectRTC;\n        }\n\n        if (typeof define === 'function' && define.amd) {\n            define('DetectRTC', [], function() {\n                return DetectRTC;\n            });\n        }\n    })();\n\n    // ios-hacks.js\n\n    function setCordovaAPIs() {\n        if (DetectRTC.osName !== 'iOS') return;\n        if (typeof cordova === 'undefined' || typeof cordova.plugins === 'undefined' || typeof cordova.plugins.iosrtc === 'undefined') return;\n\n        var iosrtc = cordova.plugins.iosrtc;\n        window.webkitRTCPeerConnection = iosrtc.RTCPeerConnection;\n        window.RTCSessionDescription = iosrtc.RTCSessionDescription;\n        window.RTCIceCandidate = iosrtc.RTCIceCandidate;\n        window.MediaStream = iosrtc.MediaStream;\n        window.MediaStreamTrack = iosrtc.MediaStreamTrack;\n        navigator.getUserMedia = navigator.webkitGetUserMedia = iosrtc.getUserMedia;\n\n        iosrtc.debug.enable('iosrtc*');\n        if (typeof iosrtc.selectAudioOutput == 'function') {\n            iosrtc.selectAudioOutput(window.iOSDefaultAudioOutputDevice || 'speaker'); // earpiece or speaker\n        }\n        iosrtc.registerGlobals();\n    }\n\n    document.addEventListener('deviceready', setCordovaAPIs, false);\n    setCordovaAPIs();\n\n    // RTCPeerConnection.js\n\n    var defaults = {};\n\n    function setSdpConstraints(config) {\n        var sdpConstraints;\n\n        var sdpConstraints_mandatory = {\n            OfferToReceiveAudio: !!config.OfferToReceiveAudio,\n            OfferToReceiveVideo: !!config.OfferToReceiveVideo\n        };\n\n        sdpConstraints = {\n            mandatory: sdpConstraints_mandatory,\n            optional: [{\n                VoiceActivityDetection: false\n            }]\n        };\n\n        if (!!navigator.mozGetUserMedia && firefoxVersion > 34) {\n            sdpConstraints = {\n                OfferToReceiveAudio: !!config.OfferToReceiveAudio,\n                OfferToReceiveVideo: !!config.OfferToReceiveVideo\n            };\n        }\n\n        return sdpConstraints;\n    }\n\n    var RTCPeerConnection;\n    if (typeof window.RTCPeerConnection !== 'undefined') {\n        RTCPeerConnection = window.RTCPeerConnection;\n    } else if (typeof mozRTCPeerConnection !== 'undefined') {\n        RTCPeerConnection = mozRTCPeerConnection;\n    } else if (typeof webkitRTCPeerConnection !== 'undefined') {\n        RTCPeerConnection = webkitRTCPeerConnection;\n    }\n\n    var RTCSessionDescription = window.RTCSessionDescription || window.mozRTCSessionDescription;\n    var RTCIceCandidate = window.RTCIceCandidate || window.mozRTCIceCandidate;\n    var MediaStreamTrack = window.MediaStreamTrack;\n\n    window.onPluginRTCInitialized = function() {\n        MediaStreamTrack = window.PluginRTC.MediaStreamTrack;\n        RTCPeerConnection = window.PluginRTC.RTCPeerConnection;\n        RTCIceCandidate = window.PluginRTC.RTCIceCandidate;\n        RTCSessionDescription = window.PluginRTC.RTCSessionDescription;\n    }\n\n    if (typeof window.PluginRTC !== 'undefined') {\n        window.onPluginRTCInitialized();\n    }\n\n    function PeerInitiator(config) {\n        if (!RTCPeerConnection) {\n            throw 'WebRTC 1.0 (RTCPeerConnection) API are NOT available in this browser.';\n        }\n\n        var connection = config.rtcMultiConnection;\n\n        this.extra = config.remoteSdp ? config.remoteSdp.extra : connection.extra;\n        this.userid = config.userid;\n        this.streams = [];\n        this.channels = config.channels || [];\n        this.connectionDescription = config.connectionDescription;\n\n        this.addStream = function(session) {\n            connection.addStream(session, this.userid);\n        };\n\n        this.removeStream = function(streamid) {\n            connection.removeStream(streamid, this.userid);\n        };\n\n        var self = this;\n\n        if (config.remoteSdp) {\n            this.connectionDescription = config.remoteSdp.connectionDescription;\n        }\n\n        var allRemoteStreams = {};\n\n        defaults.sdpConstraints = setSdpConstraints({\n            OfferToReceiveAudio: true,\n            OfferToReceiveVideo: true\n        });\n\n        var peer;\n\n        var renegotiatingPeer = !!config.renegotiatingPeer;\n        if (config.remoteSdp) {\n            renegotiatingPeer = !!config.remoteSdp.renegotiatingPeer;\n        }\n\n        var localStreams = [];\n        connection.attachStreams.forEach(function(stream) {\n            if (!!stream) {\n                localStreams.push(stream);\n            }\n        });\n\n        if (!renegotiatingPeer) {\n            var iceTransports = 'all';\n            if (connection.candidates.turn || connection.candidates.relay) {\n                if (!connection.candidates.stun && !connection.candidates.reflexive && !connection.candidates.host) {\n                    iceTransports = 'relay';\n                }\n            }\n\n            peer = new RTCPeerConnection(navigator.onLine ? {\n                iceServers: connection.iceServers,\n                iceTransportPolicy: connection.iceTransportPolicy || iceTransports,\n                rtcpMuxPolicy: connection.rtcpMuxPolicy || 'negotiate'\n            } : null, window.PluginRTC ? null : connection.optionalArgument);\n\n            if (!connection.iceServers.length) {\n                peer = new RTCPeerConnection(null, null);\n            }\n        } else {\n            peer = config.peerRef;\n        }\n\n        function getLocalStreams() {\n            // if-block is temporarily disabled\n            if (false && 'getSenders' in peer && typeof peer.getSenders === 'function') {\n                var streamObject2 = new MediaStream();\n                peer.getSenders().forEach(function(sender) {\n                    streamObject2.addTrack(sender.track);\n                });\n                return streamObject2;\n            }\n            return peer.getLocalStreams();\n        }\n\n        peer.onicecandidate = function(event) {\n            if (!event.candidate) {\n                if (!connection.trickleIce) {\n                    var localSdp = peer.localDescription;\n                    config.onLocalSdp({\n                        type: localSdp.type,\n                        sdp: localSdp.sdp,\n                        remotePeerSdpConstraints: config.remotePeerSdpConstraints || false,\n                        renegotiatingPeer: !!config.renegotiatingPeer || false,\n                        connectionDescription: self.connectionDescription,\n                        dontGetRemoteStream: !!config.dontGetRemoteStream,\n                        extra: connection ? connection.extra : {},\n                        streamsToShare: streamsToShare,\n                        isFirefoxOffered: isFirefox\n                    });\n                }\n                return;\n            }\n\n            if (!connection.trickleIce) return;\n            config.onLocalCandidate({\n                candidate: event.candidate.candidate,\n                sdpMid: event.candidate.sdpMid,\n                sdpMLineIndex: event.candidate.sdpMLineIndex\n            });\n        };\n\n        var isFirefoxOffered = !isFirefox;\n        if (config.remoteSdp && config.remoteSdp.remotePeerSdpConstraints && config.remoteSdp.remotePeerSdpConstraints.isFirefoxOffered) {\n            isFirefoxOffered = true;\n        }\n\n        localStreams.forEach(function(localStream) {\n            if (config.remoteSdp && config.remoteSdp.remotePeerSdpConstraints && config.remoteSdp.remotePeerSdpConstraints.dontGetRemoteStream) {\n                return;\n            }\n\n            if (config.dontAttachLocalStream) {\n                return;\n            }\n\n            localStream = connection.beforeAddingStream(localStream, self);\n\n            if (!localStream) return;\n\n            if (getLocalStreams().forEach) {\n                getLocalStreams().forEach(function(stream) {\n                    if (localStream && stream.id == localStream.id) {\n                        localStream = null;\n                    }\n                });\n            }\n\n            if (localStream) {\n                peer.addStream(localStream);\n            }\n        });\n\n        peer.oniceconnectionstatechange = peer.onsignalingstatechange = function() {\n            var extra = self.extra;\n            if (connection.peers[self.userid]) {\n                extra = connection.peers[self.userid].extra || extra;\n            }\n\n            if (!peer) {\n                return;\n            }\n\n            config.onPeerStateChanged({\n                iceConnectionState: peer.iceConnectionState,\n                iceGatheringState: peer.iceGatheringState,\n                signalingState: peer.signalingState,\n                extra: extra,\n                userid: self.userid\n            });\n\n            if (isFirefox && peer.iceConnectionState.search(/closed|failed/gi) !== -1) {\n                self.streams.forEach(function(stream) {\n                    var streamEvent = connection.streamEvents[stream.id] || {\n                        streamid: stream.id,\n                        stream: stream,\n                        type: 'remote'\n                    };\n\n                    connection.onstreamended(streamEvent);\n                });\n            }\n        };\n\n        var sdpConstraints = {\n            OfferToReceiveAudio: !!localStreams.length,\n            OfferToReceiveVideo: !!localStreams.length\n        };\n\n        if (config.localPeerSdpConstraints) sdpConstraints = config.localPeerSdpConstraints;\n\n        defaults.sdpConstraints = setSdpConstraints(sdpConstraints);\n\n        var remoteStreamAddEvent = 'addstream';\n        if ('ontrack' in peer) {\n            // temporarily disabled\n            // remoteStreamAddEvent = 'track';\n        }\n\n        var streamObject;\n        peer.addEventListener(remoteStreamAddEvent, function(event) {\n            if (!event) return;\n            if (event.streams && event.streams.length && !event.stream) {\n                if (!streamObject) {\n                    streamObject = new MediaStream();\n                    return;\n                }\n\n                event.streams.forEach(function(stream) {\n                    if (stream.getVideoTracks().length) {\n                        streamObject.addTrack(stream.getVideoTracks()[0]);\n                    }\n                    if (stream.getAudioTracks().length) {\n                        streamObject.addTrack(stream.getAudioTracks()[0]);\n                    }\n                });\n                event.stream = streamObject;\n\n                if (connection.session.audio && connection.session.video && (!streamObject.getVideoTracks().length || !streamObject.getAudioTracks().length)) {\n                    return;\n                }\n\n                streamObject = null;\n            }\n\n            var streamsToShare = {};\n            if (config.remoteSdp && config.remoteSdp.streamsToShare) {\n                streamsToShare = config.remoteSdp.streamsToShare;\n            } else if (config.streamsToShare) {\n                streamsToShare = config.streamsToShare;\n            }\n\n            var streamToShare = streamsToShare[event.stream.id];\n            if (streamToShare) {\n                event.stream.isAudio = streamToShare.isAudio;\n                event.stream.isVideo = streamToShare.isVideo;\n                event.stream.isScreen = streamToShare.isScreen;\n            }\n            event.stream.streamid = event.stream.id;\n            if (isFirefox || !event.stream.stop) {\n                event.stream.stop = function() {\n                    var streamEndedEvent = 'ended';\n\n                    if ('oninactive' in event.stream) {\n                        streamEndedEvent = 'inactive';\n                    }\n                    fireEvent(event.stream, streamEndedEvent);\n                };\n            }\n            allRemoteStreams[event.stream.id] = event.stream;\n            config.onRemoteStream(event.stream);\n        }, false);\n\n        peer.onremovestream = function(event) {\n            event.stream.streamid = event.stream.id;\n\n            if (allRemoteStreams[event.stream.id]) {\n                delete allRemoteStreams[event.stream.id];\n            }\n\n            config.onRemoteStreamRemoved(event.stream);\n        };\n\n        this.addRemoteCandidate = function(remoteCandidate) {\n            peer.addIceCandidate(new RTCIceCandidate(remoteCandidate));\n        };\n\n        this.addRemoteSdp = function(remoteSdp, cb) {\n            remoteSdp.sdp = connection.processSdp(remoteSdp.sdp);\n            peer.setRemoteDescription(new RTCSessionDescription(remoteSdp), cb || function() {}, function(error) {\n                if (!!connection.enableLogs) {\n                    console.error(JSON.stringify(error, null, '\\t'), '\\n', remoteSdp.type, remoteSdp.sdp);\n                }\n            });\n        };\n\n        var isOfferer = true;\n\n        if (config.remoteSdp) {\n            isOfferer = false;\n        }\n\n        this.createDataChannel = function() {\n            var channel = peer.createDataChannel('sctp', {});\n            setChannelEvents(channel);\n        };\n\n        if (connection.session.data === true && !renegotiatingPeer) {\n            if (!isOfferer) {\n                peer.ondatachannel = function(event) {\n                    var channel = event.channel;\n                    setChannelEvents(channel);\n                };\n            } else {\n                this.createDataChannel();\n            }\n        }\n\n        if (config.remoteSdp) {\n            if (config.remoteSdp.remotePeerSdpConstraints) {\n                sdpConstraints = config.remoteSdp.remotePeerSdpConstraints;\n            }\n            defaults.sdpConstraints = setSdpConstraints(sdpConstraints);\n            this.addRemoteSdp(config.remoteSdp, function() {\n                createOfferOrAnswer('createAnswer');\n            });\n        }\n\n        function setChannelEvents(channel) {\n            // force ArrayBuffer in Firefox; which uses \"Blob\" by default.\n            channel.binaryType = 'arraybuffer';\n\n            channel.onmessage = function(event) {\n                config.onDataChannelMessage(event.data);\n            };\n\n            channel.onopen = function() {\n                config.onDataChannelOpened(channel);\n            };\n\n            channel.onerror = function(error) {\n                config.onDataChannelError(error);\n            };\n\n            channel.onclose = function(event) {\n                config.onDataChannelClosed(event);\n            };\n\n            channel.internalSend = channel.send;\n            channel.send = function(data) {\n                if (channel.readyState !== 'open') {\n                    return;\n                }\n\n                channel.internalSend(data);\n            };\n\n            peer.channel = channel;\n        }\n\n        if (connection.session.audio == 'two-way' || connection.session.video == 'two-way' || connection.session.screen == 'two-way') {\n            defaults.sdpConstraints = setSdpConstraints({\n                OfferToReceiveAudio: connection.session.audio == 'two-way' || (config.remoteSdp && config.remoteSdp.remotePeerSdpConstraints && config.remoteSdp.remotePeerSdpConstraints.OfferToReceiveAudio),\n                OfferToReceiveVideo: connection.session.video == 'two-way' || connection.session.screen == 'two-way' || (config.remoteSdp && config.remoteSdp.remotePeerSdpConstraints && config.remoteSdp.remotePeerSdpConstraints.OfferToReceiveAudio)\n            });\n        }\n\n        var streamsToShare = {};\n        if (getLocalStreams().forEach) {\n            getLocalStreams().forEach(function(stream) {\n                streamsToShare[stream.streamid] = {\n                    isAudio: !!stream.isAudio,\n                    isVideo: !!stream.isVideo,\n                    isScreen: !!stream.isScreen\n                };\n            });\n        }\n\n        function createOfferOrAnswer(_method) {\n            peer[_method](function(localSdp) {\n                localSdp.sdp = connection.processSdp(localSdp.sdp);\n                peer.setLocalDescription(localSdp, function() {\n                    if (!connection.trickleIce) return;\n                    config.onLocalSdp({\n                        type: localSdp.type,\n                        sdp: localSdp.sdp,\n                        remotePeerSdpConstraints: config.remotePeerSdpConstraints || false,\n                        renegotiatingPeer: !!config.renegotiatingPeer || false,\n                        connectionDescription: self.connectionDescription,\n                        dontGetRemoteStream: !!config.dontGetRemoteStream,\n                        extra: connection ? connection.extra : {},\n                        streamsToShare: streamsToShare,\n                        isFirefoxOffered: isFirefox\n                    });\n\n                    connection.onSettingLocalDescription(self);\n                }, function(error) {\n                    if (!connection.enableLogs) return;\n                    console.error('setLocalDescription error', error);\n                });\n            }, function(error) {\n                if (!!connection.enableLogs) {\n                    console.error('sdp-error', error);\n                }\n            }, defaults.sdpConstraints);\n        }\n\n        if (isOfferer) {\n            createOfferOrAnswer('createOffer');\n        }\n\n        peer.nativeClose = peer.close;\n        peer.close = function() {\n            if (!peer) {\n                return;\n            }\n\n            try {\n                if (peer.iceConnectionState.search(/closed|failed/gi) === -1) {\n                    peer.getRemoteStreams().forEach(function(stream) {\n                        stream.stop();\n                    });\n                }\n                peer.nativeClose();\n            } catch (e) {}\n\n            peer = null;\n            self.peer = null;\n        };\n\n        this.peer = peer;\n    }\n\n    // CodecsHandler.js\n\n    var CodecsHandler = (function() {\n        var isMobileDevice = !!navigator.userAgent.match(/Android|iPhone|iPad|iPod|BlackBerry|IEMobile/i);\n        if (typeof cordova !== 'undefined') {\n            isMobileDevice = true;\n        }\n\n        if (navigator && navigator.userAgent && navigator.userAgent.indexOf('Crosswalk') !== -1) {\n            isMobileDevice = true;\n        }\n\n        // \"removeVPX\" and \"removeNonG722\" methods are taken from github/mozilla/webrtc-landing\n        function removeVPX(sdp) {\n            if (!sdp || typeof sdp !== 'string') {\n                throw 'Invalid arguments.';\n            }\n\n            // this method is NOT reliable\n\n            sdp = sdp.replace('a=rtpmap:100 VP8/90000\\r\\n', '');\n            sdp = sdp.replace('a=rtpmap:101 VP9/90000\\r\\n', '');\n\n            sdp = sdp.replace(/m=video ([0-9]+) RTP\\/SAVPF ([0-9 ]*) 100/g, 'm=video $1 RTP\\/SAVPF $2');\n            sdp = sdp.replace(/m=video ([0-9]+) RTP\\/SAVPF ([0-9 ]*) 101/g, 'm=video $1 RTP\\/SAVPF $2');\n\n            sdp = sdp.replace(/m=video ([0-9]+) RTP\\/SAVPF 100([0-9 ]*)/g, 'm=video $1 RTP\\/SAVPF$2');\n            sdp = sdp.replace(/m=video ([0-9]+) RTP\\/SAVPF 101([0-9 ]*)/g, 'm=video $1 RTP\\/SAVPF$2');\n\n            sdp = sdp.replace('a=rtcp-fb:120 nack\\r\\n', '');\n            sdp = sdp.replace('a=rtcp-fb:120 nack pli\\r\\n', '');\n            sdp = sdp.replace('a=rtcp-fb:120 ccm fir\\r\\n', '');\n\n            sdp = sdp.replace('a=rtcp-fb:101 nack\\r\\n', '');\n            sdp = sdp.replace('a=rtcp-fb:101 nack pli\\r\\n', '');\n            sdp = sdp.replace('a=rtcp-fb:101 ccm fir\\r\\n', '');\n\n            return sdp;\n        }\n\n        function disableNACK(sdp) {\n            if (!sdp || typeof sdp !== 'string') {\n                throw 'Invalid arguments.';\n            }\n\n            sdp = sdp.replace('a=rtcp-fb:126 nack\\r\\n', '');\n            sdp = sdp.replace('a=rtcp-fb:126 nack pli\\r\\n', 'a=rtcp-fb:126 pli\\r\\n');\n            sdp = sdp.replace('a=rtcp-fb:97 nack\\r\\n', '');\n            sdp = sdp.replace('a=rtcp-fb:97 nack pli\\r\\n', 'a=rtcp-fb:97 pli\\r\\n');\n\n            return sdp;\n        }\n\n        function prioritize(codecMimeType, peer) {\n            if (!peer || !peer.getSenders || !peer.getSenders().length) {\n                return;\n            }\n\n            if (!codecMimeType || typeof codecMimeType !== 'string') {\n                throw 'Invalid arguments.';\n            }\n\n            peer.getSenders().forEach(function(sender) {\n                var params = sender.getParameters();\n                for (var i = 0; i < params.codecs.length; i++) {\n                    if (params.codecs[i].mimeType == codecMimeType) {\n                        params.codecs.unshift(params.codecs.splice(i, 1));\n                        break;\n                    }\n                }\n                sender.setParameters(params);\n            });\n        }\n\n        function removeNonG722(sdp) {\n            return sdp.replace(/m=audio ([0-9]+) RTP\\/SAVPF ([0-9 ]*)/g, 'm=audio $1 RTP\\/SAVPF 9');\n        }\n\n        function setBAS(sdp, bandwidth, isScreen) {\n            if (!bandwidth) {\n                return sdp;\n            }\n\n            if (typeof isFirefox !== 'undefined' && isFirefox) {\n                return sdp;\n            }\n\n            if (isMobileDevice) {\n                return sdp;\n            }\n\n            if (isScreen) {\n                if (!bandwidth.screen) {\n                    console.warn('It seems that you are not using bandwidth for screen. Screen sharing is expected to fail.');\n                } else if (bandwidth.screen < 300) {\n                    console.warn('It seems that you are using wrong bandwidth value for screen. Screen sharing is expected to fail.');\n                }\n            }\n\n            // if screen; must use at least 300kbs\n            if (bandwidth.screen && isScreen) {\n                sdp = sdp.replace(/b=AS([^\\r\\n]+\\r\\n)/g, '');\n                sdp = sdp.replace(/a=mid:video\\r\\n/g, 'a=mid:video\\r\\nb=AS:' + bandwidth.screen + '\\r\\n');\n            }\n\n            // remove existing bandwidth lines\n            if (bandwidth.audio || bandwidth.video || bandwidth.data) {\n                sdp = sdp.replace(/b=AS([^\\r\\n]+\\r\\n)/g, '');\n            }\n\n            if (bandwidth.audio) {\n                sdp = sdp.replace(/a=mid:audio\\r\\n/g, 'a=mid:audio\\r\\nb=AS:' + bandwidth.audio + '\\r\\n');\n            }\n\n            if (bandwidth.video) {\n                sdp = sdp.replace(/a=mid:video\\r\\n/g, 'a=mid:video\\r\\nb=AS:' + (isScreen ? bandwidth.screen : bandwidth.video) + '\\r\\n');\n            }\n\n            return sdp;\n        }\n\n        // Find the line in sdpLines that starts with |prefix|, and, if specified,\n        // contains |substr| (case-insensitive search).\n        function findLine(sdpLines, prefix, substr) {\n            return findLineInRange(sdpLines, 0, -1, prefix, substr);\n        }\n\n        // Find the line in sdpLines[startLine...endLine - 1] that starts with |prefix|\n        // and, if specified, contains |substr| (case-insensitive search).\n        function findLineInRange(sdpLines, startLine, endLine, prefix, substr) {\n            var realEndLine = endLine !== -1 ? endLine : sdpLines.length;\n            for (var i = startLine; i < realEndLine; ++i) {\n                if (sdpLines[i].indexOf(prefix) === 0) {\n                    if (!substr ||\n                        sdpLines[i].toLowerCase().indexOf(substr.toLowerCase()) !== -1) {\n                        return i;\n                    }\n                }\n            }\n            return null;\n        }\n\n        // Gets the codec payload type from an a=rtpmap:X line.\n        function getCodecPayloadType(sdpLine) {\n            var pattern = new RegExp('a=rtpmap:(\\\\d+) \\\\w+\\\\/\\\\d+');\n            var result = sdpLine.match(pattern);\n            return (result && result.length === 2) ? result[1] : null;\n        }\n\n        function setVideoBitrates(sdp, params) {\n            if (isMobileDevice) {\n                return sdp;\n            }\n\n            params = params || {};\n            var xgoogle_min_bitrate = params.min;\n            var xgoogle_max_bitrate = params.max;\n\n            var sdpLines = sdp.split('\\r\\n');\n\n            // VP8\n            var vp8Index = findLine(sdpLines, 'a=rtpmap', 'VP8/90000');\n            var vp8Payload;\n            if (vp8Index) {\n                vp8Payload = getCodecPayloadType(sdpLines[vp8Index]);\n            }\n\n            if (!vp8Payload) {\n                return sdp;\n            }\n\n            var rtxIndex = findLine(sdpLines, 'a=rtpmap', 'rtx/90000');\n            var rtxPayload;\n            if (rtxIndex) {\n                rtxPayload = getCodecPayloadType(sdpLines[rtxIndex]);\n            }\n\n            if (!rtxIndex) {\n                return sdp;\n            }\n\n            var rtxFmtpLineIndex = findLine(sdpLines, 'a=fmtp:' + rtxPayload.toString());\n            if (rtxFmtpLineIndex !== null) {\n                var appendrtxNext = '\\r\\n';\n                appendrtxNext += 'a=fmtp:' + vp8Payload + ' x-google-min-bitrate=' + (xgoogle_min_bitrate || '228') + '; x-google-max-bitrate=' + (xgoogle_max_bitrate || '228');\n                sdpLines[rtxFmtpLineIndex] = sdpLines[rtxFmtpLineIndex].concat(appendrtxNext);\n                sdp = sdpLines.join('\\r\\n');\n            }\n\n            return sdp;\n        }\n\n        function setOpusAttributes(sdp, params) {\n            if (isMobileDevice) {\n                return sdp;\n            }\n\n            params = params || {};\n\n            var sdpLines = sdp.split('\\r\\n');\n\n            // Opus\n            var opusIndex = findLine(sdpLines, 'a=rtpmap', 'opus/48000');\n            var opusPayload;\n            if (opusIndex) {\n                opusPayload = getCodecPayloadType(sdpLines[opusIndex]);\n            }\n\n            if (!opusPayload) {\n                return sdp;\n            }\n\n            var opusFmtpLineIndex = findLine(sdpLines, 'a=fmtp:' + opusPayload.toString());\n            if (opusFmtpLineIndex === null) {\n                return sdp;\n            }\n\n            var appendOpusNext = '';\n            appendOpusNext += '; stereo=' + (typeof params.stereo != 'undefined' ? params.stereo : '1');\n            appendOpusNext += '; sprop-stereo=' + (typeof params['sprop-stereo'] != 'undefined' ? params['sprop-stereo'] : '1');\n\n            if (typeof params.maxaveragebitrate != 'undefined') {\n                appendOpusNext += '; maxaveragebitrate=' + (params.maxaveragebitrate || 128 * 1024 * 8);\n            }\n\n            if (typeof params.maxplaybackrate != 'undefined') {\n                appendOpusNext += '; maxplaybackrate=' + (params.maxplaybackrate || 128 * 1024 * 8);\n            }\n\n            if (typeof params.cbr != 'undefined') {\n                appendOpusNext += '; cbr=' + (typeof params.cbr != 'undefined' ? params.cbr : '1');\n            }\n\n            if (typeof params.useinbandfec != 'undefined') {\n                appendOpusNext += '; useinbandfec=' + params.useinbandfec;\n            }\n\n            if (typeof params.usedtx != 'undefined') {\n                appendOpusNext += '; usedtx=' + params.usedtx;\n            }\n\n            if (typeof params.maxptime != 'undefined') {\n                appendOpusNext += '\\r\\na=maxptime:' + params.maxptime;\n            }\n\n            sdpLines[opusFmtpLineIndex] = sdpLines[opusFmtpLineIndex].concat(appendOpusNext);\n\n            sdp = sdpLines.join('\\r\\n');\n            return sdp;\n        }\n\n        function preferVP9(sdp) {\n            if (sdp.indexOf('SAVPF 100 101') === -1 || sdp.indexOf('VP9/90000') === -1) {\n                return sdp;\n            }\n\n            return sdp.replace('SAVPF 100 101', 'SAVPF 101 100');\n        }\n\n        // forceStereoAudio => via webrtcexample.com\n        // requires getUserMedia => echoCancellation:false\n        function forceStereoAudio(sdp) {\n            var sdpLines = sdp.split('\\r\\n');\n            var fmtpLineIndex = null;\n            for (var i = 0; i < sdpLines.length; i++) {\n                if (sdpLines[i].search('opus/48000') !== -1) {\n                    var opusPayload = extractSdp(sdpLines[i], /:(\\d+) opus\\/48000/i);\n                    break;\n                }\n            }\n            for (var i = 0; i < sdpLines.length; i++) {\n                if (sdpLines[i].search('a=fmtp') !== -1) {\n                    var payload = extractSdp(sdpLines[i], /a=fmtp:(\\d+)/);\n                    if (payload === opusPayload) {\n                        fmtpLineIndex = i;\n                        break;\n                    }\n                }\n            }\n            if (fmtpLineIndex === null) return sdp;\n            sdpLines[fmtpLineIndex] = sdpLines[fmtpLineIndex].concat('; stereo=1; sprop-stereo=1');\n            sdp = sdpLines.join('\\r\\n');\n            return sdp;\n        }\n\n        return {\n            removeVPX: removeVPX,\n            disableNACK: disableNACK,\n            prioritize: prioritize,\n            removeNonG722: removeNonG722,\n            setApplicationSpecificBandwidth: function(sdp, bandwidth, isScreen) {\n                return setBAS(sdp, bandwidth, isScreen);\n            },\n            setVideoBitrates: function(sdp, params) {\n                return setVideoBitrates(sdp, params);\n            },\n            setOpusAttributes: function(sdp, params) {\n                return setOpusAttributes(sdp, params);\n            },\n            preferVP9: preferVP9,\n            forceStereoAudio: forceStereoAudio\n        };\n    })();\n\n    // backward compatibility\n    window.BandwidthHandler = CodecsHandler;\n\n    // OnIceCandidateHandler.js\n\n    var OnIceCandidateHandler = (function() {\n        function processCandidates(connection, icePair) {\n            var candidate = icePair.candidate;\n\n            var iceRestrictions = connection.candidates;\n            var stun = iceRestrictions.stun;\n            var turn = iceRestrictions.turn;\n\n            if (!isNull(iceRestrictions.reflexive)) {\n                stun = iceRestrictions.reflexive;\n            }\n\n            if (!isNull(iceRestrictions.relay)) {\n                turn = iceRestrictions.relay;\n            }\n\n            if (!iceRestrictions.host && !!candidate.match(/typ host/g)) {\n                return;\n            }\n\n            if (!turn && !!candidate.match(/typ relay/g)) {\n                return;\n            }\n\n            if (!stun && !!candidate.match(/typ srflx/g)) {\n                return;\n            }\n\n            var protocol = connection.iceProtocols;\n\n            if (!protocol.udp && !!candidate.match(/ udp /g)) {\n                return;\n            }\n\n            if (!protocol.tcp && !!candidate.match(/ tcp /g)) {\n                return;\n            }\n\n            if (connection.enableLogs) {\n                console.debug('Your candidate pairs:', candidate);\n            }\n\n            return {\n                candidate: candidate,\n                sdpMid: icePair.sdpMid,\n                sdpMLineIndex: icePair.sdpMLineIndex\n            };\n        }\n\n        return {\n            processCandidates: processCandidates\n        };\n    })();\n\n    // IceServersHandler.js\n\n    var IceServersHandler = (function() {\n        function getIceServers(connection) {\n            var iceServers = [];\n\n            iceServers.push(getSTUNObj('stun:stun.l.google.com:19302'));\n\n            iceServers.push(getTURNObj('stun:webrtcweb.com:7788', 'muazkh', 'muazkh')); // coTURN\n            iceServers.push(getTURNObj('turn:webrtcweb.com:7788', 'muazkh', 'muazkh')); // coTURN\n            iceServers.push(getTURNObj('turn:webrtcweb.com:8877', 'muazkh', 'muazkh')); // coTURN\n\n            iceServers.push(getTURNObj('turns:webrtcweb.com:7788', 'muazkh', 'muazkh')); // coTURN\n            iceServers.push(getTURNObj('turns:webrtcweb.com:8877', 'muazkh', 'muazkh')); // coTURN\n\n            // iceServers.push(getTURNObj('turn:webrtcweb.com:3344', 'muazkh', 'muazkh')); // resiprocate\n            // iceServers.push(getTURNObj('turn:webrtcweb.com:4433', 'muazkh', 'muazkh')); // resiprocate\n\n            // check if restund is still active: http://webrtcweb.com:4050/\n            iceServers.push(getTURNObj('stun:webrtcweb.com:4455', 'muazkh', 'muazkh')); // restund\n            iceServers.push(getTURNObj('turn:webrtcweb.com:4455', 'muazkh', 'muazkh')); // restund\n            iceServers.push(getTURNObj('turn:webrtcweb.com:5544?transport=tcp', 'muazkh', 'muazkh')); // restund\n\n            return iceServers;\n        }\n\n        function getSTUNObj(stunStr) {\n            var urlsParam = 'urls';\n            if (typeof isPluginRTC !== 'undefined') {\n                urlsParam = 'url';\n            }\n\n            var obj = {};\n            obj[urlsParam] = stunStr;\n            return obj;\n        }\n\n        function getTURNObj(turnStr, username, credential) {\n            var urlsParam = 'urls';\n            if (typeof isPluginRTC !== 'undefined') {\n                urlsParam = 'url';\n            }\n\n            var obj = {\n                username: username,\n                credential: credential\n            };\n            obj[urlsParam] = turnStr;\n            return obj;\n        }\n\n        return {\n            getIceServers: getIceServers\n        };\n    })();\n\n    // getUserMediaHandler.js\n\n    function setStreamType(constraints, stream) {\n        if (constraints.mandatory && constraints.mandatory.chromeMediaSource) {\n            stream.isScreen = true;\n        } else if (constraints.mozMediaSource || constraints.mediaSource) {\n            stream.isScreen = true;\n        } else if (constraints.video) {\n            stream.isVideo = true;\n        } else if (constraints.audio) {\n            stream.isAudio = true;\n        }\n    }\n\n    // allow users to manage this object (to support re-capturing of screen/etc.)\n    window.currentUserMediaRequest = {\n        streams: [],\n        mutex: false,\n        queueRequests: [],\n        remove: function(idInstance) {\n            this.mutex = false;\n\n            var stream = this.streams[idInstance];\n            if (!stream) {\n                return;\n            }\n\n            stream = stream.stream;\n\n            var options = stream.currentUserMediaRequestOptions;\n\n            if (this.queueRequests.indexOf(options)) {\n                delete this.queueRequests[this.queueRequests.indexOf(options)];\n                this.queueRequests = removeNullEntries(this.queueRequests);\n            }\n\n            this.streams[idInstance].stream = null;\n            delete this.streams[idInstance];\n        }\n    };\n\n    function getUserMediaHandler(options) {\n        if (currentUserMediaRequest.mutex === true) {\n            currentUserMediaRequest.queueRequests.push(options);\n            return;\n        }\n        currentUserMediaRequest.mutex = true;\n\n        // easy way to match\n        var idInstance = JSON.stringify(options.localMediaConstraints);\n\n        function streaming(stream, returnBack) {\n            setStreamType(options.localMediaConstraints, stream);\n            options.onGettingLocalMedia(stream, returnBack);\n\n            var streamEndedEvent = 'ended';\n\n            if ('oninactive' in stream) {\n                streamEndedEvent = 'inactive';\n            }\n            stream.addEventListener(streamEndedEvent, function() {\n                delete currentUserMediaRequest.streams[idInstance];\n\n                currentUserMediaRequest.mutex = false;\n                if (currentUserMediaRequest.queueRequests.indexOf(options)) {\n                    delete currentUserMediaRequest.queueRequests[currentUserMediaRequest.queueRequests.indexOf(options)];\n                    currentUserMediaRequest.queueRequests = removeNullEntries(currentUserMediaRequest.queueRequests);\n                }\n            }, false);\n\n            currentUserMediaRequest.streams[idInstance] = {\n                stream: stream\n            };\n            currentUserMediaRequest.mutex = false;\n\n            if (currentUserMediaRequest.queueRequests.length) {\n                getUserMediaHandler(currentUserMediaRequest.queueRequests.shift());\n            }\n        }\n\n        if (currentUserMediaRequest.streams[idInstance]) {\n            streaming(currentUserMediaRequest.streams[idInstance].stream, true);\n        } else {\n            if (isPluginRTC && window.PluginRTC) {\n                var mediaElement = document.createElement('video');\n                window.PluginRTC.getUserMedia({\n                    audio: true,\n                    video: true\n                }, function(stream) {\n                    stream.streamid = stream.id || getRandomString();\n                    streaming(stream);\n                }, function(error) {});\n\n                return;\n            }\n\n            var isBlackBerry = !!(/BB10|BlackBerry/i.test(navigator.userAgent || ''));\n            if (isBlackBerry || typeof navigator.mediaDevices === 'undefined' || typeof navigator.mediaDevices.getUserMedia !== 'function') {\n                navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;\n                navigator.getUserMedia(options.localMediaConstraints, function(stream) {\n                    stream.streamid = stream.streamid || stream.id || getRandomString();\n                    stream.idInstance = idInstance;\n                    streaming(stream);\n                }, function(error) {\n                    options.onLocalMediaError(error, options.localMediaConstraints);\n                });\n                return;\n            }\n\n            navigator.mediaDevices.getUserMedia(options.localMediaConstraints).then(function(stream) {\n                stream.streamid = stream.streamid || stream.id || getRandomString();\n                stream.idInstance = idInstance;\n                streaming(stream);\n            }).catch(function(error) {\n                options.onLocalMediaError(error, options.localMediaConstraints);\n            });\n        }\n    }\n\n    // StreamsHandler.js\n\n    var StreamsHandler = (function() {\n        function handleType(type) {\n            if (!type) {\n                return;\n            }\n\n            if (typeof type === 'string' || typeof type === 'undefined') {\n                return type;\n            }\n\n            if (type.audio && type.video) {\n                return null;\n            }\n\n            if (type.audio) {\n                return 'audio';\n            }\n\n            if (type.video) {\n                return 'video';\n            }\n\n            return;\n        }\n\n        function setHandlers(stream, syncAction, connection) {\n            if (!stream || !stream.addEventListener) return;\n\n            if (typeof syncAction == 'undefined' || syncAction == true) {\n                var streamEndedEvent = 'ended';\n\n                if ('oninactive' in stream) {\n                    streamEndedEvent = 'inactive';\n                }\n\n                stream.addEventListener(streamEndedEvent, function() {\n                    StreamsHandler.onSyncNeeded(this.streamid, streamEndedEvent);\n                }, false);\n            }\n\n            stream.mute = function(type, isSyncAction) {\n                type = handleType(type);\n\n                if (typeof isSyncAction !== 'undefined') {\n                    syncAction = isSyncAction;\n                }\n\n                if (typeof type == 'undefined' || type == 'audio') {\n                    stream.getAudioTracks().forEach(function(track) {\n                        track.enabled = false;\n                        connection.streamEvents[stream.streamid].isAudioMuted = true;\n                    });\n                }\n\n                if (typeof type == 'undefined' || type == 'video') {\n                    stream.getVideoTracks().forEach(function(track) {\n                        track.enabled = false;\n                    });\n                }\n\n                if (typeof syncAction == 'undefined' || syncAction == true) {\n                    StreamsHandler.onSyncNeeded(stream.streamid, 'mute', type);\n                }\n\n                connection.streamEvents[stream.streamid].muteType = type || 'both';\n\n                fireEvent(stream, 'mute', type);\n            };\n\n            stream.unmute = function(type, isSyncAction) {\n                type = handleType(type);\n\n                if (typeof isSyncAction !== 'undefined') {\n                    syncAction = isSyncAction;\n                }\n\n                graduallyIncreaseVolume();\n\n                if (typeof type == 'undefined' || type == 'audio') {\n                    stream.getAudioTracks().forEach(function(track) {\n                        track.enabled = true;\n                        connection.streamEvents[stream.streamid].isAudioMuted = false;\n                    });\n                }\n\n                if (typeof type == 'undefined' || type == 'video') {\n                    stream.getVideoTracks().forEach(function(track) {\n                        track.enabled = true;\n                    });\n\n                    // make sure that video unmute doesn't affects audio\n                    if (typeof type !== 'undefined' && type == 'video' && connection.streamEvents[stream.streamid].isAudioMuted) {\n                        (function looper(times) {\n                            if (!times) {\n                                times = 0;\n                            }\n\n                            times++;\n\n                            // check until five-seconds\n                            if (times < 100 && connection.streamEvents[stream.streamid].isAudioMuted) {\n                                stream.mute('audio');\n\n                                setTimeout(function() {\n                                    looper(times);\n                                }, 50);\n                            }\n                        })();\n                    }\n                }\n\n                if (typeof syncAction == 'undefined' || syncAction == true) {\n                    StreamsHandler.onSyncNeeded(stream.streamid, 'unmute', type);\n                }\n\n                connection.streamEvents[stream.streamid].unmuteType = type || 'both';\n\n                fireEvent(stream, 'unmute', type);\n            };\n\n            function graduallyIncreaseVolume() {\n                if (!connection.streamEvents[stream.streamid].mediaElement) {\n                    return;\n                }\n\n                var mediaElement = connection.streamEvents[stream.streamid].mediaElement;\n                mediaElement.volume = 0;\n                afterEach(200, 5, function() {\n                    try {\n                        mediaElement.volume += .20;\n                    } catch (e) {\n                        mediaElement.volume = 1;\n                    }\n                });\n            }\n        }\n\n        function afterEach(setTimeoutInteval, numberOfTimes, callback, startedTimes) {\n            startedTimes = (startedTimes || 0) + 1;\n            if (startedTimes >= numberOfTimes) return;\n\n            setTimeout(function() {\n                callback();\n                afterEach(setTimeoutInteval, numberOfTimes, callback, startedTimes);\n            }, setTimeoutInteval);\n        }\n\n        return {\n            setHandlers: setHandlers,\n            onSyncNeeded: function(streamid, action, type) {}\n        };\n    })();\n\n    // Last time updated at Nov 07, 2016, 08:32:23\n\n    // Latest file can be found here: https://cdn.webrtc-experiment.com/Screen-Capturing.js\n\n    // Muaz Khan     - www.MuazKhan.com\n    // MIT License   - www.WebRTC-Experiment.com/licence\n    // Documentation - https://github.com/muaz-khan/Chrome-Extensions/tree/master/Screen-Capturing.js\n    // Demo          - https://www.webrtc-experiment.com/Screen-Capturing/\n\n    // ___________________\n    // Screen-Capturing.js\n\n    // Listen for postMessage handler\n    // postMessage is used to exchange \"sourceId\" between chrome extension and you webpage.\n    // though, there are tons other options as well, e.g. XHR-signaling, websockets, etc.\n    window.addEventListener('message', function(event) {\n        if (event.origin != window.location.origin) {\n            return;\n        }\n\n        onMessageCallback(event.data);\n    });\n\n    // via: https://bugs.chromium.org/p/chromium/issues/detail?id=487935#c17\n    // you can capture screen on Android Chrome >= 55 with flag: \"Experimental ScreenCapture android\"\n    window.IsAndroidChrome = false;\n    try {\n        if (navigator.userAgent.toLowerCase().indexOf(\"android\") > -1 && /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor)) {\n            window.IsAndroidChrome = true;\n        }\n    } catch (e) {}\n\n    // and the function that handles received messages\n\n    function onMessageCallback(data) {\n        // \"cancel\" button is clicked\n        if (data == 'PermissionDeniedError') {\n            chromeMediaSource = 'PermissionDeniedError';\n            if (screenCallback) {\n                return screenCallback('PermissionDeniedError');\n            } else {\n                throw new Error('PermissionDeniedError: User rejected to share his screen.');\n            }\n        }\n\n        // extension notified his presence\n        if (data == 'rtcmulticonnection-extension-loaded') {\n            chromeMediaSource = 'desktop';\n        }\n\n        // extension shared temp sourceId\n        if (data.sourceId && screenCallback) {\n            sourceId = data.sourceId;\n            screenCallback(sourceId);\n        }\n    }\n\n    // global variables\n    var chromeMediaSource = 'screen';\n    var sourceId;\n    var screenCallback;\n\n    // this method can be used to check if chrome extension is installed & enabled.\n    function isChromeExtensionAvailable(callback) {\n        if (!callback) return;\n\n        if (isFirefox) return isFirefoxExtensionAvailable(callback);\n\n        if (window.IsAndroidChrome) {\n            chromeMediaSource = 'screen';\n            callback(true);\n            return;\n        }\n\n        if (chromeMediaSource == 'desktop') {\n            callback(true);\n            return;\n        }\n\n        // ask extension if it is available\n        window.postMessage('are-you-there', '*');\n\n        setTimeout(function() {\n            if (chromeMediaSource == 'screen') {\n                callback(false);\n            } else callback(true);\n        }, 2000);\n    }\n\n    function isFirefoxExtensionAvailable(callback) {\n        if (!callback) return;\n\n        if (!isFirefox) return isChromeExtensionAvailable(callback);\n\n        var isFirefoxAddonResponded = false;\n\n        function messageCallback(event) {\n            var addonMessage = event.data;\n\n            if (!addonMessage || typeof addonMessage.isScreenCapturingEnabled === 'undefined') return;\n\n            isFirefoxAddonResponded = true;\n\n            if (addonMessage.isScreenCapturingEnabled === true) {\n                callback(true);\n            } else {\n                callback(false);\n            }\n\n            window.removeEventListener(\"message\", messageCallback, false);\n        }\n\n        window.addEventListener(\"message\", messageCallback, false);\n\n        window.postMessage({\n            checkIfScreenCapturingEnabled: true,\n            domains: [document.domain]\n        }, \"*\");\n\n        setTimeout(function() {\n            if (!isFirefoxAddonResponded) {\n                callback(true); // can be old firefox extension\n            }\n        }, 2000); // wait 2-seconds-- todo: is this enough limit?\n    }\n\n    // this function can be used to get \"source-id\" from the extension\n    function getSourceId(callback, audioPlusTab) {\n        if (!callback) throw '\"callback\" parameter is mandatory.';\n        if (sourceId) {\n            callback(sourceId);\n            sourceId = null;\n            return;\n        }\n\n        screenCallback = callback;\n\n        if (!!audioPlusTab) {\n            window.postMessage('audio-plus-tab', '*');\n            return;\n        }\n        window.postMessage('get-sourceId', '*');\n    }\n\n    function getChromeExtensionStatus(extensionid, callback) {\n        if (window.IsAndroidChrome) {\n            chromeMediaSource = 'screen';\n            callback('installed-enabled');\n            return;\n        }\n\n        if (arguments.length != 2) {\n            callback = extensionid;\n            extensionid = window.RMCExtensionID || 'ajhifddimkapgcifgcodmmfdlknahffk'; // default extension-id\n        }\n\n        if (isFirefox) return callback('not-chrome');\n\n        var image = document.createElement('img');\n        image.src = 'chrome-extension://' + extensionid + '/icon.png';\n        image.onload = function() {\n            sourceId = null;\n            chromeMediaSource = 'screen';\n            window.postMessage('are-you-there', '*');\n            setTimeout(function() {\n                if (chromeMediaSource == 'screen') {\n                    callback(extensionid == extensionid ? 'installed-enabled' : 'installed-disabled');\n                } else callback('installed-enabled');\n            }, 2000);\n        };\n        image.onerror = function() {\n            callback('not-installed');\n        };\n    }\n\n    // this function explains how to use above methods/objects\n    function getScreenConstraints(callback, audioPlusTab) {\n        var firefoxScreenConstraints = {\n            mozMediaSource: 'window',\n            mediaSource: 'window',\n            width: 29999,\n            height: 8640\n        };\n\n        if (isFirefox) return callback(null, firefoxScreenConstraints);\n\n        // support recapture again & again\n        sourceId = null;\n\n        isChromeExtensionAvailable(function(isAvailable) {\n            // this statement defines getUserMedia constraints\n            // that will be used to capture content of screen\n            var screen_constraints = {\n                mandatory: {\n                    chromeMediaSource: chromeMediaSource,\n                    maxWidth: 29999,\n                    maxHeight: 8640,\n                    minFrameRate: 30,\n                    maxFrameRate: 128,\n                    minAspectRatio: 1.77 // 2.39\n                },\n                optional: []\n            };\n\n            if (window.IsAndroidChrome) {\n                // now invoking native getUserMedia API\n                callback(null, screen_constraints);\n                return;\n            }\n\n            // this statement verifies chrome extension availability\n            // if installed and available then it will invoke extension API\n            // otherwise it will fallback to command-line based screen capturing API\n            if (chromeMediaSource == 'desktop' && !sourceId) {\n                getSourceId(function() {\n                    screen_constraints.mandatory.chromeMediaSourceId = sourceId;\n                    callback(sourceId == 'PermissionDeniedError' ? sourceId : null, screen_constraints);\n                    sourceId = null;\n                }, audioPlusTab);\n                return;\n            }\n\n            // this statement sets gets 'sourceId\" and sets \"chromeMediaSourceId\"\n            if (chromeMediaSource == 'desktop') {\n                screen_constraints.mandatory.chromeMediaSourceId = sourceId;\n            }\n\n            sourceId = null;\n            chromeMediaSource = 'screen'; // maybe this line is redundant?\n            screenCallback = null;\n\n            // now invoking native getUserMedia API\n            callback(null, screen_constraints);\n        });\n    }\n\n    // TextReceiver.js & TextSender.js\n\n    function TextReceiver(connection) {\n        var content = {};\n\n        function receive(data, userid, extra) {\n            // uuid is used to uniquely identify sending instance\n            var uuid = data.uuid;\n            if (!content[uuid]) {\n                content[uuid] = [];\n            }\n\n            content[uuid].push(data.message);\n\n            if (data.last) {\n                var message = content[uuid].join('');\n                if (data.isobject) {\n                    message = JSON.parse(message);\n                }\n\n                // latency detection\n                var receivingTime = new Date().getTime();\n                var latency = receivingTime - data.sendingTime;\n\n                var e = {\n                    data: message,\n                    userid: userid,\n                    extra: extra,\n                    latency: latency\n                };\n\n                if (connection.autoTranslateText) {\n                    e.original = e.data;\n                    connection.Translator.TranslateText(e.data, function(translatedText) {\n                        e.data = translatedText;\n                        connection.onmessage(e);\n                    });\n                } else {\n                    connection.onmessage(e);\n                }\n\n                delete content[uuid];\n            }\n        }\n\n        return {\n            receive: receive\n        };\n    }\n\n    // TextSender.js\n    var TextSender = {\n        send: function(config) {\n            var connection = config.connection;\n\n            var channel = config.channel,\n                remoteUserId = config.remoteUserId,\n                initialText = config.text,\n                packetSize = connection.chunkSize || 1000,\n                textToTransfer = '',\n                isobject = false;\n\n            if (!isString(initialText)) {\n                isobject = true;\n                initialText = JSON.stringify(initialText);\n            }\n\n            // uuid is used to uniquely identify sending instance\n            var uuid = getRandomString();\n            var sendingTime = new Date().getTime();\n\n            sendText(initialText);\n\n            function sendText(textMessage, text) {\n                var data = {\n                    type: 'text',\n                    uuid: uuid,\n                    sendingTime: sendingTime\n                };\n\n                if (textMessage) {\n                    text = textMessage;\n                    data.packets = parseInt(text.length / packetSize);\n                }\n\n                if (text.length > packetSize) {\n                    data.message = text.slice(0, packetSize);\n                } else {\n                    data.message = text;\n                    data.last = true;\n                    data.isobject = isobject;\n                }\n\n                channel.send(data, remoteUserId);\n\n                textToTransfer = text.slice(data.message.length);\n\n                if (textToTransfer.length) {\n                    setTimeout(function() {\n                        sendText(null, textToTransfer);\n                    }, connection.chunkInterval || 100);\n                }\n            }\n        }\n    };\n\n    // FileProgressBarHandler.js\n\n    var FileProgressBarHandler = (function() {\n        function handle(connection) {\n            var progressHelper = {};\n\n            // www.RTCMultiConnection.org/docs/onFileStart/\n            connection.onFileStart = function(file) {\n                var div = document.createElement('div');\n                div.title = file.name;\n                div.innerHTML = '<label>0%</label> <progress></progress>';\n\n                if (file.remoteUserId) {\n                    div.innerHTML += ' (Sharing with:' + file.remoteUserId + ')';\n                }\n\n                if (!connection.filesContainer) {\n                    connection.filesContainer = document.body || document.documentElement;\n                }\n\n                connection.filesContainer.insertBefore(div, connection.filesContainer.firstChild);\n\n                if (!file.remoteUserId) {\n                    progressHelper[file.uuid] = {\n                        div: div,\n                        progress: div.querySelector('progress'),\n                        label: div.querySelector('label')\n                    };\n                    progressHelper[file.uuid].progress.max = file.maxChunks;\n                    return;\n                }\n\n                if (!progressHelper[file.uuid]) {\n                    progressHelper[file.uuid] = {};\n                }\n\n                progressHelper[file.uuid][file.remoteUserId] = {\n                    div: div,\n                    progress: div.querySelector('progress'),\n                    label: div.querySelector('label')\n                };\n                progressHelper[file.uuid][file.remoteUserId].progress.max = file.maxChunks;\n            };\n\n            // www.RTCMultiConnection.org/docs/onFileProgress/\n            connection.onFileProgress = function(chunk) {\n                var helper = progressHelper[chunk.uuid];\n                if (!helper) {\n                    return;\n                }\n                if (chunk.remoteUserId) {\n                    helper = progressHelper[chunk.uuid][chunk.remoteUserId];\n                    if (!helper) {\n                        return;\n                    }\n                }\n\n                helper.progress.value = chunk.currentPosition || chunk.maxChunks || helper.progress.max;\n                updateLabel(helper.progress, helper.label);\n            };\n\n            // www.RTCMultiConnection.org/docs/onFileEnd/\n            connection.onFileEnd = function(file) {\n                var helper = progressHelper[file.uuid];\n                if (!helper) {\n                    console.error('No such progress-helper element exist.', file);\n                    return;\n                }\n\n                if (file.remoteUserId) {\n                    helper = progressHelper[file.uuid][file.remoteUserId];\n                    if (!helper) {\n                        return;\n                    }\n                }\n\n                var div = helper.div;\n                if (file.type.indexOf('image') != -1) {\n                    div.innerHTML = '<a href=\"' + file.url + '\" download=\"' + file.name + '\">Download <strong style=\"color:red;\">' + file.name + '</strong> </a><br /><img src=\"' + file.url + '\" title=\"' + file.name + '\" style=\"max-width: 80%;\">';\n                } else {\n                    div.innerHTML = '<a href=\"' + file.url + '\" download=\"' + file.name + '\">Download <strong style=\"color:red;\">' + file.name + '</strong> </a><br /><iframe src=\"' + file.url + '\" title=\"' + file.name + '\" style=\"width: 80%;border: 0;height: inherit;margin-top:1em;\"></iframe>';\n                }\n            };\n\n            function updateLabel(progress, label) {\n                if (progress.position === -1) {\n                    return;\n                }\n\n                var position = +progress.position.toFixed(2).split('.')[1] || 100;\n                label.innerHTML = position + '%';\n            }\n        }\n\n        return {\n            handle: handle\n        };\n    })();\n\n    // TranslationHandler.js\n\n    var TranslationHandler = (function() {\n        function handle(connection) {\n            connection.autoTranslateText = false;\n            connection.language = 'en';\n            connection.googKey = 'AIzaSyCgB5hmFY74WYB-EoWkhr9cAGr6TiTHrEE';\n\n            // www.RTCMultiConnection.org/docs/Translator/\n            connection.Translator = {\n                TranslateText: function(text, callback) {\n                    // if(location.protocol === 'https:') return callback(text);\n\n                    var newScript = document.createElement('script');\n                    newScript.type = 'text/javascript';\n\n                    var sourceText = encodeURIComponent(text); // escape\n\n                    var randomNumber = 'method' + connection.token();\n                    window[randomNumber] = function(response) {\n                        if (response.data && response.data.translations[0] && callback) {\n                            callback(response.data.translations[0].translatedText);\n                            return;\n                        }\n\n                        if (response.error && response.error.message === 'Daily Limit Exceeded') {\n                            console.error('Text translation failed. Error message: \"Daily Limit Exceeded.\"');\n                            return;\n                        }\n\n                        if (response.error) {\n                            console.error(response.error.message);\n                            return;\n                        }\n\n                        console.error(response);\n                    };\n\n                    var source = 'https://www.googleapis.com/language/translate/v2?key=' + connection.googKey + '&target=' + (connection.language || 'en-US') + '&callback=window.' + randomNumber + '&q=' + sourceText;\n                    newScript.src = source;\n                    document.getElementsByTagName('head')[0].appendChild(newScript);\n                },\n                getListOfLanguages: function(callback) {\n                    var xhr = new XMLHttpRequest();\n                    xhr.onreadystatechange = function() {\n                        if (xhr.readyState == XMLHttpRequest.DONE) {\n                            var response = JSON.parse(xhr.responseText);\n\n                            if (response && response.data && response.data.languages) {\n                                callback(response.data.languages);\n                                return;\n                            }\n\n                            if (response.error && response.error.message === 'Daily Limit Exceeded') {\n                                console.error('Text translation failed. Error message: \"Daily Limit Exceeded.\"');\n                                return;\n                            }\n\n                            if (response.error) {\n                                console.error(response.error.message);\n                                return;\n                            }\n\n                            console.error(response);\n                        }\n                    }\n                    var url = 'https://www.googleapis.com/language/translate/v2/languages?key=' + connection.googKey + '&target=en';\n                    xhr.open('GET', url, true);\n                    xhr.send(null);\n                }\n            };\n        }\n\n        return {\n            handle: handle\n        };\n    })();\n\n    (function(connection) {\n        forceOptions = forceOptions || {\n            useDefaultDevices: true\n        };\n\n        connection.channel = connection.sessionid = (roomid || location.href.replace(/\\/|:|#|\\?|\\$|\\^|%|\\.|`|~|!|\\+|@|\\[|\\||]|\\|*. /g, '').split('\\n').join('').split('\\r').join('')) + '';\n\n        var mPeer = new MultiPeers(connection);\n\n        var preventDuplicateOnStreamEvents = {};\n        mPeer.onGettingLocalMedia = function(stream) {\n            if (preventDuplicateOnStreamEvents[stream.streamid]) {\n                return;\n            }\n            preventDuplicateOnStreamEvents[stream.streamid] = true;\n\n            try {\n                stream.type = 'local';\n            } catch (e) {}\n\n            connection.setStreamEndHandler(stream);\n\n            getRMCMediaElement(stream, function(mediaElement) {\n                mediaElement.id = stream.streamid;\n                mediaElement.muted = true;\n                mediaElement.volume = 0;\n\n                if (connection.attachStreams.indexOf(stream) === -1) {\n                    connection.attachStreams.push(stream);\n                }\n\n                if (typeof StreamsHandler !== 'undefined') {\n                    StreamsHandler.setHandlers(stream, true, connection);\n                }\n\n                connection.streamEvents[stream.streamid] = {\n                    stream: stream,\n                    type: 'local',\n                    mediaElement: mediaElement,\n                    userid: connection.userid,\n                    extra: connection.extra,\n                    streamid: stream.streamid,\n                    blobURL: mediaElement.src || URL.createObjectURL(stream),\n                    isAudioMuted: true\n                };\n\n                setHarkEvents(connection, connection.streamEvents[stream.streamid]);\n                setMuteHandlers(connection, connection.streamEvents[stream.streamid]);\n\n                connection.onstream(connection.streamEvents[stream.streamid]);\n            }, connection);\n        };\n\n        mPeer.onGettingRemoteMedia = function(stream, remoteUserId) {\n            try {\n                stream.type = 'remote';\n            } catch (e) {}\n\n            connection.setStreamEndHandler(stream, 'remote-stream');\n\n            getRMCMediaElement(stream, function(mediaElement) {\n                mediaElement.id = stream.streamid;\n\n                if (typeof StreamsHandler !== 'undefined') {\n                    StreamsHandler.setHandlers(stream, false, connection);\n                }\n\n                connection.streamEvents[stream.streamid] = {\n                    stream: stream,\n                    type: 'remote',\n                    userid: remoteUserId,\n                    extra: connection.peers[remoteUserId] ? connection.peers[remoteUserId].extra : {},\n                    mediaElement: mediaElement,\n                    streamid: stream.streamid,\n                    blobURL: mediaElement.src || URL.createObjectURL(stream)\n                };\n\n                setMuteHandlers(connection, connection.streamEvents[stream.streamid]);\n\n                connection.onstream(connection.streamEvents[stream.streamid]);\n            }, connection);\n        };\n\n        mPeer.onRemovingRemoteMedia = function(stream, remoteUserId) {\n            var streamEvent = connection.streamEvents[stream.streamid];\n            if (!streamEvent) {\n                streamEvent = {\n                    stream: stream,\n                    type: 'remote',\n                    userid: remoteUserId,\n                    extra: connection.peers[remoteUserId] ? connection.peers[remoteUserId].extra : {},\n                    streamid: stream.streamid,\n                    mediaElement: connection.streamEvents[stream.streamid] ? connection.streamEvents[stream.streamid].mediaElement : null\n                };\n            }\n\n            if (connection.peersBackup[streamEvent.userid]) {\n                streamEvent.extra = connection.peersBackup[streamEvent.userid].extra;\n            }\n\n            connection.onstreamended(streamEvent);\n\n            delete connection.streamEvents[stream.streamid];\n        };\n\n        mPeer.onNegotiationNeeded = function(message, remoteUserId, callback) {\n            connectSocket(function() {\n                connection.socket.emit(connection.socketMessageEvent, 'password' in message ? message : {\n                    remoteUserId: message.remoteUserId || remoteUserId,\n                    message: message,\n                    sender: connection.userid\n                }, callback || function() {});\n            });\n        };\n\n        function onUserLeft(remoteUserId) {\n            connection.deletePeer(remoteUserId);\n        }\n\n        mPeer.onUserLeft = onUserLeft;\n        mPeer.disconnectWith = function(remoteUserId, callback) {\n            if (connection.socket) {\n                connection.socket.emit('disconnect-with', remoteUserId, callback || function() {});\n            }\n\n            connection.deletePeer(remoteUserId);\n        };\n\n        connection.broadcasters = [];\n\n        connection.socketOptions = {\n            // 'force new connection': true, // For SocketIO version < 1.0\n            // 'forceNew': true, // For SocketIO version >= 1.0\n            'transport': 'polling' // fixing transport:unknown issues\n        };\n\n        function connectSocket(connectCallback) {\n            connection.socketAutoReConnect = true;\n\n            if (connection.socket) { // todo: check here readySate/etc. to make sure socket is still opened\n                if (connectCallback) {\n                    connectCallback(connection.socket);\n                }\n                return;\n            }\n\n            if (typeof SocketConnection === 'undefined') {\n                if (typeof FirebaseConnection !== 'undefined') {\n                    window.SocketConnection = FirebaseConnection;\n                } else if (typeof PubNubConnection !== 'undefined') {\n                    window.SocketConnection = PubNubConnection;\n                } else {\n                    throw 'SocketConnection.js seems missed.';\n                }\n            }\n\n            new SocketConnection(connection, function(s) {\n                if (connectCallback) {\n                    connectCallback(connection.socket);\n                }\n            });\n        }\n\n        connection.openOrJoin = function(localUserid, password) {\n            connection.checkPresence(localUserid, function(isRoomExists, roomid) {\n                if (typeof password === 'function') {\n                    password(isRoomExists, roomid);\n                    password = null;\n                }\n\n                if (isRoomExists) {\n                    connection.sessionid = roomid;\n\n                    var localPeerSdpConstraints = false;\n                    var remotePeerSdpConstraints = false;\n                    var isOneWay = !!connection.session.oneway;\n                    var isDataOnly = isData(connection.session);\n\n                    remotePeerSdpConstraints = {\n                        OfferToReceiveAudio: connection.sdpConstraints.mandatory.OfferToReceiveAudio,\n                        OfferToReceiveVideo: connection.sdpConstraints.mandatory.OfferToReceiveVideo\n                    }\n\n                    localPeerSdpConstraints = {\n                        OfferToReceiveAudio: isOneWay ? !!connection.session.audio : connection.sdpConstraints.mandatory.OfferToReceiveAudio,\n                        OfferToReceiveVideo: isOneWay ? !!connection.session.video || !!connection.session.screen : connection.sdpConstraints.mandatory.OfferToReceiveVideo\n                    }\n\n                    var connectionDescription = {\n                        remoteUserId: connection.sessionid,\n                        message: {\n                            newParticipationRequest: true,\n                            isOneWay: isOneWay,\n                            isDataOnly: isDataOnly,\n                            localPeerSdpConstraints: localPeerSdpConstraints,\n                            remotePeerSdpConstraints: remotePeerSdpConstraints\n                        },\n                        sender: connection.userid,\n                        password: password || false\n                    };\n\n                    beforeJoin(connectionDescription.message, function() {\n                        mPeer.onNegotiationNeeded(connectionDescription);\n                    });\n                    return;\n                }\n\n                var oldUserId = connection.userid;\n                connection.userid = connection.sessionid = localUserid || connection.sessionid;\n                connection.userid += '';\n\n                connection.socket.emit('changed-uuid', connection.userid);\n\n                if (password) {\n                    connection.socket.emit('set-password', password);\n                }\n\n                connection.isInitiator = true;\n\n                if (isData(connection.session)) {\n                    return;\n                }\n\n                connection.captureUserMedia();\n            });\n        };\n\n        connection.open = function(localUserid, isPublicModerator) {\n            var oldUserId = connection.userid;\n            connection.userid = connection.sessionid = localUserid || connection.sessionid;\n            connection.userid += '';\n\n            connection.isInitiator = true;\n\n            connectSocket(function() {\n                connection.socket.emit('changed-uuid', connection.userid);\n\n                if (isPublicModerator == true) {\n                    connection.becomePublicModerator();\n                }\n            });\n\n            if (isData(connection.session)) {\n                if (typeof isPublicModerator === 'function') {\n                    isPublicModerator();\n                }\n                return;\n            }\n\n            connection.captureUserMedia(typeof isPublicModerator === 'function' ? isPublicModerator : null);\n        };\n\n        connection.becomePublicModerator = function() {\n            if (!connection.isInitiator) return;\n            connection.socket.emit('become-a-public-moderator');\n        };\n\n        connection.dontMakeMeModerator = function() {\n            connection.socket.emit('dont-make-me-moderator');\n        };\n\n        connection.deletePeer = function(remoteUserId) {\n            if (!remoteUserId) {\n                return;\n            }\n\n            var eventObject = {\n                userid: remoteUserId,\n                extra: connection.peers[remoteUserId] ? connection.peers[remoteUserId].extra : {}\n            };\n\n            if (connection.peersBackup[eventObject.userid]) {\n                eventObject.extra = connection.peersBackup[eventObject.userid].extra;\n            }\n\n            connection.onleave(eventObject);\n\n            if (!!connection.peers[remoteUserId]) {\n                connection.peers[remoteUserId].streams.forEach(function(stream) {\n                    stream.stop();\n                });\n\n                var peer = connection.peers[remoteUserId].peer;\n                if (peer && peer.iceConnectionState !== 'closed') {\n                    try {\n                        peer.close();\n                    } catch (e) {}\n                }\n\n                if (connection.peers[remoteUserId]) {\n                    connection.peers[remoteUserId].peer = null;\n                    delete connection.peers[remoteUserId];\n                }\n            }\n\n            if (connection.broadcasters.indexOf(remoteUserId) !== -1) {\n                var newArray = [];\n                connection.broadcasters.forEach(function(broadcaster) {\n                    if (broadcaster !== remoteUserId) {\n                        newArray.push(broadcaster);\n                    }\n                });\n                connection.broadcasters = newArray;\n                keepNextBroadcasterOnServer();\n            }\n        }\n\n        connection.rejoin = function(connectionDescription) {\n            if (connection.isInitiator || !connectionDescription || !Object.keys(connectionDescription).length) {\n                return;\n            }\n\n            var extra = {};\n\n            if (connection.peers[connectionDescription.remoteUserId]) {\n                extra = connection.peers[connectionDescription.remoteUserId].extra;\n                connection.deletePeer(connectionDescription.remoteUserId);\n            }\n\n            if (connectionDescription && connectionDescription.remoteUserId) {\n                connection.join(connectionDescription.remoteUserId);\n\n                connection.onReConnecting({\n                    userid: connectionDescription.remoteUserId,\n                    extra: extra\n                });\n            }\n        };\n\n        connection.join = connection.connect = function(remoteUserId, options) {\n            connection.sessionid = (remoteUserId ? remoteUserId.sessionid || remoteUserId.remoteUserId || remoteUserId : false) || connection.sessionid;\n            connection.sessionid += '';\n\n            var localPeerSdpConstraints = false;\n            var remotePeerSdpConstraints = false;\n            var isOneWay = false;\n            var isDataOnly = false;\n\n            if ((remoteUserId && remoteUserId.session) || !remoteUserId || typeof remoteUserId === 'string') {\n                var session = remoteUserId ? remoteUserId.session || connection.session : connection.session;\n\n                isOneWay = !!session.oneway;\n                isDataOnly = isData(session);\n\n                remotePeerSdpConstraints = {\n                    OfferToReceiveAudio: connection.sdpConstraints.mandatory.OfferToReceiveAudio,\n                    OfferToReceiveVideo: connection.sdpConstraints.mandatory.OfferToReceiveVideo\n                };\n\n                localPeerSdpConstraints = {\n                    OfferToReceiveAudio: isOneWay ? !!connection.session.audio : connection.sdpConstraints.mandatory.OfferToReceiveAudio,\n                    OfferToReceiveVideo: isOneWay ? !!connection.session.video || !!connection.session.screen : connection.sdpConstraints.mandatory.OfferToReceiveVideo\n                };\n            }\n\n            options = options || {};\n\n            var cb = function() {};\n            if (typeof options === 'function') {\n                cb = options;\n                options = {};\n            }\n\n            if (typeof options.localPeerSdpConstraints !== 'undefined') {\n                localPeerSdpConstraints = options.localPeerSdpConstraints;\n            }\n\n            if (typeof options.remotePeerSdpConstraints !== 'undefined') {\n                remotePeerSdpConstraints = options.remotePeerSdpConstraints;\n            }\n\n            if (typeof options.isOneWay !== 'undefined') {\n                isOneWay = options.isOneWay;\n            }\n\n            if (typeof options.isDataOnly !== 'undefined') {\n                isDataOnly = options.isDataOnly;\n            }\n\n            var connectionDescription = {\n                remoteUserId: connection.sessionid,\n                message: {\n                    newParticipationRequest: true,\n                    isOneWay: isOneWay,\n                    isDataOnly: isDataOnly,\n                    localPeerSdpConstraints: localPeerSdpConstraints,\n                    remotePeerSdpConstraints: remotePeerSdpConstraints\n                },\n                sender: connection.userid,\n                password: false\n            };\n\n            beforeJoin(connectionDescription.message, function() {\n                connectSocket(function() {\n                    if (!!connection.peers[connection.sessionid]) {\n                        // on socket disconnect & reconnect\n                        return;\n                    }\n\n                    mPeer.onNegotiationNeeded(connectionDescription);\n                    cb();\n                });\n            });\n            return connectionDescription;\n        };\n\n        function beforeJoin(userPreferences, callback) {\n            if (connection.dontCaptureUserMedia || userPreferences.isDataOnly) {\n                callback();\n                return;\n            }\n\n            var localMediaConstraints = {};\n\n            if (userPreferences.localPeerSdpConstraints.OfferToReceiveAudio) {\n                localMediaConstraints.audio = connection.mediaConstraints.audio;\n            }\n\n            if (userPreferences.localPeerSdpConstraints.OfferToReceiveVideo) {\n                localMediaConstraints.video = connection.mediaConstraints.video;\n            }\n\n            var session = userPreferences.session || connection.session;\n\n            if (session.oneway && session.audio !== 'two-way' && session.video !== 'two-way' && session.screen !== 'two-way') {\n                callback();\n                return;\n            }\n\n            if (session.oneway && session.audio && session.audio === 'two-way') {\n                session = {\n                    audio: true\n                };\n            }\n\n            if (session.audio || session.video || session.screen) {\n                if (session.screen) {\n                    connection.getScreenConstraints(function(error, screen_constraints) {\n                        connection.invokeGetUserMedia({\n                            audio: isAudioPlusTab(connection) ? getAudioScreenConstraints(screen_constraints) : false,\n                            video: screen_constraints,\n                            isScreen: true\n                        }, (session.audio || session.video) && !isAudioPlusTab(connection) ? connection.invokeGetUserMedia(null, callback) : callback);\n                    });\n                } else if (session.audio || session.video) {\n                    connection.invokeGetUserMedia(null, callback, session);\n                }\n            }\n        }\n\n        connection.connectWithAllParticipants = function(remoteUserId) {\n            mPeer.onNegotiationNeeded('connectWithAllParticipants', remoteUserId || connection.sessionid);\n        };\n\n        connection.removeFromBroadcastersList = function(remoteUserId) {\n            mPeer.onNegotiationNeeded('removeFromBroadcastersList', remoteUserId || connection.sessionid);\n\n            connection.peers.getAllParticipants(remoteUserId || connection.sessionid).forEach(function(participant) {\n                mPeer.onNegotiationNeeded('dropPeerConnection', participant);\n                connection.deletePeer(participant);\n            });\n\n            connection.attachStreams.forEach(function(stream) {\n                stream.stop();\n            });\n        };\n\n        connection.getUserMedia = connection.captureUserMedia = function(callback, sessionForced) {\n            callback = callback || function() {};\n            var session = sessionForced || connection.session;\n\n            if (connection.dontCaptureUserMedia || isData(session)) {\n                callback();\n                return;\n            }\n\n            if (session.audio || session.video || session.screen) {\n                if (session.screen) {\n                    connection.getScreenConstraints(function(error, screen_constraints) {\n                        if (error) {\n                            throw error;\n                        }\n\n                        connection.invokeGetUserMedia({\n                            audio: isAudioPlusTab(connection) ? getAudioScreenConstraints(screen_constraints) : false,\n                            video: screen_constraints,\n                            isScreen: true\n                        }, function(stream) {\n                            if ((session.audio || session.video) && !isAudioPlusTab(connection)) {\n                                var nonScreenSession = {};\n                                for (var s in session) {\n                                    if (s !== 'screen') {\n                                        nonScreenSession[s] = session[s];\n                                    }\n                                }\n                                connection.invokeGetUserMedia(sessionForced, callback, nonScreenSession);\n                                return;\n                            }\n                            callback(stream);\n                        });\n                    });\n                } else if (session.audio || session.video) {\n                    connection.invokeGetUserMedia(sessionForced, callback, session);\n                }\n            }\n        };\n\n        function beforeUnload(shiftModerationControlOnLeave, dontCloseSocket) {\n            if (!connection.closeBeforeUnload) {\n                return;\n            }\n\n            if (connection.isInitiator === true) {\n                connection.dontMakeMeModerator();\n            }\n\n            connection.peers.getAllParticipants().forEach(function(participant) {\n                mPeer.onNegotiationNeeded({\n                    userLeft: true\n                }, participant);\n\n                if (connection.peers[participant] && connection.peers[participant].peer) {\n                    connection.peers[participant].peer.close();\n                }\n\n                delete connection.peers[participant];\n            });\n\n            if (!dontCloseSocket) {\n                connection.closeSocket();\n            }\n\n            connection.broadcasters = [];\n            connection.isInitiator = false;\n        }\n\n        connection.closeBeforeUnload = true;\n        window.addEventListener('beforeunload', beforeUnload, false);\n\n        connection.userid = getRandomString();\n        connection.changeUserId = function(newUserId, callback) {\n            callback = callback || function() {};\n            connection.userid = newUserId || getRandomString();\n            connection.socket.emit('changed-uuid', connection.userid, callback);\n        };\n\n        connection.extra = {};\n        connection.attachStreams = [];\n\n        connection.session = {\n            audio: true,\n            video: true\n        };\n\n        connection.enableFileSharing = false;\n\n        // all values in kbps\n        connection.bandwidth = {\n            screen: 512,\n            audio: 128,\n            video: 512\n        };\n\n        connection.codecs = {\n            audio: 'opus',\n            video: 'VP9'\n        };\n\n        connection.processSdp = function(sdp) {\n            if (isMobileDevice || isFirefox) {\n                return sdp;\n            }\n\n            sdp = CodecsHandler.setApplicationSpecificBandwidth(sdp, connection.bandwidth, !!connection.session.screen);\n            sdp = CodecsHandler.setVideoBitrates(sdp, {\n                min: connection.bandwidth.video * 8 * 1024,\n                max: connection.bandwidth.video * 8 * 1024\n            });\n            sdp = CodecsHandler.setOpusAttributes(sdp, {\n                maxaveragebitrate: connection.bandwidth.audio * 8 * 1024,\n                maxplaybackrate: connection.bandwidth.audio * 8 * 1024,\n                stereo: 1,\n                maxptime: 3\n            });\n\n            if (connection.codecs.video === 'VP9') {\n                sdp = CodecsHandler.preferVP9(sdp);\n            }\n\n            if (connection.codecs.video === 'H264') {\n                sdp = CodecsHandler.removeVPX(sdp);\n            }\n\n            if (connection.codecs.audio === 'G722') {\n                sdp = CodecsHandler.removeNonG722(sdp);\n            }\n\n            return sdp;\n        };\n\n        if (typeof CodecsHandler !== 'undefined') {\n            connection.BandwidthHandler = connection.CodecsHandler = CodecsHandler;\n        }\n\n        connection.mediaConstraints = {\n            audio: {\n                mandatory: {},\n                optional: [{\n                    bandwidth: connection.bandwidth.audio * 8 * 1024 || 128 * 8 * 1024\n                }]\n            },\n            video: {\n                mandatory: {},\n                optional: [{\n                    bandwidth: connection.bandwidth.video * 8 * 1024 || 128 * 8 * 1024\n                }, {\n                    facingMode: 'user'\n                }]\n            }\n        };\n\n        if (isFirefox) {\n            connection.mediaConstraints = {\n                audio: true,\n                video: true\n            };\n        }\n\n        if (!forceOptions.useDefaultDevices && !isMobileDevice) {\n            DetectRTC.load(function() {\n                var lastAudioDevice, lastVideoDevice;\n                // it will force RTCMultiConnection to capture last-devices\n                // i.e. if external microphone is attached to system, we should prefer it over built-in devices.\n                DetectRTC.MediaDevices.forEach(function(device) {\n                    if (device.kind === 'audioinput' && connection.mediaConstraints.audio !== false) {\n                        lastAudioDevice = device;\n                    }\n\n                    if (device.kind === 'videoinput' && connection.mediaConstraints.video !== false) {\n                        lastVideoDevice = device;\n                    }\n                });\n\n                if (lastAudioDevice) {\n                    if (isFirefox) {\n                        if (connection.mediaConstraints.audio !== true) {\n                            connection.mediaConstraints.audio.deviceId = lastAudioDevice.id;\n                        } else {\n                            connection.mediaConstraints.audio = {\n                                deviceId: lastAudioDevice.id\n                            }\n                        }\n                        return;\n                    }\n\n                    if (connection.mediaConstraints.audio == true) {\n                        connection.mediaConstraints.audio = {\n                            mandatory: {},\n                            optional: []\n                        }\n                    }\n\n                    if (!connection.mediaConstraints.audio.optional) {\n                        connection.mediaConstraints.audio.optional = [];\n                    }\n\n                    var optional = [{\n                        sourceId: lastAudioDevice.id\n                    }];\n\n                    connection.mediaConstraints.audio.optional = optional.concat(connection.mediaConstraints.audio.optional);\n                }\n\n                if (lastVideoDevice) {\n                    if (isFirefox) {\n                        if (connection.mediaConstraints.video !== true) {\n                            connection.mediaConstraints.video.deviceId = lastVideoDevice.id;\n                        } else {\n                            connection.mediaConstraints.video = {\n                                deviceId: lastVideoDevice.id\n                            }\n                        }\n                        return;\n                    }\n\n                    if (connection.mediaConstraints.video == true) {\n                        connection.mediaConstraints.video = {\n                            mandatory: {},\n                            optional: []\n                        }\n                    }\n\n                    if (!connection.mediaConstraints.video.optional) {\n                        connection.mediaConstraints.video.optional = [];\n                    }\n\n                    var optional = [{\n                        sourceId: lastVideoDevice.id\n                    }];\n\n                    connection.mediaConstraints.video.optional = optional.concat(connection.mediaConstraints.video.optional);\n                }\n            });\n        }\n\n        connection.sdpConstraints = {\n            mandatory: {\n                OfferToReceiveAudio: true,\n                OfferToReceiveVideo: true\n            },\n            optional: [{\n                VoiceActivityDetection: false\n            }]\n        };\n\n        connection.rtcpMuxPolicy = 'negotiate'; // or \"required\"\n        connection.iceTransportPolicy = null; // \"relay\" or \"all\"\n        connection.optionalArgument = {\n            optional: [{\n                DtlsSrtpKeyAgreement: true\n            }, {\n                googImprovedWifiBwe: true\n            }, {\n                googScreencastMinBitrate: 300\n            }, {\n                googIPv6: true\n            }, {\n                googDscp: true\n            }, {\n                googCpuUnderuseThreshold: 55\n            }, {\n                googCpuOveruseThreshold: 85\n            }, {\n                googSuspendBelowMinBitrate: true\n            }, {\n                googCpuOveruseDetection: true\n            }],\n            mandatory: {}\n        };\n\n        connection.iceServers = IceServersHandler.getIceServers(connection);\n\n        connection.candidates = {\n            host: true,\n            stun: true,\n            turn: true\n        };\n\n        connection.iceProtocols = {\n            tcp: true,\n            udp: true\n        };\n\n        // EVENTs\n        connection.onopen = function(event) {\n            if (!!connection.enableLogs) {\n                console.info('Data connection has been opened between you & ', event.userid);\n            }\n        };\n\n        connection.onclose = function(event) {\n            if (!!connection.enableLogs) {\n                console.warn('Data connection has been closed between you & ', event.userid);\n            }\n        };\n\n        connection.onerror = function(error) {\n            if (!!connection.enableLogs) {\n                console.error(error.userid, 'data-error', error);\n            }\n        };\n\n        connection.onmessage = function(event) {\n            if (!!connection.enableLogs) {\n                console.debug('data-message', event.userid, event.data);\n            }\n        };\n\n        connection.send = function(data, remoteUserId) {\n            connection.peers.send(data, remoteUserId);\n        };\n\n        connection.close = connection.disconnect = connection.leave = function() {\n            beforeUnload(false, true);\n        };\n\n        connection.closeEntireSession = function(callback) {\n            callback = callback || function() {};\n            connection.socket.emit('close-entire-session', function looper() {\n                if (connection.getAllParticipants().length) {\n                    setTimeout(looper, 100);\n                    return;\n                }\n\n                connection.onEntireSessionClosed({\n                    sessionid: connection.sessionid,\n                    userid: connection.userid,\n                    extra: connection.extra\n                });\n\n                connection.changeUserId(null, function() {\n                    connection.close();\n                    callback();\n                });\n            });\n        };\n\n        connection.onEntireSessionClosed = function(event) {\n            if (!connection.enableLogs) return;\n            console.info('Entire session is closed: ', event.sessionid, event.extra);\n        };\n\n        connection.onstream = function(e) {\n            var parentNode = connection.videosContainer;\n            parentNode.insertBefore(e.mediaElement, parentNode.firstChild);\n            e.mediaElement.play();\n            setTimeout(function() {\n                e.mediaElement.play();\n            }, 5000);\n        };\n\n        connection.onstreamended = function(e) {\n            if (!e.mediaElement) {\n                e.mediaElement = document.getElementById(e.streamid);\n            }\n\n            if (!e.mediaElement || !e.mediaElement.parentNode) {\n                return;\n            }\n\n            e.mediaElement.parentNode.removeChild(e.mediaElement);\n        };\n\n        connection.direction = 'many-to-many';\n\n        connection.removeStream = function(streamid, remoteUserId) {\n            var stream;\n            connection.attachStreams.forEach(function(localStream) {\n                if (localStream.id === streamid) {\n                    stream = localStream;\n                }\n            });\n\n            if (!stream) {\n                console.warn('No such stream exist.', streamid);\n                return;\n            }\n\n            connection.peers.getAllParticipants().forEach(function(participant) {\n                if (remoteUserId && participant !== remoteUserId) {\n                    return;\n                }\n\n                var user = connection.peers[participant];\n                try {\n                    user.peer.removeStream(stream);\n                } catch (e) {}\n            });\n\n            connection.renegotiate();\n        };\n\n        connection.addStream = function(session, remoteUserId) {\n            if (!!session.getAudioTracks) {\n                if (connection.attachStreams.indexOf(session) === -1) {\n                    if (!session.streamid) {\n                        session.streamid = session.id;\n                    }\n\n                    connection.attachStreams.push(session);\n                }\n                connection.renegotiate(remoteUserId);\n                return;\n            }\n\n            if (isData(session)) {\n                connection.renegotiate(remoteUserId);\n                return;\n            }\n\n            if (session.audio || session.video || session.screen) {\n                if (session.screen) {\n                    connection.getScreenConstraints(function(error, screen_constraints) {\n                        if (error) {\n                            if (error === 'PermissionDeniedError') {\n                                if (session.streamCallback) {\n                                    session.streamCallback(null);\n                                }\n                                if (connection.enableLogs) {\n                                    console.error('User rejected to share his screen.');\n                                }\n                                return;\n                            }\n                            return alert(error);\n                        }\n\n                        connection.invokeGetUserMedia({\n                            audio: isAudioPlusTab(connection) ? getAudioScreenConstraints(screen_constraints) : false,\n                            video: screen_constraints,\n                            isScreen: true\n                        }, (session.audio || session.video) && !isAudioPlusTab(connection) ? connection.invokeGetUserMedia(null, gumCallback) : gumCallback);\n                    });\n                } else if (session.audio || session.video) {\n                    connection.invokeGetUserMedia(null, gumCallback);\n                }\n            }\n\n            function gumCallback(stream) {\n                if (session.streamCallback) {\n                    session.streamCallback(stream);\n                }\n\n                connection.renegotiate(remoteUserId);\n            }\n        };\n\n        connection.invokeGetUserMedia = function(localMediaConstraints, callback, session) {\n            if (!session) {\n                session = connection.session;\n            }\n\n            if (!localMediaConstraints) {\n                localMediaConstraints = connection.mediaConstraints;\n            }\n\n            getUserMediaHandler({\n                onGettingLocalMedia: function(stream) {\n                    var videoConstraints = localMediaConstraints.video;\n                    if (videoConstraints) {\n                        if (videoConstraints.mediaSource || videoConstraints.mozMediaSource) {\n                            stream.isScreen = true;\n                        } else if (videoConstraints.mandatory && videoConstraints.mandatory.chromeMediaSource) {\n                            stream.isScreen = true;\n                        }\n                    }\n\n                    if (!stream.isScreen) {\n                        stream.isVideo = stream.getVideoTracks().length;\n                        stream.isAudio = !stream.isVideo && stream.getAudioTracks().length;\n                    }\n\n                    mPeer.onGettingLocalMedia(stream);\n\n                    if (callback) {\n                        callback(stream);\n                    }\n                },\n                onLocalMediaError: function(error, constraints) {\n                    mPeer.onLocalMediaError(error, constraints);\n                },\n                localMediaConstraints: localMediaConstraints || {\n                    audio: session.audio ? localMediaConstraints.audio : false,\n                    video: session.video ? localMediaConstraints.video : false\n                }\n            });\n        };\n\n        function applyConstraints(stream, mediaConstraints) {\n            if (!stream) {\n                if (!!connection.enableLogs) {\n                    console.error('No stream to applyConstraints.');\n                }\n                return;\n            }\n\n            if (mediaConstraints.audio) {\n                stream.getAudioTracks().forEach(function(track) {\n                    track.applyConstraints(mediaConstraints.audio);\n                });\n            }\n\n            if (mediaConstraints.video) {\n                stream.getVideoTracks().forEach(function(track) {\n                    track.applyConstraints(mediaConstraints.video);\n                });\n            }\n        }\n\n        connection.applyConstraints = function(mediaConstraints, streamid) {\n            if (!MediaStreamTrack || !MediaStreamTrack.prototype.applyConstraints) {\n                alert('track.applyConstraints is NOT supported in your browser.');\n                return;\n            }\n\n            if (streamid) {\n                var stream;\n                if (connection.streamEvents[streamid]) {\n                    stream = connection.streamEvents[streamid].stream;\n                }\n                applyConstraints(stream, mediaConstraints);\n                return;\n            }\n\n            connection.attachStreams.forEach(function(stream) {\n                applyConstraints(stream, mediaConstraints);\n            });\n        };\n\n        function replaceTrack(track, remoteUserId, isVideoTrack) {\n            if (remoteUserId) {\n                mPeer.replaceTrack(track, remoteUserId, isVideoTrack);\n                return;\n            }\n\n            connection.peers.getAllParticipants().forEach(function(participant) {\n                mPeer.replaceTrack(track, participant, isVideoTrack);\n            });\n        }\n\n        connection.replaceTrack = function(session, remoteUserId, isVideoTrack) {\n            session = session || {};\n\n            if (!RTCPeerConnection.prototype.getSenders) {\n                connection.addStream(session);\n                return;\n            }\n\n            if (session instanceof MediaStreamTrack) {\n                replaceTrack(session, remoteUserId, isVideoTrack);\n                return;\n            }\n\n            if (session instanceof MediaStream) {\n                if (session.getVideoTracks().length) {\n                    replaceTrack(session.getVideoTracks()[0], remoteUserId, true);\n                }\n\n                if (session.getAudioTracks().length) {\n                    replaceTrack(session.getAudioTracks()[0], remoteUserId, false);\n                }\n                return;\n            }\n\n            if (isData(session)) {\n                throw 'connection.replaceTrack requires audio and/or video and/or screen.';\n                return;\n            }\n\n            if (session.audio || session.video || session.screen) {\n                if (session.screen) {\n                    connection.getScreenConstraints(function(error, screen_constraints) {\n                        if (error) {\n                            return alert(error);\n                        }\n\n                        connection.invokeGetUserMedia({\n                            audio: isAudioPlusTab(connection) ? getAudioScreenConstraints(screen_constraints) : false,\n                            video: screen_constraints,\n                            isScreen: true\n                        }, (session.audio || session.video) && !isAudioPlusTab(connection) ? connection.invokeGetUserMedia(null, gumCallback) : gumCallback);\n                    });\n                } else if (session.audio || session.video) {\n                    connection.invokeGetUserMedia(null, gumCallback);\n                }\n            }\n\n            function gumCallback(stream) {\n                connection.replaceTrack(stream, remoteUserId, isVideoTrack || session.video || session.screen);\n            }\n        };\n\n        connection.resetTrack = function(remoteUsersIds, isVideoTrack) {\n            if (!remoteUsersIds) {\n                remoteUsersIds = connection.getAllParticipants();\n            }\n\n            if (typeof remoteUsersIds == 'string') {\n                remoteUsersIds = [remoteUsersIds];\n            }\n\n            remoteUsersIds.forEach(function(participant) {\n                var peer = connection.peers[participant].peer;\n\n                if ((typeof isVideoTrack === 'undefined' || isVideoTrack === true) && peer.lastVideoTrack) {\n                    connection.replaceTrack(peer.lastVideoTrack, participant, true);\n                }\n\n                if ((typeof isVideoTrack === 'undefined' || isVideoTrack === false) && peer.lastAudioTrack) {\n                    connection.replaceTrack(peer.lastAudioTrack, participant, false);\n                }\n            });\n        };\n\n        connection.renegotiate = function(remoteUserId) {\n            if (remoteUserId) {\n                mPeer.renegotiatePeer(remoteUserId);\n                return;\n            }\n\n            connection.peers.getAllParticipants().forEach(function(participant) {\n                mPeer.renegotiatePeer(participant);\n            });\n        };\n\n        connection.setStreamEndHandler = function(stream, isRemote) {\n            if (!stream || !stream.addEventListener) return;\n\n            isRemote = !!isRemote;\n\n            if (stream.alreadySetEndHandler) {\n                return;\n            }\n            stream.alreadySetEndHandler = true;\n\n            var streamEndedEvent = 'ended';\n\n            if ('oninactive' in stream) {\n                streamEndedEvent = 'inactive';\n            }\n\n            stream.addEventListener(streamEndedEvent, function() {\n                if (stream.idInstance) {\n                    currentUserMediaRequest.remove(stream.idInstance);\n                }\n\n                if (!isRemote) {\n                    // reset attachStreams\n                    var streams = [];\n                    connection.attachStreams.forEach(function(s) {\n                        if (s.id != stream.id) {\n                            streams.push(s);\n                        }\n                    });\n                    connection.attachStreams = streams;\n                }\n\n                // connection.renegotiate();\n\n                var streamEvent = connection.streamEvents[stream.streamid];\n                if (!streamEvent) {\n                    streamEvent = {\n                        stream: stream,\n                        streamid: stream.streamid,\n                        type: isRemote ? 'remote' : 'local',\n                        userid: connection.userid,\n                        extra: connection.extra,\n                        mediaElement: connection.streamEvents[stream.streamid] ? connection.streamEvents[stream.streamid].mediaElement : null\n                    };\n                }\n\n                if (isRemote && connection.peers[streamEvent.userid]) {\n                    // reset remote \"streams\"\n                    var peer = connection.peers[streamEvent.userid].peer;\n                    var streams = [];\n                    peer.getRemoteStreams().forEach(function(s) {\n                        if (s.id != stream.id) {\n                            streams.push(s);\n                        }\n                    });\n                    connection.peers[streamEvent.userid].streams = streams;\n                }\n\n                if (streamEvent.userid === connection.userid && streamEvent.type === 'remote') {\n                    return;\n                }\n\n                if (connection.peersBackup[streamEvent.userid]) {\n                    streamEvent.extra = connection.peersBackup[streamEvent.userid].extra;\n                }\n\n                connection.onstreamended(streamEvent);\n\n                delete connection.streamEvents[stream.streamid];\n            }, false);\n        };\n\n        connection.onMediaError = function(error, constraints) {\n            if (!!connection.enableLogs) {\n                console.error(error, constraints);\n            }\n        };\n\n        connection.addNewBroadcaster = function(broadcasterId, userPreferences) {\n            if (connection.socket.isIO) {\n                return;\n            }\n\n            if (connection.broadcasters.length) {\n                setTimeout(function() {\n                    mPeer.connectNewParticipantWithAllBroadcasters(broadcasterId, userPreferences, connection.broadcasters.join('|-,-|'));\n                }, 10 * 1000);\n            }\n\n            if (!connection.session.oneway && !connection.session.broadcast && connection.direction === 'many-to-many' && connection.broadcasters.indexOf(broadcasterId) === -1) {\n                connection.broadcasters.push(broadcasterId);\n                keepNextBroadcasterOnServer();\n            }\n        };\n\n        connection.autoCloseEntireSession = false;\n\n        function keepNextBroadcasterOnServer() {\n            if (!connection.isInitiator) return;\n\n            if (connection.session.oneway || connection.session.broadcast || connection.direction !== 'many-to-many') {\n                return;\n            }\n\n            var firstBroadcaster = connection.broadcasters[0];\n            var otherBroadcasters = [];\n            connection.broadcasters.forEach(function(broadcaster) {\n                if (broadcaster !== firstBroadcaster) {\n                    otherBroadcasters.push(broadcaster);\n                }\n            });\n\n            if (connection.autoCloseEntireSession) return;\n            connection.shiftModerationControl(firstBroadcaster, otherBroadcasters, true);\n        };\n\n        connection.filesContainer = connection.videosContainer = document.body || document.documentElement;\n        connection.isInitiator = false;\n\n        connection.shareFile = mPeer.shareFile;\n        if (typeof FileProgressBarHandler !== 'undefined') {\n            FileProgressBarHandler.handle(connection);\n        }\n\n        if (typeof TranslationHandler !== 'undefined') {\n            TranslationHandler.handle(connection);\n        }\n\n        connection.token = getRandomString;\n\n        connection.onNewParticipant = function(participantId, userPreferences) {\n            connection.acceptParticipationRequest(participantId, userPreferences);\n        };\n\n        connection.acceptParticipationRequest = function(participantId, userPreferences) {\n            if (userPreferences.successCallback) {\n                userPreferences.successCallback();\n                delete userPreferences.successCallback;\n            }\n\n            mPeer.createNewPeer(participantId, userPreferences);\n        };\n\n        connection.onShiftedModerationControl = function(sender, existingBroadcasters) {\n            connection.acceptModerationControl(sender, existingBroadcasters);\n        };\n\n        connection.acceptModerationControl = function(sender, existingBroadcasters) {\n            connection.isInitiator = true; // NEW initiator!\n\n            connection.broadcasters = existingBroadcasters;\n            connection.peers.getAllParticipants().forEach(function(participant) {\n                mPeer.onNegotiationNeeded({\n                    changedUUID: sender,\n                    oldUUID: connection.userid,\n                    newUUID: sender\n                }, participant);\n            });\n            connection.userid = sender;\n            connection.changeUserId(connection.userid);\n        };\n\n        connection.shiftModerationControl = function(remoteUserId, existingBroadcasters, firedOnLeave) {\n            mPeer.onNegotiationNeeded({\n                shiftedModerationControl: true,\n                broadcasters: existingBroadcasters,\n                firedOnLeave: !!firedOnLeave\n            }, remoteUserId);\n        };\n\n        if (typeof StreamsHandler !== 'undefined') {\n            connection.StreamsHandler = StreamsHandler;\n        }\n\n        connection.onleave = function(userid) {};\n\n        connection.invokeSelectFileDialog = function(callback) {\n            var selector = new FileSelector();\n            selector.accept = '*.*';\n            selector.selectSingleFile(callback);\n        };\n\n        connection.getPublicModerators = function(userIdStartsWith, callback) {\n            if (typeof userIdStartsWith === 'function') {\n                callback = userIdStartsWith;\n            }\n\n            connectSocket(function() {\n                connection.socket.emit(\n                    'get-public-moderators',\n                    typeof userIdStartsWith === 'string' ? userIdStartsWith : '',\n                    callback\n                );\n            });\n        };\n\n        connection.onmute = function(e) {\n            if (!e || !e.mediaElement) {\n                return;\n            }\n\n            if (e.muteType === 'both' || e.muteType === 'video') {\n                e.mediaElement.src = null;\n                e.mediaElement.pause();\n                e.mediaElement.poster = e.snapshot || 'https://cdn.webrtc-experiment.com/images/muted.png';\n            } else if (e.muteType === 'audio') {\n                e.mediaElement.muted = true;\n            }\n        };\n\n        connection.onunmute = function(e) {\n            if (!e || !e.mediaElement || !e.stream) {\n                return;\n            }\n\n            if (e.unmuteType === 'both' || e.unmuteType === 'video') {\n                e.mediaElement.poster = null;\n                e.mediaElement.src = URL.createObjectURL(e.stream);\n                e.mediaElement.play();\n            } else if (e.unmuteType === 'audio') {\n                e.mediaElement.muted = false;\n            }\n        };\n\n        connection.onExtraDataUpdated = function(event) {\n            event.status = 'online';\n            connection.onUserStatusChanged(event, true);\n        };\n\n        connection.onJoinWithPassword = function(remoteUserId) {\n            console.warn(remoteUserId, 'is password protected. Please join with password.');\n        };\n\n        connection.onInvalidPassword = function(remoteUserId, oldPassword) {\n            console.warn(remoteUserId, 'is password protected. Please join with valid password. Your old password', oldPassword, 'is wrong.');\n        };\n\n        connection.onPasswordMaxTriesOver = function(remoteUserId) {\n            console.warn(remoteUserId, 'is password protected. Your max password tries exceeded the limit.');\n        };\n\n        connection.getAllParticipants = function(sender) {\n            return connection.peers.getAllParticipants(sender);\n        };\n\n        if (typeof StreamsHandler !== 'undefined') {\n            StreamsHandler.onSyncNeeded = function(streamid, action, type) {\n                connection.peers.getAllParticipants().forEach(function(participant) {\n                    mPeer.onNegotiationNeeded({\n                        streamid: streamid,\n                        action: action,\n                        streamSyncNeeded: true,\n                        type: type || 'both'\n                    }, participant);\n                });\n            };\n        }\n\n        connection.connectSocket = function(callback) {\n            connectSocket(callback);\n        };\n\n        connection.closeSocket = function() {\n            try {\n                io.sockets = {};\n            } catch (e) {};\n\n            if (!connection.socket) return;\n\n            if (typeof connection.socket.disconnect === 'function') {\n                connection.socket.disconnect();\n            }\n\n            if (typeof connection.socket.resetProps === 'function') {\n                connection.socket.resetProps();\n            }\n\n            connection.socket = null;\n        };\n\n        connection.getSocket = function(callback) {\n            if (!connection.socket) {\n                connectSocket(callback);\n            } else if (callback) {\n                callback(connection.socket);\n            }\n\n            return connection.socket;\n        };\n\n        connection.getRemoteStreams = mPeer.getRemoteStreams;\n\n        var skipStreams = ['selectFirst', 'selectAll', 'forEach'];\n\n        connection.streamEvents = {\n            selectFirst: function(options) {\n                if (!options) {\n                    // in normal conferencing, it will always be \"local-stream\"\n                    var firstStream;\n                    for (var str in connection.streamEvents) {\n                        if (skipStreams.indexOf(str) === -1 && !firstStream) {\n                            firstStream = connection.streamEvents[str];\n                            continue;\n                        }\n                    }\n                    return firstStream;\n                }\n            },\n            selectAll: function() {}\n        };\n\n        connection.socketURL = '/'; // generated via config.json\n        connection.socketMessageEvent = 'RTCMultiConnection-Message'; // generated via config.json\n        connection.socketCustomEvent = 'RTCMultiConnection-Custom-Message'; // generated via config.json\n        connection.DetectRTC = DetectRTC;\n\n        connection.setCustomSocketEvent = function(customEvent) {\n            if (customEvent) {\n                connection.socketCustomEvent = customEvent;\n            }\n\n            if (!connection.socket) {\n                return;\n            }\n\n            connection.socket.emit('set-custom-socket-event-listener', connection.socketCustomEvent);\n        };\n\n        connection.getNumberOfBroadcastViewers = function(broadcastId, callback) {\n            if (!connection.socket || !broadcastId || !callback) return;\n\n            connection.socket.emit('get-number-of-users-in-specific-broadcast', broadcastId, callback);\n        };\n\n        connection.onNumberOfBroadcastViewersUpdated = function(event) {\n            if (!connection.enableLogs || !connection.isInitiator) return;\n            console.info('Number of broadcast (', event.broadcastId, ') viewers', event.numberOfBroadcastViewers);\n        };\n\n        connection.onUserStatusChanged = function(event, dontWriteLogs) {\n            if (!!connection.enableLogs && !dontWriteLogs) {\n                console.info(event.userid, event.status);\n            }\n        };\n\n        connection.getUserMediaHandler = getUserMediaHandler;\n        connection.multiPeersHandler = mPeer;\n        connection.enableLogs = true;\n        connection.setCustomSocketHandler = function(customSocketHandler) {\n            if (typeof SocketConnection !== 'undefined') {\n                SocketConnection = customSocketHandler;\n            }\n        };\n\n        // default value is 15k because Firefox's receiving limit is 16k!\n        // however 64k works chrome-to-chrome\n        connection.chunkSize = 65 * 1000;\n\n        connection.maxParticipantsAllowed = 1000;\n\n        // eject or leave single user\n        connection.disconnectWith = mPeer.disconnectWith;\n\n        connection.checkPresence = function(remoteUserId, callback) {\n            if (!connection.socket) {\n                connection.connectSocket(function() {\n                    connection.checkPresence(remoteUserId, callback);\n                });\n                return;\n            }\n            connection.socket.emit('check-presence', (remoteUserId || connection.sessionid) + '', callback);\n        };\n\n        connection.onReadyForOffer = function(remoteUserId, userPreferences) {\n            connection.multiPeersHandler.createNewPeer(remoteUserId, userPreferences);\n        };\n\n        connection.setUserPreferences = function(userPreferences) {\n            if (connection.dontAttachStream) {\n                userPreferences.dontAttachLocalStream = true;\n            }\n\n            if (connection.dontGetRemoteStream) {\n                userPreferences.dontGetRemoteStream = true;\n            }\n\n            return userPreferences;\n        };\n\n        connection.updateExtraData = function() {\n            connection.socket.emit('extra-data-updated', connection.extra);\n        };\n\n        connection.enableScalableBroadcast = false;\n        connection.maxRelayLimitPerUser = 3; // each broadcast should serve only 3 users\n\n        connection.dontCaptureUserMedia = false;\n        connection.dontAttachStream = false;\n        connection.dontGetRemoteStream = false;\n\n        connection.onReConnecting = function(event) {\n            if (connection.enableLogs) {\n                console.info('ReConnecting with', event.userid, '...');\n            }\n        };\n\n        connection.beforeAddingStream = function(stream) {\n            return stream;\n        };\n\n        connection.beforeRemovingStream = function(stream) {\n            return stream;\n        };\n\n        if (typeof isChromeExtensionAvailable !== 'undefined') {\n            connection.checkIfChromeExtensionAvailable = isChromeExtensionAvailable;\n        }\n\n        if (typeof isFirefoxExtensionAvailable !== 'undefined') {\n            connection.checkIfChromeExtensionAvailable = isFirefoxExtensionAvailable;\n        }\n\n        if (typeof getChromeExtensionStatus !== 'undefined') {\n            connection.getChromeExtensionStatus = getChromeExtensionStatus;\n        }\n\n        connection.getScreenConstraints = function(callback, audioPlusTab) {\n            if (isAudioPlusTab(connection, audioPlusTab)) {\n                audioPlusTab = true;\n            }\n\n            getScreenConstraints(function(error, screen_constraints) {\n                if (!error) {\n                    screen_constraints = connection.modifyScreenConstraints(screen_constraints);\n                    callback(error, screen_constraints);\n                }\n            }, audioPlusTab);\n        };\n\n        connection.modifyScreenConstraints = function(screen_constraints) {\n            return screen_constraints;\n        };\n\n        connection.onPeerStateChanged = function(state) {\n            if (connection.enableLogs) {\n                if (state.iceConnectionState.search(/closed|failed/gi) !== -1) {\n                    console.error('Peer connection is closed between you & ', state.userid, state.extra, 'state:', state.iceConnectionState);\n                }\n            }\n        };\n\n        connection.isOnline = true;\n\n        listenEventHandler('online', function() {\n            connection.isOnline = true;\n        });\n\n        listenEventHandler('offline', function() {\n            connection.isOnline = false;\n        });\n\n        connection.isLowBandwidth = false;\n        if (navigator && navigator.connection && navigator.connection.type) {\n            connection.isLowBandwidth = navigator.connection.type.toString().toLowerCase().search(/wifi|cell/g) !== -1;\n            if (connection.isLowBandwidth) {\n                connection.bandwidth = {\n                    audio: 30,\n                    video: 30,\n                    screen: 30\n                };\n\n                if (connection.mediaConstraints.audio && connection.mediaConstraints.audio.optional && connection.mediaConstraints.audio.optional.length) {\n                    var newArray = [];\n                    connection.mediaConstraints.audio.optional.forEach(function(opt) {\n                        if (typeof opt.bandwidth === 'undefined') {\n                            newArray.push(opt);\n                        }\n                    });\n                    connection.mediaConstraints.audio.optional = newArray;\n                }\n\n                if (connection.mediaConstraints.video && connection.mediaConstraints.video.optional && connection.mediaConstraints.video.optional.length) {\n                    var newArray = [];\n                    connection.mediaConstraints.video.optional.forEach(function(opt) {\n                        if (typeof opt.bandwidth === 'undefined') {\n                            newArray.push(opt);\n                        }\n                    });\n                    connection.mediaConstraints.video.optional = newArray;\n                }\n            }\n        }\n\n        connection.getExtraData = function(remoteUserId) {\n            if (!remoteUserId) throw 'remoteUserId is required.';\n            if (!connection.peers[remoteUserId]) return {};\n            return connection.peers[remoteUserId].extra;\n        };\n\n        if (!!forceOptions.autoOpenOrJoin) {\n            connection.openOrJoin(connection.sessionid);\n        }\n\n        connection.onUserIdAlreadyTaken = function(useridAlreadyTaken, yourNewUserId) {\n            if (connection.enableLogs) {\n                console.warn('Userid already taken.', useridAlreadyTaken, 'Your new userid:', yourNewUserId);\n            }\n\n            connection.join(useridAlreadyTaken);\n        };\n\n        connection.onRoomFull = function(roomid) {\n            if (connection.enableLogs) {\n                console.warn(roomid, 'is full.');\n            }\n        };\n\n        connection.trickleIce = true;\n        connection.version = '3.4.4';\n\n        connection.onSettingLocalDescription = function(event) {\n            if (connection.enableLogs) {\n                console.info('Set local description for remote user', event.userid);\n            }\n        };\n\n        connection.oneRoomAlreadyExist = function(roomid) {\n            if (connection.enableLogs) {\n                console.info('Server says \"Room ', roomid, 'already exist. Joining instead.');\n            }\n            connection.join(roomid);\n        };\n    })(this);\n\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/teacher/rtcMultiConnection.js\n// module id = 135\n// module chunks = 1","module.exports = (__webpack_require__(1))(12)\n\n\n//////////////////\n// WEBPACK FOOTER\n// delegated ./node_modules/rxjs/Subject.js from dll-reference vendor_lib\n// module id = 136\n// module chunks = 1","module.exports = (__webpack_require__(1))(410)\n\n\n//////////////////\n// WEBPACK FOOTER\n// delegated ./node_modules/rxjs/add/observable/forkJoin.js from dll-reference vendor_lib\n// module id = 274\n// module chunks = 1","module.exports = (__webpack_require__(1))(412)\n\n\n//////////////////\n// WEBPACK FOOTER\n// delegated ./node_modules/rxjs/add/observable/fromEvent.js from dll-reference vendor_lib\n// module id = 275\n// module chunks = 1","module.exports = (__webpack_require__(1))(418)\n\n\n//////////////////\n// WEBPACK FOOTER\n// delegated ./node_modules/rxjs/add/observable/merge.js from dll-reference vendor_lib\n// module id = 276\n// module chunks = 1","module.exports = (__webpack_require__(1))(425)\n\n\n//////////////////\n// WEBPACK FOOTER\n// delegated ./node_modules/rxjs/add/observable/throw.js from dll-reference vendor_lib\n// module id = 277\n// module chunks = 1","module.exports = (__webpack_require__(1))(430)\n\n\n//////////////////\n// WEBPACK FOOTER\n// delegated ./node_modules/rxjs/add/operator/auditTime.js from dll-reference vendor_lib\n// module id = 278\n// module chunks = 1","module.exports = (__webpack_require__(1))(436)\n\n\n//////////////////\n// WEBPACK FOOTER\n// delegated ./node_modules/rxjs/add/operator/catch.js from dll-reference vendor_lib\n// module id = 279\n// module chunks = 1","module.exports = (__webpack_require__(1))(453)\n\n\n//////////////////\n// WEBPACK FOOTER\n// delegated ./node_modules/rxjs/add/operator/do.js from dll-reference vendor_lib\n// module id = 280\n// module chunks = 1","module.exports = (__webpack_require__(1))(459)\n\n\n//////////////////\n// WEBPACK FOOTER\n// delegated ./node_modules/rxjs/add/operator/filter.js from dll-reference vendor_lib\n// module id = 281\n// module chunks = 1","module.exports = (__webpack_require__(1))(460)\n\n\n//////////////////\n// WEBPACK FOOTER\n// delegated ./node_modules/rxjs/add/operator/finally.js from dll-reference vendor_lib\n// module id = 282\n// module chunks = 1","module.exports = (__webpack_require__(1))(463)\n\n\n//////////////////\n// WEBPACK FOOTER\n// delegated ./node_modules/rxjs/add/operator/first.js from dll-reference vendor_lib\n// module id = 283\n// module chunks = 1","module.exports = (__webpack_require__(1))(469)\n\n\n//////////////////\n// WEBPACK FOOTER\n// delegated ./node_modules/rxjs/add/operator/map.js from dll-reference vendor_lib\n// module id = 284\n// module chunks = 1","module.exports = (__webpack_require__(1))(499)\n\n\n//////////////////\n// WEBPACK FOOTER\n// delegated ./node_modules/rxjs/add/operator/share.js from dll-reference vendor_lib\n// module id = 285\n// module chunks = 1","module.exports = (__webpack_require__(1))(504)\n\n\n//////////////////\n// WEBPACK FOOTER\n// delegated ./node_modules/rxjs/add/operator/startWith.js from dll-reference vendor_lib\n// module id = 286\n// module chunks = 1","module.exports = (__webpack_require__(1))(507)\n\n\n//////////////////\n// WEBPACK FOOTER\n// delegated ./node_modules/rxjs/add/operator/switchMap.js from dll-reference vendor_lib\n// module id = 287\n// module chunks = 1","module.exports = (__webpack_require__(1))(73)\n\n\n//////////////////\n// WEBPACK FOOTER\n// delegated ./node_modules/@angular/common/@angular/common.es5.js from dll-reference vendor_lib\n// module id = 288\n// module chunks = 1","/* (ignored) */\n\n\n//////////////////\n// WEBPACK FOOTER\n// ws (ignored)\n// module id = 289\n// module chunks = 1"],"mappings":";A;;;;;AAAA;;;;;;;ACAA;;;;;;ACAA;;;;;;;;;;;;ACAA;;;;;;;;;;;;;ACAA;AAOA;AADA;AAGA;AA0BA;AAvBA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAJA;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AA5BA;AADA;AACA;AAAA;;;;;;;;;;;ACPA;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AAIA;AACA;AAIA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAKA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAKA;AAEA;AAEA;;;;;;;ACxDA;;;;;;;;ACAA;AAAA;AAAA;;;;;;;;ACAA;AAAA;AAAA;;;;;;;;ACAA;AAAA;AAAA;;;;;;;;ACAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;ACAA;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;ACAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;;;;;;;;;;;;;;;;;;ACAA;;AAEA;AACA;AAKA;AAEA;;;AAGA;AAyBA;AAKA;AACA;AALA;AACA;AACA;AAIA;AAEA;AAEA;AAEA;AAAA;AAbA;AAxBA;AACA;AACA;AACA;AACA;AACA;AACA;AAiBA;AAOA;AANA;AAAA;AAiBA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAKA;AAMA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAMA;AACA;AAEA;AACA;AAEA;AACA;AAQA;;AAEA;AA4BA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AA5CA;AA3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AAJA;AAAA;;;;;;;;;;;;;;;;;AC7FA;AACA;AACA;AAGA;AAAA;AAIA;AAHA;AACA;AACA;AACA;AAAA;AAJA;AADA;AACA;AAAA;AAMA;AACA;AACA;AACA;;;;;;;;ACZA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;;;;;;;;;;;;;;ACtBA;AAKA;AACA;AAiBA;AAGA;AACA;AACA;AACA;AALA;AACA;AAKA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAnBA;AAdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AANA;AAAA;;;;;;;;ACvBA;AAAA;AAAA;;;;;;;;;;;;;ACAA;AACA;AAGA;AAIA;AACA;AAHA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAjBA;AADA;AAMA;AALA;AAAA;;;;;;;;;;;;ACJA;AAUA;AAAA;AAEA;AAAA;AAAA;AAFA;AARA;AACA;AACA;AAKA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;ACVA;AAIA;AACA;AACA;AACA;AACA;AAQA;AAWA;AAEA;AACA;AACA;AACA;AAbeA;AACA;AACA;AAhBA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;AChBA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AAOA;AAaA;AAEA;AACA;AACA;AACA;AAfnOA;AALA;AACA;AACA;AACA;AACA;AAiBA;AACA;AACA;AAlBA;AAAA;;;;;;;;AClBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACPA;;;;;;ACAA;;;;;;ACAA;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACpegegLA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;A","sourceRoot":""}